; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\adc.o --depend=.\Object\adc.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\adc.crf Src\BSP\ADC.C]
                          THUMB

                          AREA ||i.ADC_DMA_Init||, CODE, READONLY, ALIGN=2

                  ADC_DMA_Init PROC
;;;10     
;;;11     void ADC_DMA_Init(void)
000000  b500              PUSH     {lr}
;;;12     {
000002  b099              SUB      sp,sp,#0x64
;;;13     	GPIO_InitTypeDef GPIO_InitStructure;
;;;14     	ADC_InitTypeDef ADC_InitStructure;
;;;15     	DMA_InitTypeDef DMA_InitStructure;
;;;16     	
;;;17     	TIM_TimeBaseInitTypeDef   TIM_TimeBaseStructure;
;;;18     	TIM_OCInitTypeDef         TIM_OCInitStructure;
;;;19     
;;;20     	RCC_ADCCLKConfig(RCC_PCLK2_Div8); 
000004  f44f4040          MOV      r0,#0xc000
000008  f7fffffe          BL       RCC_ADCCLKConfig
;;;21     	
;;;22     	/* Enable peripheral clocks ------------------------------------------------*/
;;;23     	/* Enable DMA1 clock */
;;;24     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;25     
;;;26     	/* Enable ADC1 and GPIOC clock */
;;;27     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_TIM1, ENABLE);
000014  2101              MOVS     r1,#1
000016  f6402004          MOV      r0,#0xa04
00001a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;28     	
;;;29     	/* Configure PA.01 (ADC Channel1) as analog input -------------------------*/
;;;30     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
00001e  2002              MOVS     r0,#2
000020  f8ad0060          STRH     r0,[sp,#0x60]
;;;31     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
000024  2000              MOVS     r0,#0
000026  f88d0063          STRB     r0,[sp,#0x63]
;;;32     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00002a  a918              ADD      r1,sp,#0x60
00002c  4844              LDR      r0,|L1.320|
00002e  f7fffffe          BL       GPIO_Init
;;;33     	
;;;34     	/* TIM1 configuration ------------------------------------------------------*/ 
;;;35     	/* Time Base configuration */
;;;36     	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure); 
000032  a805              ADD      r0,sp,#0x14
000034  f7fffffe          BL       TIM_TimeBaseStructInit
;;;37     	TIM_TimeBaseStructure.TIM_Period = 90;          
000038  205a              MOVS     r0,#0x5a
00003a  f8ad0018          STRH     r0,[sp,#0x18]
;;;38     	TIM_TimeBaseStructure.TIM_Prescaler = 100;       
00003e  2064              MOVS     r0,#0x64
000040  f8ad0014          STRH     r0,[sp,#0x14]
;;;39     	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;    
000044  2000              MOVS     r0,#0
000046  f8ad001a          STRH     r0,[sp,#0x1a]
;;;40     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  
00004a  f8ad0016          STRH     r0,[sp,#0x16]
;;;41     	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
00004e  a905              ADD      r1,sp,#0x14
000050  483c              LDR      r0,|L1.324|
000052  f7fffffe          BL       TIM_TimeBaseInit
;;;42     	/* TIM1 channel1 configuration in PWM mode */
;;;43     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 
000056  2060              MOVS     r0,#0x60
000058  f8ad0004          STRH     r0,[sp,#4]
;;;44     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;                
00005c  2001              MOVS     r0,#1
00005e  f8ad0006          STRH     r0,[sp,#6]
;;;45     	TIM_OCInitStructure.TIM_Pulse = 0x10; 
000062  2010              MOVS     r0,#0x10
000064  f8ad000a          STRH     r0,[sp,#0xa]
;;;46     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;         
000068  2002              MOVS     r0,#2
00006a  f8ad000c          STRH     r0,[sp,#0xc]
;;;47     	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
00006e  a901              ADD      r1,sp,#4
000070  4834              LDR      r0,|L1.324|
000072  f7fffffe          BL       TIM_OC1Init
;;;48     					   
;;;49     	/* TIM1 counter enable */
;;;50     	//TIM_Cmd(TIM1, ENABLE); 
;;;51     	/* TIM1 main Output Enable */
;;;52     	TIM_CtrlPWMOutputs(TIM1, ENABLE); 
000076  2101              MOVS     r1,#1
000078  4832              LDR      r0,|L1.324|
00007a  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;53     
;;;54     	/* DMA1 channel1 configuration ----------------------------------------------*/
;;;55     	DMA_DeInit(DMA1_Channel1);
00007e  4832              LDR      r0,|L1.328|
000080  f7fffffe          BL       DMA_DeInit
;;;56     	DMA_InitStructure.DMA_PeripheralBaseAddr =(u32)&(ADC1->DR);
000084  4831              LDR      r0,|L1.332|
000086  9008              STR      r0,[sp,#0x20]
;;;57     	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&VcBuf;
000088  4831              LDR      r0,|L1.336|
00008a  9009              STR      r0,[sp,#0x24]
;;;58     	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
00008c  2000              MOVS     r0,#0
00008e  900a              STR      r0,[sp,#0x28]
;;;59     	DMA_InitStructure.DMA_BufferSize = VcBuf_Len;
000090  f44f507a          MOV      r0,#0x3e80
000094  900b              STR      r0,[sp,#0x2c]
;;;60     	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000096  2000              MOVS     r0,#0
000098  900c              STR      r0,[sp,#0x30]
;;;61     	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
00009a  2080              MOVS     r0,#0x80
00009c  900d              STR      r0,[sp,#0x34]
;;;62     	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
00009e  0040              LSLS     r0,r0,#1
0000a0  900e              STR      r0,[sp,#0x38]
;;;63     	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
0000a2  0080              LSLS     r0,r0,#2
0000a4  900f              STR      r0,[sp,#0x3c]
;;;64     	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
0000a6  2020              MOVS     r0,#0x20
0000a8  9010              STR      r0,[sp,#0x40]
;;;65     	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
0000aa  0200              LSLS     r0,r0,#8
0000ac  9011              STR      r0,[sp,#0x44]
;;;66     	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
0000ae  2000              MOVS     r0,#0
0000b0  9012              STR      r0,[sp,#0x48]
;;;67     	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
0000b2  a908              ADD      r1,sp,#0x20
0000b4  4824              LDR      r0,|L1.328|
0000b6  f7fffffe          BL       DMA_Init
;;;68     
;;;69     	/* Enable DMA1 channel1 */
;;;70     	DMA_Cmd(DMA1_Channel1, ENABLE);
0000ba  2101              MOVS     r1,#1
0000bc  4822              LDR      r0,|L1.328|
0000be  f7fffffe          BL       DMA_Cmd
;;;71     
;;;72     	/* ADC1 configuration ------------------------------------------------------*/
;;;73     	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
0000c2  2000              MOVS     r0,#0
0000c4  9013              STR      r0,[sp,#0x4c]
;;;74     	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
0000c6  f88d0050          STRB     r0,[sp,#0x50]
;;;75     	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
0000ca  f88d0051          STRB     r0,[sp,#0x51]
;;;76     	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
0000ce  9015              STR      r0,[sp,#0x54]
;;;77     	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
0000d0  9016              STR      r0,[sp,#0x58]
;;;78     	ADC_InitStructure.ADC_NbrOfChannel = 1;
0000d2  2001              MOVS     r0,#1
0000d4  f88d005c          STRB     r0,[sp,#0x5c]
;;;79     	ADC_Init(ADC1, &ADC_InitStructure);
0000d8  a913              ADD      r1,sp,#0x4c
0000da  481c              LDR      r0,|L1.332|
0000dc  384c              SUBS     r0,r0,#0x4c
0000de  f7fffffe          BL       ADC_Init
;;;80     
;;;81     	/* ADC1 regular channel1 configuration */ 
;;;82     	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_55Cycles5);
0000e2  2305              MOVS     r3,#5
0000e4  2201              MOVS     r2,#1
0000e6  4611              MOV      r1,r2
0000e8  4818              LDR      r0,|L1.332|
0000ea  384c              SUBS     r0,r0,#0x4c
0000ec  f7fffffe          BL       ADC_RegularChannelConfig
;;;83     
;;;84     	/* Enable ADC1 DMA */
;;;85     	ADC_DMACmd(ADC1, ENABLE);
0000f0  2101              MOVS     r1,#1
0000f2  4816              LDR      r0,|L1.332|
0000f4  384c              SUBS     r0,r0,#0x4c
0000f6  f7fffffe          BL       ADC_DMACmd
;;;86     
;;;87     	/* Enable ADC1 */
;;;88     	ADC_Cmd(ADC1, ENABLE);
0000fa  2101              MOVS     r1,#1
0000fc  4813              LDR      r0,|L1.332|
0000fe  384c              SUBS     r0,r0,#0x4c
000100  f7fffffe          BL       ADC_Cmd
;;;89     
;;;90     	/* Enable ADC1 reset calibaration register */   
;;;91     	ADC_ResetCalibration(ADC1);
000104  4811              LDR      r0,|L1.332|
000106  384c              SUBS     r0,r0,#0x4c
000108  f7fffffe          BL       ADC_ResetCalibration
;;;92     	/* Check the end of ADC1 reset calibration register */
;;;93     	while(ADC_GetResetCalibrationStatus(ADC1));
00010c  bf00              NOP      
                  |L1.270|
00010e  480f              LDR      r0,|L1.332|
000110  384c              SUBS     r0,r0,#0x4c
000112  f7fffffe          BL       ADC_GetResetCalibrationStatus
000116  2800              CMP      r0,#0
000118  d1f9              BNE      |L1.270|
;;;94     
;;;95     	/* Start ADC1 calibaration */
;;;96     	ADC_StartCalibration(ADC1);
00011a  480c              LDR      r0,|L1.332|
00011c  384c              SUBS     r0,r0,#0x4c
00011e  f7fffffe          BL       ADC_StartCalibration
;;;97     	/* Check the end of ADC1 calibration */
;;;98     	while(ADC_GetCalibrationStatus(ADC1));
000122  bf00              NOP      
                  |L1.292|
000124  4809              LDR      r0,|L1.332|
000126  384c              SUBS     r0,r0,#0x4c
000128  f7fffffe          BL       ADC_GetCalibrationStatus
00012c  2800              CMP      r0,#0
00012e  d1f9              BNE      |L1.292|
;;;99     
;;;100    	/* Start ADC1 Software Conversion */ 
;;;101    	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
000130  2101              MOVS     r1,#1
000132  4806              LDR      r0,|L1.332|
000134  384c              SUBS     r0,r0,#0x4c
000136  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;102    
;;;103    }
00013a  b019              ADD      sp,sp,#0x64
00013c  bd00              POP      {pc}
;;;104    
                          ENDP

00013e  0000              DCW      0x0000
                  |L1.320|
                          DCD      0x40010800
                  |L1.324|
                          DCD      0x40012c00
                  |L1.328|
                          DCD      0x40020008
                  |L1.332|
                          DCD      0x4001244c
                  |L1.336|
                          DCD      VcBuf
