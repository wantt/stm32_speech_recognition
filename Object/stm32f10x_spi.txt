; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\stm32f10x_spi.o --depend=.\Object\stm32f10x_spi.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\stm32f10x_spi.crf Src\StdPeriph_Driver\src\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;449      */
;;;450    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;451    {
;;;452      /* Check the parameters */
;;;453      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;454      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;455      if (NewState != DISABLE)
;;;456      {
;;;457        /* Enable the selected SPI peripheral (in I2S mode) */
;;;458        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  f4426280          ORR      r2,r2,#0x400
000008  8382              STRH     r2,[r0,#0x1c]
00000a  e004              B        |L1.22|
                  |L1.12|
;;;459      }
;;;460      else
;;;461      {
;;;462        /* Disable the selected SPI peripheral (in I2S mode) */
;;;463        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
00000c  8b82              LDRH     r2,[r0,#0x1c]
00000e  f64f33ff          MOV      r3,#0xfbff
000012  401a              ANDS     r2,r2,r3
000014  8382              STRH     r2,[r0,#0x1c]
                  |L1.22|
;;;464      }
;;;465    }
000016  4770              BX       lr
;;;466    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;217      */
;;;218    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;219    {
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
;;;220      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
00000a  f04f0900          MOV      r9,#0
00000e  2702              MOVS     r7,#2
000010  f04f0800          MOV      r8,#0
000014  f04f0b01          MOV      r11,#1
;;;221      uint32_t tmp = 0;
000018  2600              MOVS     r6,#0
;;;222      RCC_ClocksTypeDef RCC_Clocks;
;;;223      uint32_t sourceclock = 0;
00001a  46b2              MOV      r10,r6
;;;224      
;;;225      /* Check the I2S parameters */
;;;226      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;227      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;228      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;229      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;230      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;231      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;232      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;233    
;;;234    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;235      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;236      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00001c  8ba8              LDRH     r0,[r5,#0x1c]
00001e  f24f0140          MOV      r1,#0xf040
000022  4008              ANDS     r0,r0,r1
000024  83a8              STRH     r0,[r5,#0x1c]
;;;237      SPIx->I2SPR = 0x0002;
000026  2002              MOVS     r0,#2
000028  8428              STRH     r0,[r5,#0x20]
;;;238      
;;;239      /* Get the I2SCFGR register value */
;;;240      tmpreg = SPIx->I2SCFGR;
00002a  f8b5901c          LDRH     r9,[r5,#0x1c]
;;;241      
;;;242      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;243      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00002e  68a0              LDR      r0,[r4,#8]
000030  2802              CMP      r0,#2
000032  d101              BNE      |L2.56|
;;;244      {
;;;245        i2sodd = (uint16_t)0;
000034  bf00              NOP      
;;;246        i2sdiv = (uint16_t)2;   
000036  e036              B        |L2.166|
                  |L2.56|
;;;247      }
;;;248      /* If the requested audio frequency is not the default, compute the prescaler */
;;;249      else
;;;250      {
;;;251        /* Check the frame length (For the Prescaler computing) */
;;;252        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000038  88a0              LDRH     r0,[r4,#4]
00003a  b910              CBNZ     r0,|L2.66|
;;;253        {
;;;254          /* Packet length is 16 bits */
;;;255          packetlength = 1;
00003c  f04f0b01          MOV      r11,#1
000040  e001              B        |L2.70|
                  |L2.66|
;;;256        }
;;;257        else
;;;258        {
;;;259          /* Packet length is 32 bits */
;;;260          packetlength = 2;
000042  f04f0b02          MOV      r11,#2
                  |L2.70|
;;;261        }
;;;262    
;;;263        /* Get the I2S clock source mask depending on the peripheral number */
;;;264        if(((uint32_t)SPIx) == SPI2_BASE)
000046  4826              LDR      r0,|L2.224|
000048  4285              CMP      r5,r0
00004a  d100              BNE      |L2.78|
;;;265        {
;;;266          /* The mask is relative to I2S2 */
;;;267          tmp = I2S2_CLOCK_SRC;
00004c  e000              B        |L2.80|
                  |L2.78|
;;;268        }
;;;269        else 
;;;270        {
;;;271          /* The mask is relative to I2S3 */      
;;;272          tmp = I2S3_CLOCK_SRC;
00004e  bf00              NOP      
                  |L2.80|
;;;273        }
;;;274    
;;;275        /* Check the I2S clock source configuration depending on the Device:
;;;276           Only Connectivity line devices have the PLL3 VCO clock */
;;;277    #ifdef STM32F10X_CL
;;;278        if((RCC->CFGR2 & tmp) != 0)
;;;279        {
;;;280          /* Get the configuration bits of RCC PLL3 multiplier */
;;;281          tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
;;;282    
;;;283          /* Get the value of the PLL3 multiplier */      
;;;284          if((tmp > 5) && (tmp < 15))
;;;285          {
;;;286            /* Multplier is between 8 and 14 (value 15 is forbidden) */
;;;287            tmp += 2;
;;;288          }
;;;289          else
;;;290          {
;;;291            if (tmp == 15)
;;;292            {
;;;293              /* Multiplier is 20 */
;;;294              tmp = 20;
;;;295            }
;;;296          }      
;;;297          /* Get the PREDIV2 value */
;;;298          sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
;;;299          
;;;300          /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
;;;301          sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
;;;302        }
;;;303        else
;;;304        {
;;;305          /* I2S Clock source is System clock: Get System Clock frequency */
;;;306          RCC_GetClocksFreq(&RCC_Clocks);      
;;;307          
;;;308          /* Get the source clock value: based on System Clock value */
;;;309          sourceclock = RCC_Clocks.SYSCLK_Frequency;
;;;310        }        
;;;311    #else /* STM32F10X_HD */
;;;312        /* I2S Clock source is System clock: Get System Clock frequency */
;;;313        RCC_GetClocksFreq(&RCC_Clocks);      
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       RCC_GetClocksFreq
;;;314          
;;;315        /* Get the source clock value: based on System Clock value */
;;;316        sourceclock = RCC_Clocks.SYSCLK_Frequency;    
000056  f8dda000          LDR      r10,[sp,#0]
;;;317    #endif /* STM32F10X_CL */    
;;;318    
;;;319        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;320        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00005a  88e0              LDRH     r0,[r4,#6]
00005c  f5b07f00          CMP      r0,#0x200
000060  d10a              BNE      |L2.120|
;;;321        {
;;;322          /* MCLK output is enabled */
;;;323          tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000062  ea4f201a          LSR      r0,r10,#8
000066  eb000080          ADD      r0,r0,r0,LSL #2
00006a  0040              LSLS     r0,r0,#1
00006c  68a1              LDR      r1,[r4,#8]
00006e  fbb0f0f1          UDIV     r0,r0,r1
000072  1d40              ADDS     r0,r0,#5
000074  b286              UXTH     r6,r0
000076  e00b              B        |L2.144|
                  |L2.120|
;;;324        }
;;;325        else
;;;326        {
;;;327          /* MCLK output is disabled */
;;;328          tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000078  ea4f104b          LSL      r0,r11,#5
00007c  fbbaf0f0          UDIV     r0,r10,r0
000080  eb000080          ADD      r0,r0,r0,LSL #2
000084  0040              LSLS     r0,r0,#1
000086  68a1              LDR      r1,[r4,#8]
000088  fbb0f0f1          UDIV     r0,r0,r1
00008c  1d40              ADDS     r0,r0,#5
00008e  b286              UXTH     r6,r0
                  |L2.144|
;;;329        }
;;;330        
;;;331        /* Remove the flaoting point */
;;;332        tmp = tmp / 10;  
000090  200a              MOVS     r0,#0xa
000092  fbb6f6f0          UDIV     r6,r6,r0
;;;333          
;;;334        /* Check the parity of the divider */
;;;335        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000096  f0060801          AND      r8,r6,#1
;;;336       
;;;337        /* Compute the i2sdiv prescaler */
;;;338        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
00009a  eba60008          SUB      r0,r6,r8
00009e  f3c0074f          UBFX     r7,r0,#1,#16
;;;339       
;;;340        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;341        i2sodd = (uint16_t) (i2sodd << 8);
0000a2  ea4f2808          LSL      r8,r8,#8
                  |L2.166|
;;;342      }
;;;343      
;;;344      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;345      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
0000a6  2f02              CMP      r7,#2
0000a8  db01              BLT      |L2.174|
0000aa  2fff              CMP      r7,#0xff
0000ac  dd02              BLE      |L2.180|
                  |L2.174|
;;;346      {
;;;347        /* Set the default values */
;;;348        i2sdiv = 2;
0000ae  2702              MOVS     r7,#2
;;;349        i2sodd = 0;
0000b0  f04f0800          MOV      r8,#0
                  |L2.180|
;;;350      }
;;;351    
;;;352      /* Write to SPIx I2SPR register the computed value */
;;;353      SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
0000b4  88e0              LDRH     r0,[r4,#6]
0000b6  ea400008          ORR      r0,r0,r8
0000ba  4338              ORRS     r0,r0,r7
0000bc  8428              STRH     r0,[r5,#0x20]
;;;354     
;;;355      /* Configure the I2S with the SPI_InitStruct values */
;;;356      tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
0000be  88a0              LDRH     r0,[r4,#4]
0000c0  89a1              LDRH     r1,[r4,#0xc]
0000c2  4308              ORRS     r0,r0,r1
0000c4  8861              LDRH     r1,[r4,#2]
0000c6  4308              ORRS     r0,r0,r1
0000c8  8821              LDRH     r1,[r4,#0]
0000ca  4308              ORRS     r0,r0,r1
0000cc  f4406000          ORR      r0,r0,#0x800
0000d0  ea400909          ORR      r9,r0,r9
;;;357                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;358                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;359     
;;;360      /* Write to SPIx I2SCFGR */  
;;;361      SPIx->I2SCFGR = tmpreg;   
0000d4  f8a5901c          STRH     r9,[r5,#0x1c]
;;;362    }
0000d8  b005              ADD      sp,sp,#0x14
0000da  e8bd8ff0          POP      {r4-r11,pc}
;;;363    
                          ENDP

0000de  0000              DCW      0x0000
                  |L2.224|
                          DCD      0x40003800

                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;396      */
;;;397    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;398    {
;;;399    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;400      /* Initialize the I2S_Mode member */
;;;401      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;402      
;;;403      /* Initialize the I2S_Standard member */
;;;404      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;405      
;;;406      /* Initialize the I2S_DataFormat member */
;;;407      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;408      
;;;409      /* Initialize the I2S_MCLKOutput member */
;;;410      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;411      
;;;412      /* Initialize the I2S_AudioFreq member */
;;;413      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  6081              STR      r1,[r0,#8]
;;;414      
;;;415      /* Initialize the I2S_CPOL member */
;;;416      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8181              STRH     r1,[r0,#0xc]
;;;417    }
000012  4770              BX       lr
;;;418    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;730      */
;;;731    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;732    {
;;;733      /* Check the parameters */
;;;734      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;735      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;736      if (SPI_Direction == SPI_Direction_Tx)
000004  d104              BNE      |L4.16|
;;;737      {
;;;738        /* Set the Tx only mode */
;;;739        SPIx->CR1 |= SPI_Direction_Tx;
000006  8802              LDRH     r2,[r0,#0]
000008  f4424280          ORR      r2,r2,#0x4000
00000c  8002              STRH     r2,[r0,#0]
00000e  e004              B        |L4.26|
                  |L4.16|
;;;740      }
;;;741      else
;;;742      {
;;;743        /* Set the Rx only mode */
;;;744        SPIx->CR1 &= SPI_Direction_Rx;
000010  8802              LDRH     r2,[r0,#0]
000012  f64b73ff          MOV      r3,#0xbfff
000016  401a              ANDS     r2,r2,r3
000018  8002              STRH     r2,[r0,#0]
                  |L4.26|
;;;745      }
;;;746    }
00001a  4770              BX       lr
;;;747    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;661      */
;;;662    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;663    {
;;;664      /* Check the parameters */
;;;665      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;666      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;667      if (NewState != DISABLE)
;;;668      {
;;;669        /* Enable the selected SPI CRC calculation */
;;;670        SPIx->CR1 |= CR1_CRCEN_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;671      }
;;;672      else
;;;673      {
;;;674        /* Disable the selected SPI CRC calculation */
;;;675        SPIx->CR1 &= CR1_CRCEN_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L5.22|
;;;676      }
;;;677    }
000016  4770              BX       lr
;;;678    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;425      */
;;;426    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L6.12|
;;;427    {
;;;428      /* Check the parameters */
;;;429      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;430      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;431      if (NewState != DISABLE)
;;;432      {
;;;433        /* Enable the selected SPI peripheral */
;;;434        SPIx->CR1 |= CR1_SPE_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f0420240          ORR      r2,r2,#0x40
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;435      }
;;;436      else
;;;437      {
;;;438        /* Disable the selected SPI peripheral */
;;;439        SPIx->CR1 &= CR1_SPE_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64f73bf          MOV      r3,#0xffbf
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L6.22|
;;;440      }
;;;441    }
000016  4770              BX       lr
;;;442    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;629      */
;;;630    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;631    {
;;;632      /* Check the parameters */
;;;633      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;634      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;635      /* Clear DFF bit */
;;;636      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;637      /* Set new DFF bit value */
;;;638      SPIx->CR1 |= SPI_DataSize;
00000a  8802              LDRH     r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;639    }
000010  4770              BX       lr
;;;640    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;687      */
;;;688    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  4602              MOV      r2,r0
;;;689    {
;;;690      uint16_t crcreg = 0;
000002  2000              MOVS     r0,#0
;;;691      /* Check the parameters */
;;;692      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;693      assert_param(IS_SPI_CRC(SPI_CRC));
;;;694      if (SPI_CRC != SPI_CRC_Rx)
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L8.12|
;;;695      {
;;;696        /* Get the Tx CRC register */
;;;697        crcreg = SPIx->TXCRCR;
000008  8b10              LDRH     r0,[r2,#0x18]
00000a  e000              B        |L8.14|
                  |L8.12|
;;;698      }
;;;699      else
;;;700      {
;;;701        /* Get the Rx CRC register */
;;;702        crcreg = SPIx->RXCRCR;
00000c  8a90              LDRH     r0,[r2,#0x14]
                  |L8.14|
;;;703      }
;;;704      /* Return the selected CRC register */
;;;705      return crcreg;
;;;706    }
00000e  4770              BX       lr
;;;707    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;712      */
;;;713    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;714    {
;;;715      /* Check the parameters */
;;;716      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;717      
;;;718      /* Return the CRC polynomial register */
;;;719      return SPIx->CRCPR;
000002  8a08              LDRH     r0,[r1,#0x10]
;;;720    }
000004  4770              BX       lr
;;;721    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;802      */
;;;803    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43ca              MVNS     r2,r1
;;;804    {
;;;805      /* Check the parameters */
;;;806      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;807      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;808        
;;;809        /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;810        SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8102              STRH     r2,[r0,#8]
;;;811    }
000004  4770              BX       lr
;;;812    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;881      */
;;;882    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;883    {
;;;884      uint16_t itpos = 0;
000002  2200              MOVS     r2,#0
;;;885      /* Check the parameters */
;;;886      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;887      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;888    
;;;889      /* Get the SPI IT index */
;;;890      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  f001040f          AND      r4,r1,#0xf
000008  2301              MOVS     r3,#1
00000a  40a3              LSLS     r3,r3,r4
00000c  b29a              UXTH     r2,r3
;;;891    
;;;892      /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;893      SPIx->SR = (uint16_t)~itpos;
00000e  43d3              MVNS     r3,r2
000010  8103              STRH     r3,[r0,#8]
;;;894    }
000012  bd10              POP      {r4,pc}
;;;895    /**
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;519      */
;;;520    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;521    {
;;;522      /* Check the parameters */
;;;523      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;524      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;525      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;526      if (NewState != DISABLE)
000002  b11a              CBZ      r2,|L12.12|
;;;527      {
;;;528        /* Enable the selected SPI/I2S DMA requests */
;;;529        SPIx->CR2 |= SPI_I2S_DMAReq;
000004  8883              LDRH     r3,[r0,#4]
000006  430b              ORRS     r3,r3,r1
000008  8083              STRH     r3,[r0,#4]
00000a  e004              B        |L12.22|
                  |L12.12|
;;;530      }
;;;531      else
;;;532      {
;;;533        /* Disable the selected SPI/I2S DMA requests */
;;;534        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
00000c  8883              LDRH     r3,[r0,#4]
00000e  43cc              MVNS     r4,r1
000010  b2a4              UXTH     r4,r4
000012  4023              ANDS     r3,r3,r4
000014  8083              STRH     r3,[r0,#4]
                  |L12.22|
;;;535      }
;;;536    }
000016  bd10              POP      {r4,pc}
;;;537    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;117      */
;;;118    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;119    {
000002  4604              MOV      r4,r0
;;;120      /* Check the parameters */
;;;121      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;122    
;;;123      if (SPIx == SPI1)
000004  4811              LDR      r0,|L13.76|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L13.28|
;;;124      {
;;;125        /* Enable SPI1 reset state */
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  1480              ASRS     r0,r0,#18
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;127        /* Release SPI1 from reset state */
;;;128        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  2100              MOVS     r1,#0
000014  14a0              ASRS     r0,r4,#18
000016  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001a  e016              B        |L13.74|
                  |L13.28|
;;;129      }
;;;130      else if (SPIx == SPI2)
00001c  480c              LDR      r0,|L13.80|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L13.52|
;;;131      {
;;;132        /* Enable SPI2 reset state */
;;;133        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000022  2101              MOVS     r1,#1
000024  1400              ASRS     r0,r0,#16
000026  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;134        /* Release SPI2 from reset state */
;;;135        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  1420              ASRS     r0,r4,#16
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
000032  e00a              B        |L13.74|
                  |L13.52|
;;;136      }
;;;137      else
;;;138      {
;;;139        if (SPIx == SPI3)
000034  4807              LDR      r0,|L13.84|
000036  4284              CMP      r4,r0
000038  d107              BNE      |L13.74|
;;;140        {
;;;141          /* Enable SPI3 reset state */
;;;142          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  13c0              ASRS     r0,r0,#15
00003e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;143          /* Release SPI3 from reset state */
;;;144          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000042  2100              MOVS     r1,#0
000044  13e0              ASRS     r0,r4,#15
000046  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L13.74|
;;;145        }
;;;146      }
;;;147    }
00004a  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  |L13.76|
                          DCD      0x40013000
                  |L13.80|
                          DCD      0x40003800
                  |L13.84|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;764      */
;;;765    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;766    {
;;;767      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;768      /* Check the parameters */
;;;769      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;770      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;771      /* Check the status of the specified SPI/I2S flag */
;;;772      if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8913              LDRH     r3,[r2,#8]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L14.14|
;;;773      {
;;;774        /* SPI_I2S_FLAG is set */
;;;775        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L14.16|
                  |L14.14|
;;;776      }
;;;777      else
;;;778      {
;;;779        /* SPI_I2S_FLAG is reset */
;;;780        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;781      }
;;;782      /* Return the SPI_I2S_FLAG status */
;;;783      return  bitstatus;
;;;784    }
000010  4770              BX       lr
;;;785    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;827      */
;;;828    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;829    {
000002  4602              MOV      r2,r0
;;;830      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;831      uint16_t itpos = 0, itmask = 0, enablestatus = 0;
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
00000a  2500              MOVS     r5,#0
;;;832    
;;;833      /* Check the parameters */
;;;834      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;835      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;836    
;;;837      /* Get the SPI/I2S IT index */
;;;838      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
00000c  f001070f          AND      r7,r1,#0xf
000010  2601              MOVS     r6,#1
000012  40be              LSLS     r6,r6,r7
000014  b2b4              UXTH     r4,r6
;;;839    
;;;840      /* Get the SPI/I2S IT mask */
;;;841      itmask = SPI_I2S_IT >> 4;
000016  110b              ASRS     r3,r1,#4
;;;842    
;;;843      /* Set the IT mask */
;;;844      itmask = 0x01 << itmask;
000018  2601              MOVS     r6,#1
00001a  409e              LSLS     r6,r6,r3
00001c  b2b3              UXTH     r3,r6
;;;845    
;;;846      /* Get the SPI_I2S_IT enable bit status */
;;;847      enablestatus = (SPIx->CR2 & itmask) ;
00001e  8896              LDRH     r6,[r2,#4]
000020  ea060503          AND      r5,r6,r3
;;;848    
;;;849      /* Check the status of the specified SPI/I2S interrupt */
;;;850      if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
000024  8916              LDRH     r6,[r2,#8]
000026  4226              TST      r6,r4
000028  d002              BEQ      |L15.48|
00002a  b10d              CBZ      r5,|L15.48|
;;;851      {
;;;852        /* SPI_I2S_IT is set */
;;;853        bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L15.50|
                  |L15.48|
;;;854      }
;;;855      else
;;;856      {
;;;857        /* SPI_I2S_IT is reset */
;;;858        bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L15.50|
;;;859      }
;;;860      /* Return the SPI_I2S_IT status */
;;;861      return bitstatus;
;;;862    }
000032  bdf0              POP      {r4-r7,pc}
;;;863    
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;480      */
;;;481    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;482    {
;;;483      uint16_t itpos = 0, itmask = 0 ;
000002  2400              MOVS     r4,#0
000004  2300              MOVS     r3,#0
;;;484      /* Check the parameters */
;;;485      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;488    
;;;489      /* Get the SPI/I2S IT index */
;;;490      itpos = SPI_I2S_IT >> 4;
000006  110c              ASRS     r4,r1,#4
;;;491    
;;;492      /* Set the IT mask */
;;;493      itmask = (uint16_t)1 << (uint16_t)itpos;
000008  2501              MOVS     r5,#1
00000a  40a5              LSLS     r5,r5,r4
00000c  b2ab              UXTH     r3,r5
;;;494    
;;;495      if (NewState != DISABLE)
00000e  b11a              CBZ      r2,|L16.24|
;;;496      {
;;;497        /* Enable the selected SPI/I2S interrupt */
;;;498        SPIx->CR2 |= itmask;
000010  8885              LDRH     r5,[r0,#4]
000012  431d              ORRS     r5,r5,r3
000014  8085              STRH     r5,[r0,#4]
000016  e004              B        |L16.34|
                  |L16.24|
;;;499      }
;;;500      else
;;;501      {
;;;502        /* Disable the selected SPI/I2S interrupt */
;;;503        SPIx->CR2 &= (uint16_t)~itmask;
000018  8885              LDRH     r5,[r0,#4]
00001a  43de              MVNS     r6,r3
00001c  b2b6              UXTH     r6,r6
00001e  4035              ANDS     r5,r5,r6
000020  8085              STRH     r5,[r0,#4]
                  |L16.34|
;;;504      }
;;;505    }
000022  bd70              POP      {r4-r6,pc}
;;;506    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;561      */
;;;562    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;563    {
;;;564      /* Check the parameters */
;;;565      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;566      
;;;567      /* Return the data in the DR register */
;;;568      return SPIx->DR;
000002  8988              LDRH     r0,[r1,#0xc]
;;;569    }
000004  4770              BX       lr
;;;570    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;545      */
;;;546    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;547    {
;;;548      /* Check the parameters */
;;;549      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;550      
;;;551      /* Write in the DR register the data to be sent */
;;;552      SPIx->DR = Data;
;;;553    }
000002  4770              BX       lr
;;;554    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;156      */
;;;157    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;158    {
;;;159      uint16_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;160      
;;;161      /* check the parameters */
;;;162      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;163      
;;;164      /* Check the SPI parameters */
;;;165      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;166      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;167      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;168      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;169      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;170      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;171      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;172      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;173      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;174    
;;;175    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;176      /* Get the SPIx CR1 value */
;;;177      tmpreg = SPIx->CR1;
000004  8802              LDRH     r2,[r0,#0]
;;;178      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;179      tmpreg &= CR1_CLEAR_Mask;
000006  f4025241          AND      r2,r2,#0x3040
;;;180      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;181         master/salve mode, CPOL and CPHA */
;;;182      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;183      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;184      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;185      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;186      /* Set CPOL bit according to SPI_CPOL value */
;;;187      /* Set CPHA bit according to SPI_CPHA value */
;;;188      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  88cc              LDRH     r4,[r1,#6]
000016  4323              ORRS     r3,r3,r4
000018  890c              LDRH     r4,[r1,#8]
00001a  4323              ORRS     r3,r3,r4
00001c  894c              LDRH     r4,[r1,#0xa]
00001e  4323              ORRS     r3,r3,r4
000020  898c              LDRH     r4,[r1,#0xc]
000022  4323              ORRS     r3,r3,r4
000024  89cc              LDRH     r4,[r1,#0xe]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;189                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;190                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;191                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;192      /* Write to SPIx CR1 */
;;;193      SPIx->CR1 = tmpreg;
00002a  8002              STRH     r2,[r0,#0]
;;;194      
;;;195      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;196      SPIx->I2SCFGR &= SPI_Mode_Select;		
00002c  8b83              LDRH     r3,[r0,#0x1c]
00002e  f24f74ff          MOV      r4,#0xf7ff
000032  4023              ANDS     r3,r3,r4
000034  8383              STRH     r3,[r0,#0x1c]
;;;197    
;;;198    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;199      /* Write to SPIx CRCPOLY */
;;;200      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000036  8a0b              LDRH     r3,[r1,#0x10]
000038  8203              STRH     r3,[r0,#0x10]
;;;201    }
00003a  bd10              POP      {r4,pc}
;;;202    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;579      */
;;;580    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;581    {
;;;582      /* Check the parameters */
;;;583      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;584      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;585      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
000004  3aff              SUBS     r2,r2,#0xff
000006  d004              BEQ      |L20.18|
;;;586      {
;;;587        /* Set NSS pin internally by software */
;;;588        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000008  8802              LDRH     r2,[r0,#0]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  8002              STRH     r2,[r0,#0]
000010  e004              B        |L20.28|
                  |L20.18|
;;;589      }
;;;590      else
;;;591      {
;;;592        /* Reset NSS pin internally by software */
;;;593        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000012  8802              LDRH     r2,[r0,#0]
000014  f64f63ff          MOV      r3,#0xfeff
000018  401a              ANDS     r2,r2,r3
00001a  8002              STRH     r2,[r0,#0]
                  |L20.28|
;;;594      }
;;;595    }
00001c  4770              BX       lr
;;;596    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;603      */
;;;604    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L21.12|
;;;605    {
;;;606      /* Check the parameters */
;;;607      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;608      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;609      if (NewState != DISABLE)
;;;610      {
;;;611        /* Enable the selected SPI SS output */
;;;612        SPIx->CR2 |= CR2_SSOE_Set;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420204          ORR      r2,r2,#4
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L21.22|
                  |L21.12|
;;;613      }
;;;614      else
;;;615      {
;;;616        /* Disable the selected SPI SS output */
;;;617        SPIx->CR2 &= CR2_SSOE_Reset;
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73fb          MOV      r3,#0xfffb
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L21.22|
;;;618      }
;;;619    }
000016  4770              BX       lr
;;;620    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;368      */
;;;369    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;370    {
;;;371    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;372      /* Initialize the SPI_Direction member */
;;;373      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;374      /* initialize the SPI_Mode member */
;;;375      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;376      /* initialize the SPI_DataSize member */
;;;377      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;378      /* Initialize the SPI_CPOL member */
;;;379      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;380      /* Initialize the SPI_CPHA member */
;;;381      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;382      /* Initialize the SPI_NSS member */
;;;383      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;384      /* Initialize the SPI_BaudRatePrescaler member */
;;;385      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;386      /* Initialize the SPI_FirstBit member */
;;;387      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;388      /* Initialize the SPI_CRCPolynomial member */
;;;389      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;390    }
000016  4770              BX       lr
;;;391    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;645      */
;;;646    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;647    {
;;;648      /* Check the parameters */
;;;649      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;650      
;;;651      /* Enable the selected SPI CRC transmission */
;;;652      SPIx->CR1 |= CR1_CRCNext_Set;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;653    }
000008  4770              BX       lr
;;;654    
                          ENDP

