; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\gui.o --depend=.\Object\gui.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\gui.crf Src\GUI\GUI.C]
                          THUMB

                          AREA ||i.GUI_ClrArea||, CODE, READONLY, ALIGN=1

                  GUI_ClrArea PROC
;;;104    
;;;105    void GUI_ClrArea(GUI_Area *Area)
000000  b538              PUSH     {r3-r5,lr}
;;;106    {
000002  4604              MOV      r4,r0
;;;107    	LCD_Fill(Area->Left,Area->Top,Area->Width,Area->Height,Area->BackColor);
000004  8923              LDRH     r3,[r4,#8]
000006  9300              STR      r3,[sp,#0]
000008  88e3              LDRH     r3,[r4,#6]
00000a  88a2              LDRH     r2,[r4,#4]
00000c  8861              LDRH     r1,[r4,#2]
00000e  8820              LDRH     r0,[r4,#0]
000010  f7fffffe          BL       LCD_Fill
;;;108    }
000014  bd38              POP      {r3-r5,pc}
;;;109    
                          ENDP


                          AREA ||i.GUI_DispStr||, CODE, READONLY, ALIGN=1

                  GUI_DispStr PROC
;;;109    
;;;110    void GUI_DispStr(GUI_Area *Area,const u8 *str)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;111    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;112    	u16 i=0;
000008  2500              MOVS     r5,#0
;;;113    	u16 left=0;
00000a  2600              MOVS     r6,#0
;;;114    	u16 top=0;
00000c  2700              MOVS     r7,#0
;;;115    	
;;;116    	while(*(str+i)!=0)
00000e  e053              B        |L2.184|
                  |L2.16|
;;;117    	{
;;;118    		if(*(str+i)>'~')
000010  f8180005          LDRB     r0,[r8,r5]
000014  287e              CMP      r0,#0x7e
000016  dd28              BLE      |L2.106|
;;;119    		{
;;;120    			if((left+CN_Width)>Area->Width)
000018  88a1              LDRH     r1,[r4,#4]
00001a  f1060018          ADD      r0,r6,#0x18
00001e  4281              CMP      r1,r0
000020  da0a              BGE      |L2.56|
;;;121    			{
;;;122    				left=0;
000022  2600              MOVS     r6,#0
;;;123    				top+=(CN_Height+1);
000024  f1070019          ADD      r0,r7,#0x19
000028  b287              UXTH     r7,r0
;;;124    				if((top+CN_Height)>Area->Height)
00002a  88e1              LDRH     r1,[r4,#6]
00002c  f1070018          ADD      r0,r7,#0x18
000030  4281              CMP      r1,r0
000032  da01              BGE      |L2.56|
                  |L2.52|
;;;125    				{
;;;126    					return;
;;;127    				}
;;;128    			}
;;;129    			LCD_ShowCN(1+left+Area->Left, 2+top+Area->Top, (u8*)(str+i), Area->ForeColor);
;;;130    			left+=(CN_Width+1);
;;;131    			i+=2;
;;;132    		}
;;;133    		else
;;;134    		{
;;;135    			if((left+Char_Width)>Area->Width)
;;;136    			{
;;;137    				left=0;
;;;138    				top+=(Char_Height+1);
;;;139    				if((top+Char_Height)>Area->Height)
;;;140    				{
;;;141    					return;
;;;142    				}
;;;143    			}
;;;144    			LCD_ShowChar(1+left+Area->Left,2+top+Area->Top,*(str+i),Area->ForeColor);
;;;145    			left+=(Char_Width+1);
;;;146    			i++;
;;;147    		}
;;;148    	}
;;;149    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L2.56|
000038  f1070c02          ADD      r12,r7,#2             ;129
00003c  f8b49002          LDRH     r9,[r4,#2]            ;129
000040  44cc              ADD      r12,r12,r9            ;129
000042  fa1ff18c          UXTH     r1,r12                ;129
000046  f1060c01          ADD      r12,r6,#1             ;129
00004a  f8b49000          LDRH     r9,[r4,#0]            ;129
00004e  44cc              ADD      r12,r12,r9            ;129
000050  fa1ff08c          UXTH     r0,r12                ;129
000054  8963              LDRH     r3,[r4,#0xa]          ;129
000056  eb080205          ADD      r2,r8,r5              ;129
00005a  f7fffffe          BL       LCD_ShowCN
00005e  f1060019          ADD      r0,r6,#0x19           ;130
000062  b286              UXTH     r6,r0                 ;130
000064  1ca8              ADDS     r0,r5,#2              ;131
000066  b285              UXTH     r5,r0                 ;131
000068  e026              B        |L2.184|
                  |L2.106|
00006a  88a1              LDRH     r1,[r4,#4]            ;135
00006c  f106000c          ADD      r0,r6,#0xc            ;135
000070  4281              CMP      r1,r0                 ;135
000072  da09              BGE      |L2.136|
000074  2600              MOVS     r6,#0                 ;137
000076  f1070019          ADD      r0,r7,#0x19           ;138
00007a  b287              UXTH     r7,r0                 ;138
00007c  88e1              LDRH     r1,[r4,#6]            ;139
00007e  f1070018          ADD      r0,r7,#0x18           ;139
000082  4281              CMP      r1,r0                 ;139
000084  da00              BGE      |L2.136|
000086  e7d5              B        |L2.52|
                  |L2.136|
000088  f1070c02          ADD      r12,r7,#2             ;144
00008c  f8b49002          LDRH     r9,[r4,#2]            ;144
000090  44cc              ADD      r12,r12,r9            ;144
000092  fa1ff18c          UXTH     r1,r12                ;144
000096  f1060c01          ADD      r12,r6,#1             ;144
00009a  f8b49000          LDRH     r9,[r4,#0]            ;144
00009e  44cc              ADD      r12,r12,r9            ;144
0000a0  fa1ff08c          UXTH     r0,r12                ;144
0000a4  8963              LDRH     r3,[r4,#0xa]          ;144
0000a6  f8182005          LDRB     r2,[r8,r5]            ;144
0000aa  f7fffffe          BL       LCD_ShowChar
0000ae  f106000d          ADD      r0,r6,#0xd            ;145
0000b2  b286              UXTH     r6,r0                 ;145
0000b4  1c68              ADDS     r0,r5,#1              ;146
0000b6  b285              UXTH     r5,r0                 ;146
                  |L2.184|
0000b8  f8180005          LDRB     r0,[r8,r5]            ;116
0000bc  2800              CMP      r0,#0                 ;116
0000be  d1a7              BNE      |L2.16|
0000c0  bf00              NOP      
0000c2  e7b7              B        |L2.52|
;;;150    
                          ENDP


                          AREA ||i.GUI_HideArea||, CODE, READONLY, ALIGN=2

                  GUI_HideArea PROC
;;;99     
;;;100    void GUI_HideArea(GUI_Area *Area)
000000  b538              PUSH     {r3-r5,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102    	LCD_Fill(Area->Left,Area->Top,Area->Width,Area->Height,Screen.BackColor);
000004  4804              LDR      r0,|L3.24|
000006  8903              LDRH     r3,[r0,#8]  ; Screen
000008  9300              STR      r3,[sp,#0]
00000a  88e3              LDRH     r3,[r4,#6]
00000c  88a2              LDRH     r2,[r4,#4]
00000e  8861              LDRH     r1,[r4,#2]
000010  8820              LDRH     r0,[r4,#0]
000012  f7fffffe          BL       LCD_Fill
;;;103    }
000016  bd38              POP      {r3-r5,pc}
;;;104    
                          ENDP

                  |L3.24|
                          DCD      Screen

                          AREA ||i.GUI_printf||, CODE, READONLY, ALIGN=1

                  GUI_printf PROC
;;;150    
;;;151    void GUI_printf(GUI_Area *Area,char *fmt, ...) 
000000  b40f              PUSH     {r0-r3}
;;;152    {
000002  b510              PUSH     {r4,lr}
000004  b08e              SUB      sp,sp,#0x38
000006  4604              MOV      r4,r0
;;;153    	char buffer[50];  
;;;154    	
;;;155    	va_list arg_ptr; 
;;;156    	va_start(arg_ptr, fmt);   
000008  a812              ADD      r0,sp,#0x48
00000a  9000              STR      r0,[sp,#0]
;;;157    	vsnprintf(buffer, 50, fmt, arg_ptr);
00000c  2132              MOVS     r1,#0x32
00000e  a801              ADD      r0,sp,#4
000010  9b00              LDR      r3,[sp,#0]
000012  9a11              LDR      r2,[sp,#0x44]
000014  f7fffffe          BL       __c89vsnprintf
;;;158    	GUI_DispStr(Area,(u8*)buffer);
000018  a901              ADD      r1,sp,#4
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       GUI_DispStr
;;;159    	va_end(arg_ptr); 
;;;160    }
000020  b00e              ADD      sp,sp,#0x38
000022  bc10              POP      {r4}
000024  f85dfb14          LDR      pc,[sp],#0x14
                          ENDP


                          AREA ||i.touch_area||, CODE, READONLY, ALIGN=2

                  touch_area PROC
;;;87     
;;;88     u8	touch_area(GUI_Area *area)
000000  4601              MOV      r1,r0
;;;89     {
;;;90     	if((touch_left>(area->Left))&&(touch_left<(area->Left+area->Width)))
000002  8808              LDRH     r0,[r1,#0]
000004  4a0d              LDR      r2,|L5.60|
000006  8812              LDRH     r2,[r2,#0]  ; touch_left
000008  4290              CMP      r0,r2
00000a  da14              BGE      |L5.54|
00000c  8808              LDRH     r0,[r1,#0]
00000e  888a              LDRH     r2,[r1,#4]
000010  4410              ADD      r0,r0,r2
000012  4a0a              LDR      r2,|L5.60|
000014  8812              LDRH     r2,[r2,#0]  ; touch_left
000016  4290              CMP      r0,r2
000018  dd0d              BLE      |L5.54|
;;;91     	{
;;;92     		if((touch_top>(area->Top))&&(touch_top<(area->Top+area->Height)))
00001a  8848              LDRH     r0,[r1,#2]
00001c  4a08              LDR      r2,|L5.64|
00001e  8812              LDRH     r2,[r2,#0]  ; touch_top
000020  4290              CMP      r0,r2
000022  da08              BGE      |L5.54|
000024  8848              LDRH     r0,[r1,#2]
000026  88ca              LDRH     r2,[r1,#6]
000028  4410              ADD      r0,r0,r2
00002a  4a05              LDR      r2,|L5.64|
00002c  8812              LDRH     r2,[r2,#0]  ; touch_top
00002e  4290              CMP      r0,r2
000030  dd01              BLE      |L5.54|
;;;93     		{
;;;94     			return 1;
000032  2001              MOVS     r0,#1
                  |L5.52|
;;;95     		}
;;;96     	}
;;;97     	return 0;
;;;98     }
000034  4770              BX       lr
                  |L5.54|
000036  2000              MOVS     r0,#0                 ;97
000038  e7fc              B        |L5.52|
;;;99     
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      touch_left
                  |L5.64|
                          DCD      touch_top

                          AREA ||i.wait_touch||, CODE, READONLY, ALIGN=2

                  wait_touch PROC
;;;72     
;;;73     void wait_touch(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75     	while(1)
000002  e023              B        |L6.76|
                  |L6.4|
;;;76     	{
;;;77     		while(!TSC_IN_TOUCH());
000004  bf00              NOP      
                  |L6.6|
000006  f44f6180          MOV      r1,#0x400
00000a  4812              LDR      r0,|L6.84|
00000c  f7fffffe          BL       GPIO_ReadInputDataBit
000010  2800              CMP      r0,#0
000012  d1f8              BNE      |L6.6|
;;;78             DBPLN("TSC_IN_TOUCH");
000014  a010              ADR      r0,|L6.88|
000016  f7fffffe          BL       USART1_printf_line
;;;79     		if(touch_panel_read(&touch_left,&touch_top)!=0)
00001a  4913              LDR      r1,|L6.104|
00001c  4813              LDR      r0,|L6.108|
00001e  f7fffffe          BL       touch_panel_read
000022  b198              CBZ      r0,|L6.76|
;;;80     		{
;;;81     			DBPLN("left=%d, top=%d",touch_left,touch_top);
000024  4810              LDR      r0,|L6.104|
000026  8802              LDRH     r2,[r0,#0]  ; touch_top
000028  4810              LDR      r0,|L6.108|
00002a  8801              LDRH     r1,[r0,#0]  ; touch_left
00002c  a010              ADR      r0,|L6.112|
00002e  f7fffffe          BL       USART1_printf_line
;;;82     			while(TSC_IN_TOUCH())touch_panel_read(&touch_left,&touch_top);
000032  e003              B        |L6.60|
                  |L6.52|
000034  490c              LDR      r1,|L6.104|
000036  480d              LDR      r0,|L6.108|
000038  f7fffffe          BL       touch_panel_read
                  |L6.60|
00003c  f44f6180          MOV      r1,#0x400
000040  4804              LDR      r0,|L6.84|
000042  f7fffffe          BL       GPIO_ReadInputDataBit
000046  2800              CMP      r0,#0
000048  d0f4              BEQ      |L6.52|
;;;83     			break;
00004a  e000              B        |L6.78|
                  |L6.76|
00004c  e7da              B        |L6.4|
                  |L6.78|
00004e  bf00              NOP      
;;;84     		}
;;;85     	}
;;;86     }
000050  bd10              POP      {r4,pc}
;;;87     
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      0x40011c00
                  |L6.88|
000058  5453435f          DCB      "TSC_IN_TOUCH",0
00005c  494e5f54
000060  4f554348
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L6.104|
                          DCD      touch_top
                  |L6.108|
                          DCD      touch_left
                  |L6.112|
000070  6c656674          DCB      "left=%d, top=%d",0
000074  3d25642c
000078  20746f70
00007c  3d256400

                          AREA ||.data||, DATA, ALIGN=1

                  Screen
000000  00000000          DCW      0x0000,0x0000
000004  014000f0          DCW      0x0140,0x00f0
000008  07e0f800          DCW      0x07e0,0xf800
                  Label
00000c  006a0013          DCW      0x006a,0x0013
000010  0063001c          DCW      0x0063,0x001c
000014  07e0001f          DCW      0x07e0,0x001f
000018  00190038          DCW      0x0019,0x0038
00001c  0113001c          DCW      0x0113,0x001c
000020  07e0001f          DCW      0x07e0,0x001f
000024  002800a8          DCW      0x0028,0x00a8
000028  0063001c          DCW      0x0063,0x001c
00002c  f81f001f          DCW      0xf81f,0x001f
000030  00b300a8          DCW      0x00b3,0x00a8
000034  0063001c          DCW      0x0063,0x001c
000038  f81f001f          DCW      0xf81f,0x001f
00003c  006a0012          DCW      0x006a,0x0012
000040  0063001c          DCW      0x0063,0x001c
000044  07e0001f          DCW      0x07e0,0x001f
000048  0010005c          DCW      0x0010,0x005c
00004c  001c001c          DCW      0x001c,0x001c
000050  ffe0001f          DCW      0xffe0,0x001f
000054  00100037          DCW      0x0010,0x0037
000058  001c001c          DCW      0x001c,0x001c
00005c  ffe0001f          DCW      0xffe0,0x001f
000060  00300037          DCW      0x0030,0x0037
000064  001c001c          DCW      0x001c,0x001c
000068  ffe0001f          DCW      0xffe0,0x001f
00006c  00510037          DCW      0x0051,0x0037
000070  001c001c          DCW      0x001c,0x001c
000074  ffe0001f          DCW      0xffe0,0x001f
000078  00720037          DCW      0x0072,0x0037
00007c  001c001c          DCW      0x001c,0x001c
000080  ffe0001f          DCW      0xffe0,0x001f
000084  00920037          DCW      0x0092,0x0037
000088  001c001c          DCW      0x001c,0x001c
00008c  ffe0001f          DCW      0xffe0,0x001f
000090  00b30037          DCW      0x00b3,0x0037
000094  001c001c          DCW      0x001c,0x001c
000098  ffe0001f          DCW      0xffe0,0x001f
00009c  00d40037          DCW      0x00d4,0x0037
0000a0  001c001c          DCW      0x001c,0x001c
0000a4  ffe0001f          DCW      0xffe0,0x001f
0000a8  00f40037          DCW      0x00f4,0x0037
0000ac  001c001c          DCW      0x001c,0x001c
0000b0  ffe0001f          DCW      0xffe0,0x001f
0000b4  01150037          DCW      0x0115,0x0037
0000b8  001c001c          DCW      0x001c,0x001c
0000bc  ffe0001f          DCW      0xffe0,0x001f
0000c0  0030005c          DCW      0x0030,0x005c
0000c4  001c001c          DCW      0x001c,0x001c
0000c8  ffe0001f          DCW      0xffe0,0x001f
0000cc  0051005c          DCW      0x0051,0x005c
0000d0  001c001c          DCW      0x001c,0x001c
0000d4  ffe0001f          DCW      0xffe0,0x001f
0000d8  0072005c          DCW      0x0072,0x005c
0000dc  001c001c          DCW      0x001c,0x001c
0000e0  ffe0001f          DCW      0xffe0,0x001f
0000e4  0092005c          DCW      0x0092,0x005c
0000e8  001c001c          DCW      0x001c,0x001c
0000ec  ffe0001f          DCW      0xffe0,0x001f
0000f0  00b3005c          DCW      0x00b3,0x005c
0000f4  001c001c          DCW      0x001c,0x001c
0000f8  ffe0001f          DCW      0xffe0,0x001f
0000fc  00d4005c          DCW      0x00d4,0x005c
000100  001c001c          DCW      0x001c,0x001c
000104  ffe0001f          DCW      0xffe0,0x001f
000108  00f4005c          DCW      0x00f4,0x005c
00010c  001c001c          DCW      0x001c,0x001c
000110  ffe0001f          DCW      0xffe0,0x001f
000114  0115005c          DCW      0x0115,0x005c
000118  001c001c          DCW      0x001c,0x001c
00011c  ffe0001f          DCW      0xffe0,0x001f
000120  00180094          DCW      0x0018,0x0094
000124  004a001c          DCW      0x004a,0x001c
000128  f81f001f          DCW      0xf81f,0x001f
00012c  007a0094          DCW      0x007a,0x0094
000130  001c001c          DCW      0x001c,0x001c
000134  ffe0001f          DCW      0xffe0,0x001f
000138  00bf0094          DCW      0x00bf,0x0094
00013c  0064001c          DCW      0x0064,0x001c
000140  07e0001f          DCW      0x07e0,0x001f
000144  001800c2          DCW      0x0018,0x00c2
000148  008c001c          DCW      0x008c,0x001c
00014c  07e0001f          DCW      0x07e0,0x001f
000150  00e800c2          DCW      0x00e8,0x00c2
000154  0034001c          DCW      0x0034,0x001c
000158  f81f001f          DCW      0xf81f,0x001f
00015c  008c0064          DCW      0x008c,0x0064
000160  008c001c          DCW      0x008c,0x001c
000164  07e0001f          DCW      0x07e0,0x001f
000168  00550037          DCW      0x0055,0x0037
00016c  008c001c          DCW      0x008c,0x001c
000170  ffe0001f          DCW      0xffe0,0x001f
000174  0046005f          DCW      0x0046,0x005f
000178  00aa001c          DCW      0x00aa,0x001c
00017c  ffe0001f          DCW      0xffe0,0x001f
                  touch_left
000180  0000              DCB      0x00,0x00
                  touch_top
000182  0000              DCB      0x00,0x00
