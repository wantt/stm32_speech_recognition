; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\touch_panel.o --depend=.\Object\touch_panel.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\touch_panel.crf Src\BSP\touch_panel.c]
                          THUMB

                          AREA ||i.touchPanelInit||, CODE, READONLY, ALIGN=2

                  touchPanelInit PROC
;;;17     
;;;18     void touchPanelInit(){
000000  b500              PUSH     {lr}
000002  b087              SUB      sp,sp,#0x1c
;;;19         GPIO_InitTypeDef GPIO_InitStructure;
;;;20         SPI_InitTypeDef  SPI_InitStructure;
;;;21         
;;;22         RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_GPIOF |RCC_APB2Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  f2410084          MOV      r0,#0x1084
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;23     
;;;24         GPIO_InitStructure.GPIO_Pin =  TSC_INT_PIN;
00000e  f44f6080          MOV      r0,#0x400
000012  f8ad0018          STRH     r0,[sp,#0x18]
;;;25         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000016  2048              MOVS     r0,#0x48
000018  f88d001b          STRB     r0,[sp,#0x1b]
;;;26         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d001a          STRB     r0,[sp,#0x1a]
;;;27         GPIO_Init(TSC_INT_PORT, &GPIO_InitStructure);
000022  a906              ADD      r1,sp,#0x18
000024  4823              LDR      r0,|L1.180|
000026  f7fffffe          BL       GPIO_Init
;;;28     
;;;29         GPIO_InitStructure.GPIO_Pin =  TSC_NSS_PIN;
00002a  2010              MOVS     r0,#0x10
00002c  f8ad0018          STRH     r0,[sp,#0x18]
;;;30         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000030  f88d001b          STRB     r0,[sp,#0x1b]
;;;31         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000034  2003              MOVS     r0,#3
000036  f88d001a          STRB     r0,[sp,#0x1a]
;;;32         GPIO_Init(TSC_NSS_PORT, &GPIO_InitStructure);
00003a  a906              ADD      r1,sp,#0x18
00003c  481e              LDR      r0,|L1.184|
00003e  f7fffffe          BL       GPIO_Init
;;;33         SELECT_TSC(false);
000042  2201              MOVS     r2,#1
000044  2110              MOVS     r1,#0x10
000046  481c              LDR      r0,|L1.184|
000048  f7fffffe          BL       GPIO_WriteBit
;;;34     
;;;35         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 ;
00004c  20e0              MOVS     r0,#0xe0
00004e  f8ad0018          STRH     r0,[sp,#0x18]
;;;36         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000052  2018              MOVS     r0,#0x18
000054  f88d001b          STRB     r0,[sp,#0x1b]
;;;37         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000058  2003              MOVS     r0,#3
00005a  f88d001a          STRB     r0,[sp,#0x1a]
;;;38         GPIO_Init(GPIOA, &GPIO_InitStructure);
00005e  a906              ADD      r1,sp,#0x18
000060  4815              LDR      r0,|L1.184|
000062  f7fffffe          BL       GPIO_Init
;;;39     
;;;40         SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000066  2000              MOVS     r0,#0
000068  f8ad0004          STRH     r0,[sp,#4]
;;;41         SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00006c  f44f7082          MOV      r0,#0x104
000070  f8ad0006          STRH     r0,[sp,#6]
;;;42         SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000074  2000              MOVS     r0,#0
000076  f8ad0008          STRH     r0,[sp,#8]
;;;43         SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
00007a  2002              MOVS     r0,#2
00007c  f8ad000a          STRH     r0,[sp,#0xa]
;;;44         SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000080  2001              MOVS     r0,#1
000082  f8ad000c          STRH     r0,[sp,#0xc]
;;;45         SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000086  0240              LSLS     r0,r0,#9
000088  f8ad000e          STRH     r0,[sp,#0xe]
;;;46         SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
00008c  2018              MOVS     r0,#0x18
00008e  f8ad0010          STRH     r0,[sp,#0x10]
;;;47         SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000092  2000              MOVS     r0,#0
000094  f8ad0012          STRH     r0,[sp,#0x12]
;;;48         SPI_InitStructure.SPI_CRCPolynomial = 7;
000098  2007              MOVS     r0,#7
00009a  f8ad0014          STRH     r0,[sp,#0x14]
;;;49         SPI_Init(TSC_SPI, &SPI_InitStructure);
00009e  a901              ADD      r1,sp,#4
0000a0  4806              LDR      r0,|L1.188|
0000a2  f7fffffe          BL       SPI_Init
;;;50     
;;;51         SPI_Cmd(TSC_SPI, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  4804              LDR      r0,|L1.188|
0000aa  f7fffffe          BL       SPI_Cmd
;;;52     }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bd00              POP      {pc}
;;;53     
                          ENDP

0000b2  0000              DCW      0x0000
                  |L1.180|
                          DCD      0x40011c00
                  |L1.184|
                          DCD      0x40010800
                  |L1.188|
                          DCD      0x40013000

                          AREA ||i.touch_panel_read||, CODE, READONLY, ALIGN=2

                  touch_panel_read PROC
;;;55     
;;;56     u8  touch_panel_read(u16 *X, u16 *Y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
;;;57         u16 X_buffer[10], Y_buffer[10];
;;;58         u32 X_temp, Y_temp;
;;;59         u16 i = 0;
00000a  2400              MOVS     r4,#0
;;;60     
;;;61         while(i < 10 && TSC_IN_TOUCH()) {
00000c  e041              B        |L2.146|
                  |L2.14|
;;;62             SELECT_TSC(true);
00000e  2200              MOVS     r2,#0
000010  2110              MOVS     r1,#0x10
000012  486a              LDR      r0,|L2.444|
000014  f7fffffe          BL       GPIO_WriteBit
;;;63             
;;;64             TSC_EXCHANGE_DATA(CMD_RDY);
000018  21d0              MOVS     r1,#0xd0
00001a  4869              LDR      r0,|L2.448|
00001c  f7fffffe          BL       SPI_Exchange_Data
;;;65             delay_us(6);
000020  2006              MOVS     r0,#6
000022  f7fffffe          BL       delay_us
;;;66             
;;;67             X_temp = TSC_EXCHANGE_DATA(0);
000026  2100              MOVS     r1,#0
000028  4865              LDR      r0,|L2.448|
00002a  f7fffffe          BL       SPI_Exchange_Data
00002e  4605              MOV      r5,r0
;;;68             X_temp = X_temp << 8;
000030  022d              LSLS     r5,r5,#8
;;;69             X_temp |= TSC_EXCHANGE_DATA(0);
000032  2100              MOVS     r1,#0
000034  4862              LDR      r0,|L2.448|
000036  f7fffffe          BL       SPI_Exchange_Data
00003a  4305              ORRS     r5,r5,r0
;;;70             X_temp >>= 3;
00003c  08ed              LSRS     r5,r5,#3
;;;71     
;;;72             TSC_EXCHANGE_DATA(CMD_RDX);
00003e  2190              MOVS     r1,#0x90
000040  485f              LDR      r0,|L2.448|
000042  f7fffffe          BL       SPI_Exchange_Data
;;;73             delay_us(6);
000046  2006              MOVS     r0,#6
000048  f7fffffe          BL       delay_us
;;;74     
;;;75             Y_temp = TSC_EXCHANGE_DATA(0);
00004c  2100              MOVS     r1,#0
00004e  485c              LDR      r0,|L2.448|
000050  f7fffffe          BL       SPI_Exchange_Data
000054  4606              MOV      r6,r0
;;;76             Y_temp = Y_temp << 8;
000056  0236              LSLS     r6,r6,#8
;;;77             Y_temp |= TSC_EXCHANGE_DATA(0);
000058  2100              MOVS     r1,#0
00005a  4859              LDR      r0,|L2.448|
00005c  f7fffffe          BL       SPI_Exchange_Data
000060  4306              ORRS     r6,r6,r0
;;;78             Y_temp >>= 3;
000062  08f6              LSRS     r6,r6,#3
;;;79     
;;;80             SELECT_TSC(false);
000064  2201              MOVS     r2,#1
000066  2110              MOVS     r1,#0x10
000068  4854              LDR      r0,|L2.444|
00006a  f7fffffe          BL       GPIO_WriteBit
;;;81     
;;;82             if(X_temp > 100 && X_temp < 4000 && Y_temp > 100 && Y_temp < 4000) {
00006e  2d64              CMP      r5,#0x64
000070  d90f              BLS      |L2.146|
000072  f5b56f7a          CMP      r5,#0xfa0
000076  d20c              BCS      |L2.146|
000078  2e64              CMP      r6,#0x64
00007a  d90a              BLS      |L2.146|
00007c  f5b66f7a          CMP      r6,#0xfa0
000080  d207              BCS      |L2.146|
;;;83                 X_buffer[i] = X_temp;
000082  a905              ADD      r1,sp,#0x14
000084  f8215014          STRH     r5,[r1,r4,LSL #1]
;;;84                 Y_buffer[i] = Y_temp;
000088  b2b0              UXTH     r0,r6
00008a  f82d0014          STRH     r0,[sp,r4,LSL #1]
;;;85     
;;;86                 i++;
00008e  1c60              ADDS     r0,r4,#1
000090  b284              UXTH     r4,r0
                  |L2.146|
000092  2c0a              CMP      r4,#0xa               ;61
000094  da06              BGE      |L2.164|
000096  f44f6180          MOV      r1,#0x400             ;61
00009a  484a              LDR      r0,|L2.452|
00009c  f7fffffe          BL       GPIO_ReadInputDataBit
0000a0  2800              CMP      r0,#0                 ;61
0000a2  d0b4              BEQ      |L2.14|
                  |L2.164|
;;;87     
;;;88             }
;;;89         }
;;;90     
;;;91         if(i == 10) {
0000a4  2c0a              CMP      r4,#0xa
0000a6  d17e              BNE      |L2.422|
;;;92             for(i = 0; i < 9; i++) {
0000a8  2400              MOVS     r4,#0
0000aa  e027              B        |L2.252|
                  |L2.172|
;;;93                 if(X_buffer[i] > X_buffer[i + 1]) {
0000ac  a805              ADD      r0,sp,#0x14
0000ae  f8301014          LDRH     r1,[r0,r4,LSL #1]
0000b2  aa05              ADD      r2,sp,#0x14
0000b4  1c60              ADDS     r0,r4,#1
0000b6  f8320010          LDRH     r0,[r2,r0,LSL #1]
0000ba  4281              CMP      r1,r0
0000bc  dd0b              BLE      |L2.214|
;;;94                     X_temp = X_buffer[i];
0000be  a805              ADD      r0,sp,#0x14
0000c0  f8305014          LDRH     r5,[r0,r4,LSL #1]
;;;95                     X_buffer[i] = X_buffer[i + 1];
0000c4  a905              ADD      r1,sp,#0x14
0000c6  1c60              ADDS     r0,r4,#1
0000c8  f8310010          LDRH     r0,[r1,r0,LSL #1]
0000cc  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;96                     X_buffer[i + 1] = X_temp;
0000d0  1c60              ADDS     r0,r4,#1
0000d2  f8215010          STRH     r5,[r1,r0,LSL #1]
                  |L2.214|
;;;97                 }
;;;98     
;;;99                 if(Y_buffer[i] > Y_buffer[i + 1]) {
0000d6  f83d1014          LDRH     r1,[sp,r4,LSL #1]
0000da  1c60              ADDS     r0,r4,#1
0000dc  f83d0010          LDRH     r0,[sp,r0,LSL #1]
0000e0  4281              CMP      r1,r0
0000e2  dd09              BLE      |L2.248|
;;;100                    Y_temp = Y_buffer[i];
0000e4  f83d6014          LDRH     r6,[sp,r4,LSL #1]
;;;101                    Y_buffer[i] = Y_buffer[i + 1];
0000e8  1c60              ADDS     r0,r4,#1
0000ea  f83d0010          LDRH     r0,[sp,r0,LSL #1]
0000ee  f82d0014          STRH     r0,[sp,r4,LSL #1]
;;;102                    Y_buffer[i + 1] = Y_temp;
0000f2  1c60              ADDS     r0,r4,#1
0000f4  f82d6010          STRH     r6,[sp,r0,LSL #1]
                  |L2.248|
0000f8  1c60              ADDS     r0,r4,#1              ;92
0000fa  b284              UXTH     r4,r0                 ;92
                  |L2.252|
0000fc  2c09              CMP      r4,#9                 ;92
0000fe  dbd5              BLT      |L2.172|
;;;103                }
;;;104            }
;;;105    
;;;106            for(i = 8; i > 0; i--) {
000100  2408              MOVS     r4,#8
000102  e027              B        |L2.340|
                  |L2.260|
;;;107                if(X_buffer[i] < X_buffer[i - 1]) {
000104  a805              ADD      r0,sp,#0x14
000106  f8301014          LDRH     r1,[r0,r4,LSL #1]
00010a  1e60              SUBS     r0,r4,#1
00010c  aa05              ADD      r2,sp,#0x14
00010e  f8320010          LDRH     r0,[r2,r0,LSL #1]
000112  4281              CMP      r1,r0
000114  da0b              BGE      |L2.302|
;;;108                    X_temp = X_buffer[i];
000116  a805              ADD      r0,sp,#0x14
000118  f8305014          LDRH     r5,[r0,r4,LSL #1]
;;;109                    X_buffer[i] = X_buffer[i - 1];
00011c  1e60              SUBS     r0,r4,#1
00011e  a905              ADD      r1,sp,#0x14
000120  f8310010          LDRH     r0,[r1,r0,LSL #1]
000124  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;110                    X_buffer[i - 1] = X_temp;
000128  1e60              SUBS     r0,r4,#1
00012a  f8215010          STRH     r5,[r1,r0,LSL #1]
                  |L2.302|
;;;111                }
;;;112    
;;;113                if(Y_buffer[i] < Y_buffer[i - 1]) {
00012e  f83d1014          LDRH     r1,[sp,r4,LSL #1]
000132  1e60              SUBS     r0,r4,#1
000134  f83d0010          LDRH     r0,[sp,r0,LSL #1]
000138  4281              CMP      r1,r0
00013a  da09              BGE      |L2.336|
;;;114                    Y_temp = Y_buffer[i];
00013c  f83d6014          LDRH     r6,[sp,r4,LSL #1]
;;;115                    Y_buffer[i] = Y_buffer[i - 1];
000140  1e60              SUBS     r0,r4,#1
000142  f83d0010          LDRH     r0,[sp,r0,LSL #1]
000146  f82d0014          STRH     r0,[sp,r4,LSL #1]
;;;116                    Y_buffer[i - 1] = Y_temp;
00014a  1e60              SUBS     r0,r4,#1
00014c  f82d6010          STRH     r6,[sp,r0,LSL #1]
                  |L2.336|
000150  1e60              SUBS     r0,r4,#1              ;106
000152  b284              UXTH     r4,r0                 ;106
                  |L2.340|
000154  2c00              CMP      r4,#0                 ;106
000156  dcd5              BGT      |L2.260|
;;;117                }
;;;118            }
;;;119    
;;;120            X_temp = 0;
000158  2500              MOVS     r5,#0
;;;121            Y_temp = 0;
00015a  2600              MOVS     r6,#0
;;;122    
;;;123            for(i = 1; i < 9; i++) {
00015c  2401              MOVS     r4,#1
00015e  e008              B        |L2.370|
                  |L2.352|
;;;124                X_temp += X_buffer[i];
000160  a805              ADD      r0,sp,#0x14
000162  f8300014          LDRH     r0,[r0,r4,LSL #1]
000166  4405              ADD      r5,r5,r0
;;;125                Y_temp += Y_buffer[i];
000168  f83d0014          LDRH     r0,[sp,r4,LSL #1]
00016c  4406              ADD      r6,r6,r0
00016e  1c60              ADDS     r0,r4,#1              ;123
000170  b284              UXTH     r4,r0                 ;123
                  |L2.370|
000172  2c09              CMP      r4,#9                 ;123
000174  dbf4              BLT      |L2.352|
;;;126            }
;;;127    
;;;128            X_temp /= 8;
000176  08ed              LSRS     r5,r5,#3
;;;129            Y_temp /= 8;
000178  08f6              LSRS     r6,r6,#3
;;;130            
;;;131            //DBPLN("x=%d, y=%d", X_temp, Y_temp);
;;;132            
;;;133            
;;;134            *X = 351-Y_temp*32/353;
00017a  0170              LSLS     r0,r6,#5
00017c  f2401161          MOV      r1,#0x161
000180  fbb0f0f1          UDIV     r0,r0,r1
000184  1e89              SUBS     r1,r1,#2
000186  1a08              SUBS     r0,r1,r0
000188  8038              STRH     r0,[r7,#0]
;;;135            *Y = 257 - X_temp*24/355;
00018a  eb050045          ADD      r0,r5,r5,LSL #1
00018e  00c0              LSLS     r0,r0,#3
000190  1d09              ADDS     r1,r1,#4
000192  fbb0f0f1          UDIV     r0,r0,r1
000196  f2401101          MOV      r1,#0x101
00019a  1a08              SUBS     r0,r1,r0
00019c  f8a80000          STRH     r0,[r8,#0]
;;;136    
;;;137            DBPLN("left=%d, top=%d",*X, *Y);
0001a0  f8b82000          LDRH     r2,[r8,#0]
0001a4  e000              B        |L2.424|
                  |L2.422|
0001a6  e007              B        |L2.440|
                  |L2.424|
0001a8  8839              LDRH     r1,[r7,#0]
0001aa  a007              ADR      r0,|L2.456|
0001ac  f7fffffe          BL       USART1_printf_line
;;;138    
;;;139            return 1;
0001b0  2001              MOVS     r0,#1
                  |L2.434|
;;;140        } else
;;;141            return 0;
;;;142    
;;;143    }
0001b2  b00a              ADD      sp,sp,#0x28
0001b4  e8bd81f0          POP      {r4-r8,pc}
                  |L2.440|
0001b8  2000              MOVS     r0,#0                 ;141
0001ba  e7fa              B        |L2.434|
;;;144    
                          ENDP

                  |L2.444|
                          DCD      0x40010800
                  |L2.448|
                          DCD      0x40013000
                  |L2.452|
                          DCD      0x40011c00
                  |L2.456|
0001c8  6c656674          DCB      "left=%d, top=%d",0
0001cc  3d25642c
0001d0  20746f70
0001d4  3d256400
