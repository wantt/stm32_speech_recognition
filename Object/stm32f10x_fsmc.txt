; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\stm32f10x_fsmc.o --depend=.\Object\stm32f10x_fsmc.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\stm32f10x_fsmc.crf Src\StdPeriph_Driver\src\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||i.FSMC_ClearFlag||, CODE, READONLY, ALIGN=2

                  FSMC_ClearFlag PROC
;;;738      */
;;;739    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  2810              CMP      r0,#0x10
;;;740    {
;;;741     /* Check the parameters */
;;;742      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;743      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;744        
;;;745      if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d107              BNE      |L1.20|
;;;746      {
;;;747        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  438a              BICS     r2,r2,r1
00000c  f04f4320          MOV      r3,#0xa0000000
000010  665a              STR      r2,[r3,#0x64]
000012  e013              B        |L1.60|
                  |L1.20|
;;;748      }  
;;;749      else if(FSMC_Bank == FSMC_Bank3_NAND)
000014  f5b07f80          CMP      r0,#0x100
000018  d108              BNE      |L1.44|
;;;750      {
;;;751        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
00001a  4a09              LDR      r2,|L1.64|
00001c  6812              LDR      r2,[r2,#0]
00001e  ea220201          BIC      r2,r2,r1
000022  f04f4320          MOV      r3,#0xa0000000
000026  f8c32084          STR      r2,[r3,#0x84]
00002a  e007              B        |L1.60|
                  |L1.44|
;;;752      }
;;;753      /* FSMC_Bank4_PCCARD*/
;;;754      else
;;;755      {
;;;756        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
00002c  4a05              LDR      r2,|L1.68|
00002e  6812              LDR      r2,[r2,#0]
000030  ea220201          BIC      r2,r2,r1
000034  f04f4320          MOV      r3,#0xa0000000
000038  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.60|
;;;757      }
;;;758    }
00003c  4770              BX       lr
;;;759    
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      0xa0000084
                  |L1.68|
                          DCD      0xa00000a4

                          AREA ||i.FSMC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  FSMC_ClearITPendingBit PROC
;;;824      */
;;;825    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  2810              CMP      r0,#0x10
;;;826    {
;;;827      /* Check the parameters */
;;;828      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;829      assert_param(IS_FSMC_IT(FSMC_IT));
;;;830        
;;;831      if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d108              BNE      |L2.22|
;;;832      {
;;;833        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  ea2202d1          BIC      r2,r2,r1,LSR #3
00000e  f04f4320          MOV      r3,#0xa0000000
000012  665a              STR      r2,[r3,#0x64]
000014  e013              B        |L2.62|
                  |L2.22|
;;;834      }  
;;;835      else if(FSMC_Bank == FSMC_Bank3_NAND)
000016  f5b07f80          CMP      r0,#0x100
00001a  d108              BNE      |L2.46|
;;;836      {
;;;837        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
00001c  4a08              LDR      r2,|L2.64|
00001e  6812              LDR      r2,[r2,#0]
000020  ea2202d1          BIC      r2,r2,r1,LSR #3
000024  f04f4320          MOV      r3,#0xa0000000
000028  f8c32084          STR      r2,[r3,#0x84]
00002c  e007              B        |L2.62|
                  |L2.46|
;;;838      }
;;;839      /* FSMC_Bank4_PCCARD*/
;;;840      else
;;;841      {
;;;842        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
00002e  4a05              LDR      r2,|L2.68|
000030  6812              LDR      r2,[r2,#0]
000032  ea2202d1          BIC      r2,r2,r1,LSR #3
000036  f04f4320          MOV      r3,#0xa0000000
00003a  f8c320a4          STR      r2,[r3,#0xa4]
                  |L2.62|
;;;843      }
;;;844    }
00003e  4770              BX       lr
;;;845    
                          ENDP

                  |L2.64|
                          DCD      0xa0000084
                  |L2.68|
                          DCD      0xa00000a4

                          AREA ||i.FSMC_GetECC||, CODE, READONLY, ALIGN=2

                  FSMC_GetECC PROC
;;;594      */
;;;595    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
000000  4601              MOV      r1,r0
;;;596    {
;;;597      uint32_t eccval = 0x00000000;
000002  2000              MOVS     r0,#0
;;;598      
;;;599      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2910              CMP      r1,#0x10
000006  d103              BNE      |L3.16|
;;;600      {
;;;601        /* Get the ECCR2 register value */
;;;602        eccval = FSMC_Bank2->ECCR2;
000008  f04f4220          MOV      r2,#0xa0000000
00000c  6f50              LDR      r0,[r2,#0x74]
00000e  e001              B        |L3.20|
                  |L3.16|
;;;603      }
;;;604      else
;;;605      {
;;;606        /* Get the ECCR3 register value */
;;;607        eccval = FSMC_Bank3->ECCR3;
000010  4a01              LDR      r2,|L3.24|
000012  6810              LDR      r0,[r2,#0]
                  |L3.20|
;;;608      }
;;;609      /* Return the error correction code value */
;;;610      return(eccval);
;;;611    }
000014  4770              BX       lr
;;;612    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0xa0000094

                          AREA ||i.FSMC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetFlagStatus PROC
;;;688      */
;;;689    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;690    {
000002  4602              MOV      r2,r0
;;;691      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;692      uint32_t tmpsr = 0x00000000;
000006  2300              MOVS     r3,#0
;;;693      
;;;694      /* Check the parameters */
;;;695      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;696      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;697      
;;;698      if(FSMC_Bank == FSMC_Bank2_NAND)
000008  2a10              CMP      r2,#0x10
00000a  d103              BNE      |L4.20|
;;;699      {
;;;700        tmpsr = FSMC_Bank2->SR2;
00000c  f04f4420          MOV      r4,#0xa0000000
000010  6e63              LDR      r3,[r4,#0x64]
000012  e007              B        |L4.36|
                  |L4.20|
;;;701      }  
;;;702      else if(FSMC_Bank == FSMC_Bank3_NAND)
000014  f5b27f80          CMP      r2,#0x100
000018  d102              BNE      |L4.32|
;;;703      {
;;;704        tmpsr = FSMC_Bank3->SR3;
00001a  4c05              LDR      r4,|L4.48|
00001c  6823              LDR      r3,[r4,#0]
00001e  e001              B        |L4.36|
                  |L4.32|
;;;705      }
;;;706      /* FSMC_Bank4_PCCARD*/
;;;707      else
;;;708      {
;;;709        tmpsr = FSMC_Bank4->SR4;
000020  4c04              LDR      r4,|L4.52|
000022  6823              LDR      r3,[r4,#0]
                  |L4.36|
;;;710      } 
;;;711      
;;;712      /* Get the flag status */
;;;713      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
000024  420b              TST      r3,r1
000026  d001              BEQ      |L4.44|
;;;714      {
;;;715        bitstatus = SET;
000028  2001              MOVS     r0,#1
00002a  e000              B        |L4.46|
                  |L4.44|
;;;716      }
;;;717      else
;;;718      {
;;;719        bitstatus = RESET;
00002c  2000              MOVS     r0,#0
                  |L4.46|
;;;720      }
;;;721      /* Return the flag status */
;;;722      return bitstatus;
;;;723    }
00002e  bd10              POP      {r4,pc}
;;;724    
                          ENDP

                  |L4.48|
                          DCD      0xa0000084
                  |L4.52|
                          DCD      0xa00000a4

                          AREA ||i.FSMC_GetITStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetITStatus PROC
;;;773      */
;;;774    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;775    {
000002  4602              MOV      r2,r0
;;;776      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;777      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
000006  2300              MOVS     r3,#0
000008  2400              MOVS     r4,#0
00000a  2500              MOVS     r5,#0
;;;778      
;;;779      /* Check the parameters */
;;;780      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;781      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;782      
;;;783      if(FSMC_Bank == FSMC_Bank2_NAND)
00000c  2a10              CMP      r2,#0x10
00000e  d103              BNE      |L5.24|
;;;784      {
;;;785        tmpsr = FSMC_Bank2->SR2;
000010  f04f4620          MOV      r6,#0xa0000000
000014  6e73              LDR      r3,[r6,#0x64]
000016  e007              B        |L5.40|
                  |L5.24|
;;;786      }  
;;;787      else if(FSMC_Bank == FSMC_Bank3_NAND)
000018  f5b27f80          CMP      r2,#0x100
00001c  d102              BNE      |L5.36|
;;;788      {
;;;789        tmpsr = FSMC_Bank3->SR3;
00001e  4e07              LDR      r6,|L5.60|
000020  6833              LDR      r3,[r6,#0]
000022  e001              B        |L5.40|
                  |L5.36|
;;;790      }
;;;791      /* FSMC_Bank4_PCCARD*/
;;;792      else
;;;793      {
;;;794        tmpsr = FSMC_Bank4->SR4;
000024  4e06              LDR      r6,|L5.64|
000026  6833              LDR      r3,[r6,#0]
                  |L5.40|
;;;795      } 
;;;796      
;;;797      itstatus = tmpsr & FSMC_IT;
000028  ea030401          AND      r4,r3,r1
;;;798      
;;;799      itenable = tmpsr & (FSMC_IT >> 3);
00002c  ea0305d1          AND      r5,r3,r1,LSR #3
;;;800      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
000030  b114              CBZ      r4,|L5.56|
000032  b10d              CBZ      r5,|L5.56|
;;;801      {
;;;802        bitstatus = SET;
000034  2001              MOVS     r0,#1
000036  e000              B        |L5.58|
                  |L5.56|
;;;803      }
;;;804      else
;;;805      {
;;;806        bitstatus = RESET;
000038  2000              MOVS     r0,#0
                  |L5.58|
;;;807      }
;;;808      return bitstatus; 
;;;809    }
00003a  bd70              POP      {r4-r6,pc}
;;;810    
                          ENDP

                  |L5.60|
                          DCD      0xa0000084
                  |L5.64|
                          DCD      0xa00000a4

                          AREA ||i.FSMC_ITConfig||, CODE, READONLY, ALIGN=2

                  FSMC_ITConfig PROC
;;;628      */
;;;629    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;630    {
;;;631      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;632      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;633      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;634      
;;;635      if (NewState != DISABLE)
000002  b1f2              CBZ      r2,|L6.66|
;;;636      {
;;;637        /* Enable the selected FSMC_Bank2 interrupts */
;;;638        if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d107              BNE      |L6.24|
;;;639        {
;;;640          FSMC_Bank2->SR2 |= FSMC_IT;
000008  f04f4320          MOV      r3,#0xa0000000
00000c  6e5b              LDR      r3,[r3,#0x64]
00000e  430b              ORRS     r3,r3,r1
000010  f04f4420          MOV      r4,#0xa0000000
000014  6663              STR      r3,[r4,#0x64]
000016  e032              B        |L6.126|
                  |L6.24|
;;;641        }
;;;642        /* Enable the selected FSMC_Bank3 interrupts */
;;;643        else if (FSMC_Bank == FSMC_Bank3_NAND)
000018  f5b07f80          CMP      r0,#0x100
00001c  d108              BNE      |L6.48|
;;;644        {
;;;645          FSMC_Bank3->SR3 |= FSMC_IT;
00001e  4b18              LDR      r3,|L6.128|
000020  681b              LDR      r3,[r3,#0]
000022  ea430301          ORR      r3,r3,r1
000026  f04f4420          MOV      r4,#0xa0000000
00002a  f8c43084          STR      r3,[r4,#0x84]
00002e  e026              B        |L6.126|
                  |L6.48|
;;;646        }
;;;647        /* Enable the selected FSMC_Bank4 interrupts */
;;;648        else
;;;649        {
;;;650          FSMC_Bank4->SR4 |= FSMC_IT;    
000030  4b14              LDR      r3,|L6.132|
000032  681b              LDR      r3,[r3,#0]
000034  ea430301          ORR      r3,r3,r1
000038  f04f4420          MOV      r4,#0xa0000000
00003c  f8c430a4          STR      r3,[r4,#0xa4]
000040  e01d              B        |L6.126|
                  |L6.66|
;;;651        }
;;;652      }
;;;653      else
;;;654      {
;;;655        /* Disable the selected FSMC_Bank2 interrupts */
;;;656        if(FSMC_Bank == FSMC_Bank2_NAND)
000042  2810              CMP      r0,#0x10
000044  d107              BNE      |L6.86|
;;;657        {
;;;658          
;;;659          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
000046  f04f4320          MOV      r3,#0xa0000000
00004a  6e5b              LDR      r3,[r3,#0x64]
00004c  438b              BICS     r3,r3,r1
00004e  f04f4420          MOV      r4,#0xa0000000
000052  6663              STR      r3,[r4,#0x64]
000054  e013              B        |L6.126|
                  |L6.86|
;;;660        }
;;;661        /* Disable the selected FSMC_Bank3 interrupts */
;;;662        else if (FSMC_Bank == FSMC_Bank3_NAND)
000056  f5b07f80          CMP      r0,#0x100
00005a  d108              BNE      |L6.110|
;;;663        {
;;;664          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
00005c  4b08              LDR      r3,|L6.128|
00005e  681b              LDR      r3,[r3,#0]
000060  ea230301          BIC      r3,r3,r1
000064  f04f4420          MOV      r4,#0xa0000000
000068  f8c43084          STR      r3,[r4,#0x84]
00006c  e007              B        |L6.126|
                  |L6.110|
;;;665        }
;;;666        /* Disable the selected FSMC_Bank4 interrupts */
;;;667        else
;;;668        {
;;;669          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
00006e  4b05              LDR      r3,|L6.132|
000070  681b              LDR      r3,[r3,#0]
000072  ea230301          BIC      r3,r3,r1
000076  f04f4420          MOV      r4,#0xa0000000
00007a  f8c430a4          STR      r3,[r4,#0xa4]
                  |L6.126|
;;;670        }
;;;671      }
;;;672    }
00007e  bd10              POP      {r4,pc}
;;;673    
                          ENDP

                  |L6.128|
                          DCD      0xa0000084
                  |L6.132|
                          DCD      0xa00000a4

                          AREA ||i.FSMC_NANDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDCmd PROC
;;;492      */
;;;493    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L7.42|
;;;494    {
;;;495      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;496      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;497      
;;;498      if (NewState != DISABLE)
;;;499      {
;;;500        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;501        if(FSMC_Bank == FSMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L7.24|
;;;502        {
;;;503          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420204          ORR      r2,r2,#4
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01c              B        |L7.82|
                  |L7.24|
;;;504        }
;;;505        else
;;;506        {
;;;507          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
000018  4a0e              LDR      r2,|L7.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420204          ORR      r2,r2,#4
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e013              B        |L7.82|
                  |L7.42|
;;;508        }
;;;509      }
;;;510      else
;;;511      {
;;;512        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;513        if(FSMC_Bank == FSMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L7.64|
;;;514        {
;;;515          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L7.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e008              B        |L7.82|
                  |L7.64|
;;;516        }
;;;517        else
;;;518        {
;;;519          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
000040  4a04              LDR      r2,|L7.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L7.88|
000046  ea020203          AND      r2,r2,r3
00004a  f04f4320          MOV      r3,#0xa0000000
00004e  f8c32080          STR      r2,[r3,#0x80]
                  |L7.82|
;;;520        }
;;;521      }
;;;522    }
000052  4770              BX       lr
;;;523    
                          ENDP

                  |L7.84|
                          DCD      0xa0000080
                  |L7.88|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_NANDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDDeInit PROC
;;;127      */
;;;128    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000000  2810              CMP      r0,#0x10
;;;129    {
;;;130      /* Check the parameter */
;;;131      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;132      
;;;133      if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d10a              BNE      |L8.26|
;;;134      {
;;;135        /* Set the FSMC_Bank2 registers to their reset values */
;;;136        FSMC_Bank2->PCR2 = 0x00000018;
000004  2118              MOVS     r1,#0x18
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6611              STR      r1,[r2,#0x60]
;;;137        FSMC_Bank2->SR2 = 0x00000040;
00000c  2140              MOVS     r1,#0x40
00000e  6651              STR      r1,[r2,#0x64]
;;;138        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
000010  f04f31fc          MOV      r1,#0xfcfcfcfc
000014  6691              STR      r1,[r2,#0x68]
;;;139        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
000016  66d1              STR      r1,[r2,#0x6c]
000018  e010              B        |L8.60|
                  |L8.26|
;;;140      }
;;;141      /* FSMC_Bank3_NAND */  
;;;142      else
;;;143      {
;;;144        /* Set the FSMC_Bank3 registers to their reset values */
;;;145        FSMC_Bank3->PCR3 = 0x00000018;
00001a  2118              MOVS     r1,#0x18
00001c  4a08              LDR      r2,|L8.64|
00001e  6011              STR      r1,[r2,#0]
;;;146        FSMC_Bank3->SR3 = 0x00000040;
000020  f04f0140          MOV      r1,#0x40
000024  f04f4220          MOV      r2,#0xa0000000
000028  f8c21084          STR      r1,[r2,#0x84]
;;;147        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
00002c  f04f31fc          MOV      r1,#0xfcfcfcfc
000030  4a04              LDR      r2,|L8.68|
000032  6011              STR      r1,[r2,#0]
;;;148        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
000034  f04f4220          MOV      r2,#0xa0000000
000038  f8c2108c          STR      r1,[r2,#0x8c]
                  |L8.60|
;;;149      }  
;;;150    }
00003c  4770              BX       lr
;;;151    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0xa0000080
                  |L8.68|
                          DCD      0xa0000088

                          AREA ||i.FSMC_NANDECCCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDECCCmd PROC
;;;555      */
;;;556    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L9.42|
;;;557    {
;;;558      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;559      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;560      
;;;561      if (NewState != DISABLE)
;;;562      {
;;;563        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;564        if(FSMC_Bank == FSMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L9.24|
;;;565        {
;;;566          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420240          ORR      r2,r2,#0x40
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01c              B        |L9.82|
                  |L9.24|
;;;567        }
;;;568        else
;;;569        {
;;;570          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
000018  4a0e              LDR      r2,|L9.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420240          ORR      r2,r2,#0x40
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e013              B        |L9.82|
                  |L9.42|
;;;571        }
;;;572      }
;;;573      else
;;;574      {
;;;575        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;576        if(FSMC_Bank == FSMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L9.64|
;;;577        {
;;;578          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L9.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e008              B        |L9.82|
                  |L9.64|
;;;579        }
;;;580        else
;;;581        {
;;;582          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
000040  4a04              LDR      r2,|L9.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L9.88|
000046  ea020203          AND      r2,r2,r3
00004a  f04f4320          MOV      r3,#0xa0000000
00004e  f8c32080          STR      r2,[r3,#0x80]
                  |L9.82|
;;;583        }
;;;584      }
;;;585    }
000052  4770              BX       lr
;;;586    
                          ENDP

                  |L9.84|
                          DCD      0xa0000080
                  |L9.88|
                          DCD      0x000fffbf

                          AREA ||i.FSMC_NANDInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDInit PROC
;;;255      */
;;;256    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;257    {
;;;258      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;259        
;;;260      /* Check the parameters */
;;;261      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;262      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;263      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;264      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;265      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;266      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;267      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;268      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;269      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;270      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;271      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;272      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;273      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;274      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;275      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;276      
;;;277      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;278      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000008  6844              LDR      r4,[r0,#4]
00000a  f0440408          ORR      r4,r4,#8
00000e  6885              LDR      r5,[r0,#8]
000010  432c              ORRS     r4,r4,r5
000012  68c5              LDR      r5,[r0,#0xc]
000014  432c              ORRS     r4,r4,r5
000016  6905              LDR      r5,[r0,#0x10]
000018  432c              ORRS     r4,r4,r5
00001a  6945              LDR      r5,[r0,#0x14]
00001c  ea442445          ORR      r4,r4,r5,LSL #9
000020  6985              LDR      r5,[r0,#0x18]
000022  ea443145          ORR      r1,r4,r5,LSL #13
;;;279                PCR_MemoryType_NAND |
;;;280                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;281                FSMC_NANDInitStruct->FSMC_ECC |
;;;282                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;283                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;284                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;285                
;;;286      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;287      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000026  69c4              LDR      r4,[r0,#0x1c]
000028  6824              LDR      r4,[r4,#0]
00002a  69c5              LDR      r5,[r0,#0x1c]
00002c  686d              LDR      r5,[r5,#4]
00002e  ea442405          ORR      r4,r4,r5,LSL #8
000032  69c5              LDR      r5,[r0,#0x1c]
000034  68ad              LDR      r5,[r5,#8]
000036  ea444405          ORR      r4,r4,r5,LSL #16
00003a  69c5              LDR      r5,[r0,#0x1c]
00003c  68ed              LDR      r5,[r5,#0xc]
00003e  ea446205          ORR      r2,r4,r5,LSL #24
;;;288                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;289                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;290                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;291                
;;;292      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;293      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000042  6a04              LDR      r4,[r0,#0x20]
000044  6824              LDR      r4,[r4,#0]
000046  6a05              LDR      r5,[r0,#0x20]
000048  686d              LDR      r5,[r5,#4]
00004a  ea442405          ORR      r4,r4,r5,LSL #8
00004e  6a05              LDR      r5,[r0,#0x20]
000050  68ad              LDR      r5,[r5,#8]
000052  ea444405          ORR      r4,r4,r5,LSL #16
000056  6a05              LDR      r5,[r0,#0x20]
000058  68ed              LDR      r5,[r5,#0xc]
00005a  ea446305          ORR      r3,r4,r5,LSL #24
;;;294                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;295                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;296                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;297      
;;;298      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
00005e  6804              LDR      r4,[r0,#0]
000060  2c10              CMP      r4,#0x10
000062  d105              BNE      |L10.112|
;;;299      {
;;;300        /* FSMC_Bank2_NAND registers configuration */
;;;301        FSMC_Bank2->PCR2 = tmppcr;
000064  f04f4420          MOV      r4,#0xa0000000
000068  6621              STR      r1,[r4,#0x60]
;;;302        FSMC_Bank2->PMEM2 = tmppmem;
00006a  66a2              STR      r2,[r4,#0x68]
;;;303        FSMC_Bank2->PATT2 = tmppatt;
00006c  66e3              STR      r3,[r4,#0x6c]
00006e  e007              B        |L10.128|
                  |L10.112|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* FSMC_Bank3_NAND registers configuration */
;;;308        FSMC_Bank3->PCR3 = tmppcr;
000070  4c04              LDR      r4,|L10.132|
000072  6021              STR      r1,[r4,#0]
;;;309        FSMC_Bank3->PMEM3 = tmppmem;
000074  f04f4420          MOV      r4,#0xa0000000
000078  f8c42088          STR      r2,[r4,#0x88]
;;;310        FSMC_Bank3->PATT3 = tmppatt;
00007c  4c02              LDR      r4,|L10.136|
00007e  6023              STR      r3,[r4,#0]
                  |L10.128|
;;;311      }
;;;312    }
000080  bd30              POP      {r4,r5,pc}
;;;313    
                          ENDP

000082  0000              DCW      0x0000
                  |L10.132|
                          DCD      0xa0000080
                  |L10.136|
                          DCD      0xa000008c

                          AREA ||i.FSMC_NANDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDStructInit PROC
;;;409      */
;;;410    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  2110              MOVS     r1,#0x10
;;;411    { 
;;;412      /* Reset NAND Init structure parameters values */
;;;413      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
000002  6001              STR      r1,[r0,#0]
;;;414      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000004  2100              MOVS     r1,#0
000006  6041              STR      r1,[r0,#4]
;;;415      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000008  6081              STR      r1,[r0,#8]
;;;416      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
00000a  60c1              STR      r1,[r0,#0xc]
;;;417      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
00000c  6101              STR      r1,[r0,#0x10]
;;;418      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
00000e  6141              STR      r1,[r0,#0x14]
;;;419      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
000010  6181              STR      r1,[r0,#0x18]
;;;420      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000012  21fc              MOVS     r1,#0xfc
000014  69c2              LDR      r2,[r0,#0x1c]
000016  6011              STR      r1,[r2,#0]
;;;421      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  6051              STR      r1,[r2,#4]
;;;422      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  6091              STR      r1,[r2,#8]
;;;423      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000020  69c2              LDR      r2,[r0,#0x1c]
000022  60d1              STR      r1,[r2,#0xc]
;;;424      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000024  6a02              LDR      r2,[r0,#0x20]
000026  6011              STR      r1,[r2,#0]
;;;425      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000028  6a02              LDR      r2,[r0,#0x20]
00002a  6051              STR      r1,[r2,#4]
;;;426      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00002c  6a02              LDR      r2,[r0,#0x20]
00002e  6091              STR      r1,[r2,#8]
;;;427      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
000030  6a02              LDR      r2,[r0,#0x20]
000032  60d1              STR      r1,[r2,#0xc]
;;;428    }
000034  4770              BX       lr
;;;429    
                          ENDP


                          AREA ||i.FSMC_NORSRAMCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMCmd PROC
;;;466      */
;;;467    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b151              CBZ      r1,|L12.24|
;;;468    {
;;;469      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;470      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;471      
;;;472      if (NewState != DISABLE)
;;;473      {
;;;474        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;475        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
000002  f04f4220          MOV      r2,#0xa0000000
000006  f8522020          LDR      r2,[r2,r0,LSL #2]
00000a  f0420201          ORR      r2,r2,#1
00000e  f04f4320          MOV      r3,#0xa0000000
000012  f8432020          STR      r2,[r3,r0,LSL #2]
000016  e009              B        |L12.44|
                  |L12.24|
;;;476      }
;;;477      else
;;;478      {
;;;479        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;480        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
000018  f04f4220          MOV      r2,#0xa0000000
00001c  f8522020          LDR      r2,[r2,r0,LSL #2]
000020  4b03              LDR      r3,|L12.48|
000022  401a              ANDS     r2,r2,r3
000024  f04f4320          MOV      r3,#0xa0000000
000028  f8432020          STR      r2,[r3,r0,LSL #2]
                  |L12.44|
;;;481      }
;;;482    }
00002c  4770              BX       lr
;;;483    
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      0x000ffffe

                          AREA ||i.FSMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMDeInit PROC
;;;100      */
;;;101    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  b930              CBNZ     r0,|L13.16|
;;;102    {
;;;103      /* Check the parameter */
;;;104      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;105      
;;;106      /* FSMC_Bank1_NORSRAM1 */
;;;107      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;108      {
;;;109        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000002  f24301db          MOV      r1,#0x30db
000006  f04f4220          MOV      r2,#0xa0000000
00000a  f8421020          STR      r1,[r2,r0,LSL #2]
00000e  e005              B        |L13.28|
                  |L13.16|
;;;110      }
;;;111      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;112      else
;;;113      {   
;;;114        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000010  f24301d2          MOV      r1,#0x30d2
000014  f04f4220          MOV      r2,#0xa0000000
000018  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L13.28|
;;;115      }
;;;116      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  1c41              ADDS     r1,r0,#1
000022  f04f4320          MOV      r3,#0xa0000000
000026  f8432021          STR      r2,[r3,r1,LSL #2]
;;;117      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
00002a  4611              MOV      r1,r2
00002c  461a              MOV      r2,r3
00002e  eb020280          ADD      r2,r2,r0,LSL #2
000032  f8c21104          STR      r1,[r2,#0x104]
;;;118    }
000036  4770              BX       lr
;;;119    
                          ENDP


                          AREA ||i.FSMC_NORSRAMInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMInit PROC
;;;174      */
;;;175    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  e9d01201          LDRD     r1,r2,[r0,#4]
;;;176    { 
;;;177      /* Check the parameters */
;;;178      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;179      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;180      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;181      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;182      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;183      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;184      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;185      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;186      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;187      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;188      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;189      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;190      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;191      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;192      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;193      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;194      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;195      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;196      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;197      
;;;198      /* Bank1 NOR/SRAM control register configuration */ 
;;;199      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000004  4311              ORRS     r1,r1,r2
000006  68c2              LDR      r2,[r0,#0xc]
000008  4311              ORRS     r1,r1,r2
00000a  6902              LDR      r2,[r0,#0x10]
00000c  4311              ORRS     r1,r1,r2
00000e  6942              LDR      r2,[r0,#0x14]
000010  4311              ORRS     r1,r1,r2
000012  6982              LDR      r2,[r0,#0x18]
000014  4311              ORRS     r1,r1,r2
000016  69c2              LDR      r2,[r0,#0x1c]
000018  4311              ORRS     r1,r1,r2
00001a  6a02              LDR      r2,[r0,#0x20]
00001c  4311              ORRS     r1,r1,r2
00001e  6a42              LDR      r2,[r0,#0x24]
000020  4311              ORRS     r1,r1,r2
000022  6a82              LDR      r2,[r0,#0x28]
000024  4311              ORRS     r1,r1,r2
000026  6ac2              LDR      r2,[r0,#0x2c]
000028  4311              ORRS     r1,r1,r2
00002a  f04f4320          MOV      r3,#0xa0000000
00002e  6802              LDR      r2,[r0,#0]
000030  f8431022          STR      r1,[r3,r2,LSL #2]
;;;200                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;201                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;202                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;203                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;204                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;205                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;206                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;207                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;208                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;209                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;210                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;211      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
000034  6881              LDR      r1,[r0,#8]
000036  2908              CMP      r1,#8
000038  d108              BNE      |L14.76|
;;;212      {
;;;213        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
00003a  461a              MOV      r2,r3
00003c  6801              LDR      r1,[r0,#0]
00003e  f8521021          LDR      r1,[r2,r1,LSL #2]
000042  f0410140          ORR      r1,r1,#0x40
000046  6802              LDR      r2,[r0,#0]
000048  f8431022          STR      r1,[r3,r2,LSL #2]
                  |L14.76|
;;;214      }
;;;215      /* Bank1 NOR/SRAM timing register configuration */
;;;216      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
00004c  6b01              LDR      r1,[r0,#0x30]
00004e  6809              LDR      r1,[r1,#0]
000050  6b02              LDR      r2,[r0,#0x30]
000052  6852              LDR      r2,[r2,#4]
000054  ea411102          ORR      r1,r1,r2,LSL #4
000058  6b02              LDR      r2,[r0,#0x30]
00005a  6892              LDR      r2,[r2,#8]
00005c  ea412102          ORR      r1,r1,r2,LSL #8
000060  6b02              LDR      r2,[r0,#0x30]
000062  68d2              LDR      r2,[r2,#0xc]
000064  ea414102          ORR      r1,r1,r2,LSL #16
000068  6b02              LDR      r2,[r0,#0x30]
00006a  6912              LDR      r2,[r2,#0x10]
00006c  ea415102          ORR      r1,r1,r2,LSL #20
000070  6b02              LDR      r2,[r0,#0x30]
000072  6952              LDR      r2,[r2,#0x14]
000074  ea416102          ORR      r1,r1,r2,LSL #24
000078  6b02              LDR      r2,[r0,#0x30]
00007a  6992              LDR      r2,[r2,#0x18]
00007c  4311              ORRS     r1,r1,r2
00007e  6802              LDR      r2,[r0,#0]
000080  1c52              ADDS     r2,r2,#1
000082  f04f4320          MOV      r3,#0xa0000000
000086  f8431022          STR      r1,[r3,r2,LSL #2]
;;;217                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;218                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;219                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;220                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;221                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;222                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;223                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;224                
;;;225        
;;;226      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;227      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
00008a  6a81              LDR      r1,[r0,#0x28]
00008c  f5b14f80          CMP      r1,#0x4000
000090  d11a              BNE      |L14.200|
;;;228      {
;;;229        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;230        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;231        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;232        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;233        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;234        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;235        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000092  6b41              LDR      r1,[r0,#0x34]
000094  6809              LDR      r1,[r1,#0]
000096  6b42              LDR      r2,[r0,#0x34]
000098  6852              LDR      r2,[r2,#4]
00009a  ea411102          ORR      r1,r1,r2,LSL #4
00009e  6b42              LDR      r2,[r0,#0x34]
0000a0  6892              LDR      r2,[r2,#8]
0000a2  ea412102          ORR      r1,r1,r2,LSL #8
0000a6  6b42              LDR      r2,[r0,#0x34]
0000a8  6912              LDR      r2,[r2,#0x10]
0000aa  ea415102          ORR      r1,r1,r2,LSL #20
0000ae  6b42              LDR      r2,[r0,#0x34]
0000b0  6952              LDR      r2,[r2,#0x14]
0000b2  ea416102          ORR      r1,r1,r2,LSL #24
0000b6  6b42              LDR      r2,[r0,#0x34]
0000b8  6992              LDR      r2,[r2,#0x18]
0000ba  4311              ORRS     r1,r1,r2
0000bc  6802              LDR      r2,[r0,#0]
0000be  eb030282          ADD      r2,r3,r2,LSL #2
0000c2  f8c21104          STR      r1,[r2,#0x104]
0000c6  e008              B        |L14.218|
                  |L14.200|
;;;236                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;237                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;238                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;239                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;240                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;241                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;242      }
;;;243      else
;;;244      {
;;;245        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
0000c8  f06f4170          MVN      r1,#0xf0000000
0000cc  f04f4320          MOV      r3,#0xa0000000
0000d0  6802              LDR      r2,[r0,#0]
0000d2  eb030282          ADD      r2,r3,r2,LSL #2
0000d6  f8c21104          STR      r1,[r2,#0x104]
                  |L14.218|
;;;246      }
;;;247    }
0000da  4770              BX       lr
;;;248    
                          ENDP


                          AREA ||i.FSMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMStructInit PROC
;;;372      */
;;;373    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  2100              MOVS     r1,#0
;;;374    {  
;;;375      /* Reset NOR/SRAM Init structure parameters values */
;;;376      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
000002  6001              STR      r1,[r0,#0]
;;;377      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000004  2102              MOVS     r1,#2
000006  6041              STR      r1,[r0,#4]
;;;378      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
000008  2100              MOVS     r1,#0
00000a  6081              STR      r1,[r0,#8]
;;;379      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00000c  60c1              STR      r1,[r0,#0xc]
;;;380      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00000e  6101              STR      r1,[r0,#0x10]
;;;381      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000010  6141              STR      r1,[r0,#0x14]
;;;382      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000012  6181              STR      r1,[r0,#0x18]
;;;383      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000014  61c1              STR      r1,[r0,#0x1c]
;;;384      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000016  f44f5180          MOV      r1,#0x1000
00001a  6201              STR      r1,[r0,#0x20]
;;;385      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00001c  0049              LSLS     r1,r1,#1
00001e  6241              STR      r1,[r0,#0x24]
;;;386      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000020  2100              MOVS     r1,#0
000022  6281              STR      r1,[r0,#0x28]
;;;387      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000024  62c1              STR      r1,[r0,#0x2c]
;;;388      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000026  210f              MOVS     r1,#0xf
000028  6b02              LDR      r2,[r0,#0x30]
00002a  6011              STR      r1,[r2,#0]
;;;389      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
00002c  6b02              LDR      r2,[r0,#0x30]
00002e  6051              STR      r1,[r2,#4]
;;;390      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000030  21ff              MOVS     r1,#0xff
000032  6b02              LDR      r2,[r0,#0x30]
000034  6091              STR      r1,[r2,#8]
;;;391      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000036  210f              MOVS     r1,#0xf
000038  6b02              LDR      r2,[r0,#0x30]
00003a  60d1              STR      r1,[r2,#0xc]
;;;392      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
00003c  6b02              LDR      r2,[r0,#0x30]
00003e  6111              STR      r1,[r2,#0x10]
;;;393      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
000040  6b02              LDR      r2,[r0,#0x30]
000042  6151              STR      r1,[r2,#0x14]
;;;394      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
000044  2100              MOVS     r1,#0
000046  6b02              LDR      r2,[r0,#0x30]
000048  6191              STR      r1,[r2,#0x18]
;;;395      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
00004a  210f              MOVS     r1,#0xf
00004c  6b42              LDR      r2,[r0,#0x34]
00004e  6011              STR      r1,[r2,#0]
;;;396      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000050  6b42              LDR      r2,[r0,#0x34]
000052  6051              STR      r1,[r2,#4]
;;;397      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000054  21ff              MOVS     r1,#0xff
000056  6b42              LDR      r2,[r0,#0x34]
000058  6091              STR      r1,[r2,#8]
;;;398      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00005a  210f              MOVS     r1,#0xf
00005c  6b42              LDR      r2,[r0,#0x34]
00005e  60d1              STR      r1,[r2,#0xc]
;;;399      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000060  6b42              LDR      r2,[r0,#0x34]
000062  6111              STR      r1,[r2,#0x10]
;;;400      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000064  6b42              LDR      r2,[r0,#0x34]
000066  6151              STR      r1,[r2,#0x14]
;;;401      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
000068  2100              MOVS     r1,#0
00006a  6b42              LDR      r2,[r0,#0x34]
00006c  6191              STR      r1,[r2,#0x18]
;;;402    }
00006e  4770              BX       lr
;;;403    
                          ENDP


                          AREA ||i.FSMC_PCCARDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDCmd PROC
;;;529      */
;;;530    void FSMC_PCCARDCmd(FunctionalState NewState)
000000  b140              CBZ      r0,|L16.20|
;;;531    {
;;;532      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;533      
;;;534      if (NewState != DISABLE)
;;;535      {
;;;536        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;537        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
000002  4909              LDR      r1,|L16.40|
000004  6809              LDR      r1,[r1,#0]
000006  f0410104          ORR      r1,r1,#4
00000a  f04f4220          MOV      r2,#0xa0000000
00000e  f8c210a0          STR      r1,[r2,#0xa0]
000012  e008              B        |L16.38|
                  |L16.20|
;;;538      }
;;;539      else
;;;540      {
;;;541        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;542        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
000014  4904              LDR      r1,|L16.40|
000016  6809              LDR      r1,[r1,#0]
000018  4a04              LDR      r2,|L16.44|
00001a  ea010102          AND      r1,r1,r2
00001e  f04f4220          MOV      r2,#0xa0000000
000022  f8c210a0          STR      r1,[r2,#0xa0]
                  |L16.38|
;;;543      }
;;;544    }
000026  4770              BX       lr
;;;545    
                          ENDP

                  |L16.40|
                          DCD      0xa00000a0
                  |L16.44|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_PCCARDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDDeInit PROC
;;;156      */
;;;157    void FSMC_PCCARDDeInit(void)
000000  2018              MOVS     r0,#0x18
;;;158    {
;;;159      /* Set the FSMC_Bank4 registers to their reset values */
;;;160      FSMC_Bank4->PCR4 = 0x00000018; 
000002  4909              LDR      r1,|L17.40|
000004  6008              STR      r0,[r1,#0]
;;;161      FSMC_Bank4->SR4 = 0x00000000;	
000006  f04f0000          MOV      r0,#0
00000a  f04f4120          MOV      r1,#0xa0000000
00000e  f8c100a4          STR      r0,[r1,#0xa4]
;;;162      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
000012  f04f30fc          MOV      r0,#0xfcfcfcfc
000016  4905              LDR      r1,|L17.44|
000018  6008              STR      r0,[r1,#0]
;;;163      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
00001a  f1010104          ADD      r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;164      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
000020  f1010104          ADD      r1,r1,#4
000024  6008              STR      r0,[r1,#0]
;;;165    }
000026  4770              BX       lr
;;;166    
                          ENDP

                  |L17.40|
                          DCD      0xa00000a0
                  |L17.44|
                          DCD      0xa00000a8

                          AREA ||i.FSMC_PCCARDInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDInit PROC
;;;320      */
;;;321    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  6801              LDR      r1,[r0,#0]
;;;322    {
;;;323      /* Check the parameters */
;;;324      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;325      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;326      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;327     
;;;328      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;329      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;330      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;331      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;332      
;;;333      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;334      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;335      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;336      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;337      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;338      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;339      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;340      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;341      
;;;342      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;343      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000002  f0410110          ORR      r1,r1,#0x10
000006  6842              LDR      r2,[r0,#4]
000008  ea412142          ORR      r1,r1,r2,LSL #9
00000c  6882              LDR      r2,[r0,#8]
00000e  ea413142          ORR      r1,r1,r2,LSL #13
000012  4a1a              LDR      r2,|L18.124|
000014  6011              STR      r1,[r2,#0]
;;;344                         FSMC_MemoryDataWidth_16b |  
;;;345                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;346                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;347                
;;;348      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;349      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000016  68c1              LDR      r1,[r0,#0xc]
000018  6809              LDR      r1,[r1,#0]
00001a  68c2              LDR      r2,[r0,#0xc]
00001c  6852              LDR      r2,[r2,#4]
00001e  ea412102          ORR      r1,r1,r2,LSL #8
000022  68c2              LDR      r2,[r0,#0xc]
000024  6892              LDR      r2,[r2,#8]
000026  ea414102          ORR      r1,r1,r2,LSL #16
00002a  68c2              LDR      r2,[r0,#0xc]
00002c  68d2              LDR      r2,[r2,#0xc]
00002e  ea416102          ORR      r1,r1,r2,LSL #24
000032  4a13              LDR      r2,|L18.128|
000034  6011              STR      r1,[r2,#0]
;;;350                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;351                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;352                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;353                
;;;354      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;355      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000036  6901              LDR      r1,[r0,#0x10]
000038  6809              LDR      r1,[r1,#0]
00003a  6902              LDR      r2,[r0,#0x10]
00003c  6852              LDR      r2,[r2,#4]
00003e  ea412102          ORR      r1,r1,r2,LSL #8
000042  6902              LDR      r2,[r0,#0x10]
000044  6892              LDR      r2,[r2,#8]
000046  ea414102          ORR      r1,r1,r2,LSL #16
00004a  6902              LDR      r2,[r0,#0x10]
00004c  68d2              LDR      r2,[r2,#0xc]
00004e  ea416102          ORR      r1,r1,r2,LSL #24
000052  4a0c              LDR      r2,|L18.132|
000054  6011              STR      r1,[r2,#0]
;;;356                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;357                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;358                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;359                
;;;360      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;361      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000056  6941              LDR      r1,[r0,#0x14]
000058  6809              LDR      r1,[r1,#0]
00005a  6942              LDR      r2,[r0,#0x14]
00005c  6852              LDR      r2,[r2,#4]
00005e  ea412102          ORR      r1,r1,r2,LSL #8
000062  6942              LDR      r2,[r0,#0x14]
000064  6892              LDR      r2,[r2,#8]
000066  ea414102          ORR      r1,r1,r2,LSL #16
00006a  6942              LDR      r2,[r0,#0x14]
00006c  68d2              LDR      r2,[r2,#0xc]
00006e  ea416102          ORR      r1,r1,r2,LSL #24
000072  f04f4220          MOV      r2,#0xa0000000
000076  f8c210b0          STR      r1,[r2,#0xb0]
;;;362                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;363                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;364                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;365    }
00007a  4770              BX       lr
;;;366    
                          ENDP

                  |L18.124|
                          DCD      0xa00000a0
                  |L18.128|
                          DCD      0xa00000a8
                  |L18.132|
                          DCD      0xa00000ac

                          AREA ||i.FSMC_PCCARDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_PCCARDStructInit PROC
;;;435      */
;;;436    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  2100              MOVS     r1,#0
;;;437    {
;;;438      /* Reset PCCARD Init structure parameters values */
;;;439      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000002  6001              STR      r1,[r0,#0]
;;;440      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000004  6041              STR      r1,[r0,#4]
;;;441      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
000006  6081              STR      r1,[r0,#8]
;;;442      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000008  21fc              MOVS     r1,#0xfc
00000a  68c2              LDR      r2,[r0,#0xc]
00000c  6011              STR      r1,[r2,#0]
;;;443      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  6051              STR      r1,[r2,#4]
;;;444      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000012  68c2              LDR      r2,[r0,#0xc]
000014  6091              STR      r1,[r2,#8]
;;;445      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000016  68c2              LDR      r2,[r0,#0xc]
000018  60d1              STR      r1,[r2,#0xc]
;;;446      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00001a  6902              LDR      r2,[r0,#0x10]
00001c  6011              STR      r1,[r2,#0]
;;;447      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00001e  6902              LDR      r2,[r0,#0x10]
000020  6051              STR      r1,[r2,#4]
;;;448      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000022  6902              LDR      r2,[r0,#0x10]
000024  6091              STR      r1,[r2,#8]
;;;449      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
000026  6902              LDR      r2,[r0,#0x10]
000028  60d1              STR      r1,[r2,#0xc]
;;;450      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00002a  6942              LDR      r2,[r0,#0x14]
00002c  6011              STR      r1,[r2,#0]
;;;451      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00002e  6942              LDR      r2,[r0,#0x14]
000030  6051              STR      r1,[r2,#4]
;;;452      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000032  6942              LDR      r2,[r0,#0x14]
000034  6091              STR      r1,[r2,#8]
;;;453      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000036  6942              LDR      r2,[r0,#0x14]
000038  60d1              STR      r1,[r2,#0xc]
;;;454    }
00003a  4770              BX       lr
;;;455    
                          ENDP

