; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\stm32f10x_dma.o --depend=.\Object\stm32f10x_dma.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\stm32f10x_dma.crf Src\StdPeriph_Driver\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;502      */
;;;503    void DMA_ClearFlag(uint32_t DMA_FLAG)
000000  f0105f80          TST      r0,#0x10000000
;;;504    {
;;;505      /* Check the parameters */
;;;506      assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;507      /* Calculate the used DMA */
;;;508    
;;;509      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
000004  d002              BEQ      |L1.12|
;;;510      {
;;;511        /* Clear the selected DMA flags */
;;;512        DMA2->IFCR = DMA_FLAG;
000006  4903              LDR      r1,|L1.20|
000008  6008              STR      r0,[r1,#0]
00000a  e001              B        |L1.16|
                  |L1.12|
;;;513      }
;;;514      else
;;;515      {
;;;516        /* Clear the selected DMA flags */
;;;517        DMA1->IFCR = DMA_FLAG;
00000c  4902              LDR      r1,|L1.24|
00000e  6048              STR      r0,[r1,#4]
                  |L1.16|
;;;518      }
;;;519    }
000010  4770              BX       lr
;;;520    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40020404
                  |L1.24|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;662      */
;;;663    void DMA_ClearITPendingBit(uint32_t DMA_IT)
000000  f0105f80          TST      r0,#0x10000000
;;;664    {
;;;665      /* Check the parameters */
;;;666      assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;667    
;;;668      /* Calculate the used DMA */
;;;669      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
000004  d002              BEQ      |L2.12|
;;;670      {
;;;671        /* Clear the selected DMA interrupt pending bits */
;;;672        DMA2->IFCR = DMA_IT;
000006  4903              LDR      r1,|L2.20|
000008  6008              STR      r0,[r1,#0]
00000a  e001              B        |L2.16|
                  |L2.12|
;;;673      }
;;;674      else
;;;675      {
;;;676        /* Clear the selected DMA interrupt pending bits */
;;;677        DMA1->IFCR = DMA_IT;
00000c  4902              LDR      r1,|L2.24|
00000e  6048              STR      r0,[r1,#4]
                  |L2.16|
;;;678      }
;;;679    }
000010  4770              BX       lr
;;;680    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40020404
                  |L2.24|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;293      */
;;;294    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  b121              CBZ      r1,|L3.12|
;;;295    {
;;;296      /* Check the parameters */
;;;297      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;298      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;299    
;;;300      if (NewState != DISABLE)
;;;301      {
;;;302        /* Enable the selected DMAy Channelx */
;;;303        DMAy_Channelx->CCR |= CCR_ENABLE_Set;
000002  6802              LDR      r2,[r0,#0]
000004  f0420201          ORR      r2,r2,#1
000008  6002              STR      r2,[r0,#0]
00000a  e003              B        |L3.20|
                  |L3.12|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* Disable the selected DMAy Channelx */
;;;308        DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
00000c  6802              LDR      r2,[r0,#0]
00000e  f0220201          BIC      r2,r2,#1
000012  6002              STR      r2,[r0,#0]
                  |L3.20|
;;;309      }
;;;310    }
000014  4770              BX       lr
;;;311    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;109      */
;;;110    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;111    {
;;;112      /* Check the parameters */
;;;113      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;114      /* Disable the selected DMAy Channelx */
;;;115      DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
000002  f0210101          BIC      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;116      /* Reset DMAy Channelx control register */
;;;117      DMAy_Channelx->CCR  = 0;
000008  2100              MOVS     r1,#0
00000a  6001              STR      r1,[r0,#0]
;;;118      
;;;119      /* Reset DMAy Channelx remaining bytes register */
;;;120      DMAy_Channelx->CNDTR = 0;
00000c  6041              STR      r1,[r0,#4]
;;;121      
;;;122      /* Reset DMAy Channelx peripheral address register */
;;;123      DMAy_Channelx->CPAR  = 0;
00000e  6081              STR      r1,[r0,#8]
;;;124      
;;;125      /* Reset DMAy Channelx memory address register */
;;;126      DMAy_Channelx->CMAR = 0;
000010  60c1              STR      r1,[r0,#0xc]
;;;127      
;;;128      if (DMAy_Channelx == DMA1_Channel1)
000012  494b              LDR      r1,|L4.320|
000014  4288              CMP      r0,r1
000016  d108              BNE      |L4.42|
;;;129      {
;;;130        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;131        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000018  4949              LDR      r1,|L4.320|
00001a  3908              SUBS     r1,r1,#8
00001c  6849              LDR      r1,[r1,#4]
00001e  f041010f          ORR      r1,r1,#0xf
000022  4a47              LDR      r2,|L4.320|
000024  3a08              SUBS     r2,r2,#8
000026  6051              STR      r1,[r2,#4]
000028  e088              B        |L4.316|
                  |L4.42|
;;;132      }
;;;133      else if (DMAy_Channelx == DMA1_Channel2)
00002a  4945              LDR      r1,|L4.320|
00002c  3114              ADDS     r1,r1,#0x14
00002e  4288              CMP      r0,r1
000030  d108              BNE      |L4.68|
;;;134      {
;;;135        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
000032  4943              LDR      r1,|L4.320|
000034  3908              SUBS     r1,r1,#8
000036  6849              LDR      r1,[r1,#4]
000038  f04101f0          ORR      r1,r1,#0xf0
00003c  4a40              LDR      r2,|L4.320|
00003e  3a08              SUBS     r2,r2,#8
000040  6051              STR      r1,[r2,#4]
000042  e07b              B        |L4.316|
                  |L4.68|
;;;137      }
;;;138      else if (DMAy_Channelx == DMA1_Channel3)
000044  493e              LDR      r1,|L4.320|
000046  3128              ADDS     r1,r1,#0x28
000048  4288              CMP      r0,r1
00004a  d108              BNE      |L4.94|
;;;139      {
;;;140        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;141        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
00004c  493c              LDR      r1,|L4.320|
00004e  3908              SUBS     r1,r1,#8
000050  6849              LDR      r1,[r1,#4]
000052  f4416170          ORR      r1,r1,#0xf00
000056  4a3a              LDR      r2,|L4.320|
000058  3a08              SUBS     r2,r2,#8
00005a  6051              STR      r1,[r2,#4]
00005c  e06e              B        |L4.316|
                  |L4.94|
;;;142      }
;;;143      else if (DMAy_Channelx == DMA1_Channel4)
00005e  4938              LDR      r1,|L4.320|
000060  313c              ADDS     r1,r1,#0x3c
000062  4288              CMP      r0,r1
000064  d108              BNE      |L4.120|
;;;144      {
;;;145        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;146        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
000066  4936              LDR      r1,|L4.320|
000068  3908              SUBS     r1,r1,#8
00006a  6849              LDR      r1,[r1,#4]
00006c  f4414170          ORR      r1,r1,#0xf000
000070  4a33              LDR      r2,|L4.320|
000072  3a08              SUBS     r2,r2,#8
000074  6051              STR      r1,[r2,#4]
000076  e061              B        |L4.316|
                  |L4.120|
;;;147      }
;;;148      else if (DMAy_Channelx == DMA1_Channel5)
000078  4931              LDR      r1,|L4.320|
00007a  3150              ADDS     r1,r1,#0x50
00007c  4288              CMP      r0,r1
00007e  d108              BNE      |L4.146|
;;;149      {
;;;150        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;151        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
000080  492f              LDR      r1,|L4.320|
000082  3908              SUBS     r1,r1,#8
000084  6849              LDR      r1,[r1,#4]
000086  f4412170          ORR      r1,r1,#0xf0000
00008a  4a2d              LDR      r2,|L4.320|
00008c  3a08              SUBS     r2,r2,#8
00008e  6051              STR      r1,[r2,#4]
000090  e054              B        |L4.316|
                  |L4.146|
;;;152      }
;;;153      else if (DMAy_Channelx == DMA1_Channel6)
000092  492b              LDR      r1,|L4.320|
000094  3164              ADDS     r1,r1,#0x64
000096  4288              CMP      r0,r1
000098  d108              BNE      |L4.172|
;;;154      {
;;;155        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;156        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
00009a  4929              LDR      r1,|L4.320|
00009c  3908              SUBS     r1,r1,#8
00009e  6849              LDR      r1,[r1,#4]
0000a0  f4410170          ORR      r1,r1,#0xf00000
0000a4  4a26              LDR      r2,|L4.320|
0000a6  3a08              SUBS     r2,r2,#8
0000a8  6051              STR      r1,[r2,#4]
0000aa  e047              B        |L4.316|
                  |L4.172|
;;;157      }
;;;158      else if (DMAy_Channelx == DMA1_Channel7)
0000ac  4924              LDR      r1,|L4.320|
0000ae  3178              ADDS     r1,r1,#0x78
0000b0  4288              CMP      r0,r1
0000b2  d108              BNE      |L4.198|
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;161        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
0000b4  4922              LDR      r1,|L4.320|
0000b6  3908              SUBS     r1,r1,#8
0000b8  6849              LDR      r1,[r1,#4]
0000ba  f0416170          ORR      r1,r1,#0xf000000
0000be  4a20              LDR      r2,|L4.320|
0000c0  3a08              SUBS     r2,r2,#8
0000c2  6051              STR      r1,[r2,#4]
0000c4  e03a              B        |L4.316|
                  |L4.198|
;;;162      }
;;;163      else if (DMAy_Channelx == DMA2_Channel1)
0000c6  491f              LDR      r1,|L4.324|
0000c8  4288              CMP      r0,r1
0000ca  d108              BNE      |L4.222|
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;166        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
0000cc  f1a00104          SUB      r1,r0,#4
0000d0  6809              LDR      r1,[r1,#0]
0000d2  f041010f          ORR      r1,r1,#0xf
0000d6  4a1c              LDR      r2,|L4.328|
0000d8  f8c21404          STR      r1,[r2,#0x404]
0000dc  e02e              B        |L4.316|
                  |L4.222|
;;;167      }
;;;168      else if (DMAy_Channelx == DMA2_Channel2)
0000de  4919              LDR      r1,|L4.324|
0000e0  3114              ADDS     r1,r1,#0x14
0000e2  4288              CMP      r0,r1
0000e4  d107              BNE      |L4.246|
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;171        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
0000e6  4919              LDR      r1,|L4.332|
0000e8  6809              LDR      r1,[r1,#0]
0000ea  f04101f0          ORR      r1,r1,#0xf0
0000ee  4a16              LDR      r2,|L4.328|
0000f0  f8c21404          STR      r1,[r2,#0x404]
0000f4  e022              B        |L4.316|
                  |L4.246|
;;;172      }
;;;173      else if (DMAy_Channelx == DMA2_Channel3)
0000f6  4913              LDR      r1,|L4.324|
0000f8  3128              ADDS     r1,r1,#0x28
0000fa  4288              CMP      r0,r1
0000fc  d107              BNE      |L4.270|
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;176        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
0000fe  4913              LDR      r1,|L4.332|
000100  6809              LDR      r1,[r1,#0]
000102  f4416170          ORR      r1,r1,#0xf00
000106  4a10              LDR      r2,|L4.328|
000108  f8c21404          STR      r1,[r2,#0x404]
00010c  e016              B        |L4.316|
                  |L4.270|
;;;177      }
;;;178      else if (DMAy_Channelx == DMA2_Channel4)
00010e  490d              LDR      r1,|L4.324|
000110  313c              ADDS     r1,r1,#0x3c
000112  4288              CMP      r0,r1
000114  d107              BNE      |L4.294|
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;181        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
000116  490d              LDR      r1,|L4.332|
000118  6809              LDR      r1,[r1,#0]
00011a  f4414170          ORR      r1,r1,#0xf000
00011e  4a0a              LDR      r2,|L4.328|
000120  f8c21404          STR      r1,[r2,#0x404]
000124  e00a              B        |L4.316|
                  |L4.294|
;;;182      }
;;;183      else
;;;184      { 
;;;185        if (DMAy_Channelx == DMA2_Channel5)
000126  4907              LDR      r1,|L4.324|
000128  3150              ADDS     r1,r1,#0x50
00012a  4288              CMP      r0,r1
00012c  d106              BNE      |L4.316|
;;;186        {
;;;187          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;188          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
00012e  4907              LDR      r1,|L4.332|
000130  6809              LDR      r1,[r1,#0]
000132  f4412170          ORR      r1,r1,#0xf0000
000136  4a04              LDR      r2,|L4.328|
000138  f8c21404          STR      r1,[r2,#0x404]
                  |L4.316|
;;;189        }
;;;190      }
;;;191    }
00013c  4770              BX       lr
;;;192    
                          ENDP

00013e  0000              DCW      0x0000
                  |L4.320|
                          DCD      0x40020008
                  |L4.324|
                          DCD      0x40020408
                  |L4.328|
                          DCD      0x40020000
                  |L4.332|
                          DCD      0x40020404

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;351      */
;;;352    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  4601              MOV      r1,r0
;;;353    {
;;;354      /* Check the parameters */
;;;355      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;356      /* Return the number of remaining data units for DMAy Channelx */
;;;357      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  6848              LDR      r0,[r1,#4]
000004  b280              UXTH     r0,r0
;;;358    }
000006  4770              BX       lr
;;;359    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;413      */
;;;414    FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
000000  4601              MOV      r1,r0
;;;415    {
;;;416      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;417      uint32_t tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;418      /* Check the parameters */
;;;419      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;420    
;;;421      /* Calculate the used DMA */
;;;422      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
000006  f0115f80          TST      r1,#0x10000000
00000a  d002              BEQ      |L6.18|
;;;423      {
;;;424        /* Get DMA2 ISR register value */
;;;425        tmpreg = DMA2->ISR ;
00000c  4b05              LDR      r3,|L6.36|
00000e  681a              LDR      r2,[r3,#0]
000010  e001              B        |L6.22|
                  |L6.18|
;;;426      }
;;;427      else
;;;428      {
;;;429        /* Get DMA1 ISR register value */
;;;430        tmpreg = DMA1->ISR ;
000012  4b05              LDR      r3,|L6.40|
000014  681a              LDR      r2,[r3,#0]
                  |L6.22|
;;;431      }
;;;432    
;;;433      /* Check the status of the specified DMA flag */
;;;434      if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
000016  420a              TST      r2,r1
000018  d001              BEQ      |L6.30|
;;;435      {
;;;436        /* DMA_FLAG is set */
;;;437        bitstatus = SET;
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L6.32|
                  |L6.30|
;;;438      }
;;;439      else
;;;440      {
;;;441        /* DMA_FLAG is reset */
;;;442        bitstatus = RESET;
00001e  2000              MOVS     r0,#0
                  |L6.32|
;;;443      }
;;;444      
;;;445      /* Return the DMA_FLAG status */
;;;446      return  bitstatus;
;;;447    }
000020  4770              BX       lr
;;;448    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x40020400
                  |L6.40|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;574      */
;;;575    ITStatus DMA_GetITStatus(uint32_t DMA_IT)
000000  4601              MOV      r1,r0
;;;576    {
;;;577      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;578      uint32_t tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;579      /* Check the parameters */
;;;580      assert_param(IS_DMA_GET_IT(DMA_IT));
;;;581    
;;;582      /* Calculate the used DMA */
;;;583      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
000006  f0115f80          TST      r1,#0x10000000
00000a  d002              BEQ      |L7.18|
;;;584      {
;;;585        /* Get DMA2 ISR register value */
;;;586        tmpreg = DMA2->ISR ;
00000c  4b05              LDR      r3,|L7.36|
00000e  681a              LDR      r2,[r3,#0]
000010  e001              B        |L7.22|
                  |L7.18|
;;;587      }
;;;588      else
;;;589      {
;;;590        /* Get DMA1 ISR register value */
;;;591        tmpreg = DMA1->ISR ;
000012  4b05              LDR      r3,|L7.40|
000014  681a              LDR      r2,[r3,#0]
                  |L7.22|
;;;592      }
;;;593    
;;;594      /* Check the status of the specified DMA interrupt */
;;;595      if ((tmpreg & DMA_IT) != (uint32_t)RESET)
000016  420a              TST      r2,r1
000018  d001              BEQ      |L7.30|
;;;596      {
;;;597        /* DMA_IT is set */
;;;598        bitstatus = SET;
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L7.32|
                  |L7.30|
;;;599      }
;;;600      else
;;;601      {
;;;602        /* DMA_IT is reset */
;;;603        bitstatus = RESET;
00001e  2000              MOVS     r0,#0
                  |L7.32|
;;;604      }
;;;605      /* Return the DMA_IT status */
;;;606      return  bitstatus;
;;;607    }
000020  4770              BX       lr
;;;608    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      0x40020400
                  |L7.40|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;325      */
;;;326    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  b11a              CBZ      r2,|L8.10|
;;;327    {
;;;328      /* Check the parameters */
;;;329      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;330      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;331      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;332      if (NewState != DISABLE)
;;;333      {
;;;334        /* Enable the selected DMA interrupts */
;;;335        DMAy_Channelx->CCR |= DMA_IT;
000002  6803              LDR      r3,[r0,#0]
000004  430b              ORRS     r3,r3,r1
000006  6003              STR      r3,[r0,#0]
000008  e002              B        |L8.16|
                  |L8.10|
;;;336      }
;;;337      else
;;;338      {
;;;339        /* Disable the selected DMA interrupts */
;;;340        DMAy_Channelx->CCR &= ~DMA_IT;
00000a  6803              LDR      r3,[r0,#0]
00000c  438b              BICS     r3,r3,r1
00000e  6003              STR      r3,[r0,#0]
                  |L8.16|
;;;341      }
;;;342    }
000010  4770              BX       lr
;;;343    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;201      */
;;;202    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204      uint32_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;208      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;209      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;210      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;211      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;212      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;213      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;214      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;215      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;216      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;217    
;;;218    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;219      /* Get the DMAy_Channelx CCR value */
;;;220      tmpreg = DMAy_Channelx->CCR;
000004  6802              LDR      r2,[r0,#0]
;;;221      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;222      tmpreg &= CCR_CLEAR_Mask;
000006  f64773f0          MOV      r3,#0x7ff0
00000a  439a              BICS     r2,r2,r3
;;;223      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;224      /* Set DIR bit according to DMA_DIR value */
;;;225      /* Set CIRC bit according to DMA_Mode value */
;;;226      /* Set PINC bit according to DMA_PeripheralInc value */
;;;227      /* Set MINC bit according to DMA_MemoryInc value */
;;;228      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;229      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;230      /* Set PL bits according to DMA_Priority value */
;;;231      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;232      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000c  6a0c              LDR      r4,[r1,#0x20]
00000e  688b              LDR      r3,[r1,#8]
000010  4323              ORRS     r3,r3,r4
000012  690c              LDR      r4,[r1,#0x10]
000014  4323              ORRS     r3,r3,r4
000016  694c              LDR      r4,[r1,#0x14]
000018  4323              ORRS     r3,r3,r4
00001a  698c              LDR      r4,[r1,#0x18]
00001c  4323              ORRS     r3,r3,r4
00001e  69cc              LDR      r4,[r1,#0x1c]
000020  4323              ORRS     r3,r3,r4
000022  6a4c              LDR      r4,[r1,#0x24]
000024  4323              ORRS     r3,r3,r4
000026  6a8c              LDR      r4,[r1,#0x28]
000028  4323              ORRS     r3,r3,r4
00002a  431a              ORRS     r2,r2,r3
;;;233                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;234                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;235                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;236    
;;;237      /* Write to DMAy Channelx CCR */
;;;238      DMAy_Channelx->CCR = tmpreg;
00002c  6002              STR      r2,[r0,#0]
;;;239    
;;;240    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;241      /* Write to DMAy Channelx CNDTR */
;;;242      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002e  68cb              LDR      r3,[r1,#0xc]
000030  6043              STR      r3,[r0,#4]
;;;243    
;;;244    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;245      /* Write to DMAy Channelx CPAR */
;;;246      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000032  680b              LDR      r3,[r1,#0]
000034  6083              STR      r3,[r0,#8]
;;;247    
;;;248    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;249      /* Write to DMAy Channelx CMAR */
;;;250      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000036  684b              LDR      r3,[r1,#4]
000038  60c3              STR      r3,[r0,#0xc]
;;;251    }
00003a  bd10              POP      {r4,pc}
;;;252    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;258      */
;;;259    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;260    {
;;;261    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;262      /* Initialize the DMA_PeripheralBaseAddr member */
;;;263      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;264      /* Initialize the DMA_MemoryBaseAddr member */
;;;265      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;266      /* Initialize the DMA_DIR member */
;;;267      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000006  6081              STR      r1,[r0,#8]
;;;268      /* Initialize the DMA_BufferSize member */
;;;269      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;270      /* Initialize the DMA_PeripheralInc member */
;;;271      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;272      /* Initialize the DMA_MemoryInc member */
;;;273      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;274      /* Initialize the DMA_PeripheralDataSize member */
;;;275      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;276      /* Initialize the DMA_MemoryDataSize member */
;;;277      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;278      /* Initialize the DMA_Mode member */
;;;279      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;280      /* Initialize the DMA_Priority member */
;;;281      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;282      /* Initialize the DMA_M2M member */
;;;283      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;284    }
000018  4770              BX       lr
;;;285    
                          ENDP

