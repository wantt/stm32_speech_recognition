; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\main.o --depend=.\Object\main.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\main.crf Src\APP\main.c]
                          THUMB

                          AREA ||i.disp_comm||, CODE, READONLY, ALIGN=2

                  disp_comm PROC
;;;42     
;;;43     void disp_comm(u8 comm)
000000  b510              PUSH     {r4,lr}
;;;44     {
000002  4604              MOV      r4,r0
;;;45     	GUI_ClrArea(&(Label[comm]));
000004  eb040144          ADD      r1,r4,r4,LSL #1
000008  4a08              LDR      r2,|L1.44|
00000a  eb020081          ADD      r0,r2,r1,LSL #2
00000e  f7fffffe          BL       GUI_ClrArea
;;;46     	GUI_DispStr(&(Label[comm]),(u8 *)(commstr[comm-G_comm_fst].str));
000012  1f62              SUBS     r2,r4,#5
000014  eb020242          ADD      r2,r2,r2,LSL #1
000018  4b05              LDR      r3,|L1.48|
00001a  18d1              ADDS     r1,r2,r3
00001c  eb040244          ADD      r2,r4,r4,LSL #1
000020  4b02              LDR      r3,|L1.44|
000022  eb030082          ADD      r0,r3,r2,LSL #2
000026  f7fffffe          BL       GUI_DispStr
;;;47     }
00002a  bd10              POP      {r4,pc}
;;;48     
                          ENDP

                  |L1.44|
                          DCD      Label
                  |L1.48|
                          DCD      commstr

                          AREA ||i.disp_home||, CODE, READONLY, ALIGN=2

                  disp_home PROC
;;;60     
;;;61     void disp_home(void)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63     	GUI_ClrArea(&Screen);
000002  4816              LDR      r0,|L2.92|
000004  f7fffffe          BL       GUI_ClrArea
;;;64     	GUI_ClrArea(&(Label[G_wel]));
000008  4815              LDR      r0,|L2.96|
00000a  f7fffffe          BL       GUI_ClrArea
;;;65     	GUI_DispStr(&(Label[G_wel]),"欢迎使用");
00000e  a115              ADR      r1,|L2.100|
000010  4813              LDR      r0,|L2.96|
000012  f7fffffe          BL       GUI_DispStr
;;;66     	GUI_ClrArea(&(Label[G_neme]));
000016  4812              LDR      r0,|L2.96|
000018  300c              ADDS     r0,r0,#0xc
00001a  f7fffffe          BL       GUI_ClrArea
;;;67     	GUI_DispStr(&(Label[G_neme]),"孤立词语音识别测试系统");
00001e  a114              ADR      r1,|L2.112|
000020  480f              LDR      r0,|L2.96|
000022  300c              ADDS     r0,r0,#0xc
000024  f7fffffe          BL       GUI_DispStr
;;;68     	GUI_ClrArea(&(Label[G_prc]));
000028  480d              LDR      r0,|L2.96|
00002a  3018              ADDS     r0,r0,#0x18
00002c  f7fffffe          BL       GUI_ClrArea
;;;69     	GUI_DispStr(&(Label[G_prc]),"模板训练");
000030  a115              ADR      r1,|L2.136|
000032  480b              LDR      r0,|L2.96|
000034  3018              ADDS     r0,r0,#0x18
000036  f7fffffe          BL       GUI_DispStr
;;;70     	GUI_ClrArea(&(Label[G_recg]));
00003a  4809              LDR      r0,|L2.96|
00003c  3024              ADDS     r0,r0,#0x24
00003e  f7fffffe          BL       GUI_ClrArea
;;;71     	GUI_DispStr(&(Label[G_recg]),"语音识别");
000042  a114              ADR      r1,|L2.148|
000044  4806              LDR      r0,|L2.96|
000046  3024              ADDS     r0,r0,#0x24
000048  f7fffffe          BL       GUI_DispStr
;;;72     	GUI_ClrArea(&(Label[G_designer]));
00004c  4814              LDR      r0,|L2.160|
00004e  f7fffffe          BL       GUI_ClrArea
;;;73     	GUI_DispStr(&(Label[G_designer]),"设计者:宋健");
000052  a114              ADR      r1,|L2.164|
000054  4812              LDR      r0,|L2.160|
000056  f7fffffe          BL       GUI_DispStr
;;;74     	
;;;75     }
00005a  bd10              POP      {r4,pc}
;;;76     
                          ENDP

                  |L2.92|
                          DCD      Screen
                  |L2.96|
                          DCD      Label
                  |L2.100|
000064  bbb6d3ad          DCB      187,182,211,173,202,185,211,195,0
000068  cab9d3c3
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L2.112|
000070  b9c2c1a2          DCB      185,194,193,162,180,202,211,239,210,244,202,182,177,240,178
000074  b4cad3ef
000078  d2f4cab6
00007c  b1f0b2  
00007f  e2cad4cf          DCB      226,202,212,207,181,205,179,0
000083  b5cdb300
000087  00                DCB      0
                  |L2.136|
000088  c4a3b0e5          DCB      196,163,176,229,209,181,193,183,0
00008c  d1b5c1b7
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L2.148|
000094  d3efd2f4          DCB      211,239,210,244,202,182,177,240,0
000098  cab6b1f0
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L2.160|
                          DCD      Label+0x150
                  |L2.164|
0000a4  c9e8bcc6          DCB      201,232,188,198,213,223,":",203,206,189,161,0
0000a8  d5df3acb
0000ac  cebda100

                          AREA ||i.disp_mdl_prc||, CODE, READONLY, ALIGN=2

                  disp_mdl_prc PROC
;;;103    
;;;104    void disp_mdl_prc(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106    	u16 i;
;;;107    	
;;;108    	GUI_ClrArea(&Screen);
000002  480e              LDR      r0,|L3.60|
000004  f7fffffe          BL       GUI_ClrArea
;;;109    	
;;;110    	set_label_backclor(&(Label[G_cap]), BRED);
000008  f64f011f          MOV      r1,#0xf81f
00000c  480c              LDR      r0,|L3.64|
00000e  f7fffffe          BL       set_label_backclor
;;;111    	GUI_DispStr(&(Label[G_cap]),"开始训练");
000012  a10c              ADR      r1,|L3.68|
000014  480a              LDR      r0,|L3.64|
000016  f7fffffe          BL       GUI_DispStr
;;;112    	
;;;113    	for(i=G_comm_fst;i<=G_comm_lst;i++)
00001a  2405              MOVS     r4,#5
00001c  e004              B        |L3.40|
                  |L3.30|
;;;114    	{
;;;115    		disp_comm(i);
00001e  b2e0              UXTB     r0,r4
000020  f7fffffe          BL       disp_comm
000024  1c60              ADDS     r0,r4,#1              ;113
000026  b284              UXTH     r4,r0                 ;113
                  |L3.40|
000028  2c16              CMP      r4,#0x16              ;113
00002a  ddf8              BLE      |L3.30|
;;;116    	}
;;;117    	GUI_ClrArea(&(Label[G_return]));
00002c  4808              LDR      r0,|L3.80|
00002e  f7fffffe          BL       GUI_ClrArea
;;;118    	GUI_DispStr(&(Label[G_return]),"返回");
000032  a108              ADR      r1,|L3.84|
000034  4806              LDR      r0,|L3.80|
000036  f7fffffe          BL       GUI_DispStr
;;;119    }
00003a  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L3.60|
                          DCD      Screen
                  |L3.64|
                          DCD      Label+0x30
                  |L3.68|
000044  bfaacabc          DCB      191,170,202,188,209,181,193,183,0
000048  d1b5c1b7
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L3.80|
                          DCD      Label+0x144
                  |L3.84|
000054  b7b5bbd8          DCB      183,181,187,216,0
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.disp_recg||, CODE, READONLY, ALIGN=2

                  disp_recg PROC
;;;297    
;;;298    void disp_recg(void)
000000  b510              PUSH     {r4,lr}
;;;299    {
;;;300    	GUI_ClrArea(&Screen);
000002  480f              LDR      r0,|L4.64|
000004  f7fffffe          BL       GUI_ClrArea
;;;301    	GUI_ClrArea(&(Label[G_cap]));
000008  480e              LDR      r0,|L4.68|
00000a  f7fffffe          BL       GUI_ClrArea
;;;302    	GUI_DispStr(&(Label[G_cap]),"语音识别");
00000e  a10e              ADR      r1,|L4.72|
000010  480c              LDR      r0,|L4.68|
000012  f7fffffe          BL       GUI_DispStr
;;;303    	
;;;304    	GUI_ClrArea(&(Label[G_ctrl]));
000016  480b              LDR      r0,|L4.68|
000018  30e4              ADDS     r0,r0,#0xe4
00001a  f7fffffe          BL       GUI_ClrArea
;;;305    	GUI_DispStr(&(Label[G_ctrl]),"开始");
00001e  a10d              ADR      r1,|L4.84|
000020  4808              LDR      r0,|L4.68|
000022  30e4              ADDS     r0,r0,#0xe4
000024  f7fffffe          BL       GUI_DispStr
;;;306    	GUI_ClrArea(&(Label[G_spk]));
000028  4806              LDR      r0,|L4.68|
00002a  30f0              ADDS     r0,r0,#0xf0
00002c  f7fffffe          BL       GUI_ClrArea
;;;307    	
;;;308    	GUI_ClrArea(&(Label[G_return]));
000030  480a              LDR      r0,|L4.92|
000032  f7fffffe          BL       GUI_ClrArea
;;;309    	GUI_DispStr(&(Label[G_return]),"返回");
000036  a10a              ADR      r1,|L4.96|
000038  4808              LDR      r0,|L4.92|
00003a  f7fffffe          BL       GUI_DispStr
;;;310    }
00003e  bd10              POP      {r4,pc}
;;;311    
                          ENDP

                  |L4.64|
                          DCD      Screen
                  |L4.68|
                          DCD      Label+0x30
                  |L4.72|
000048  d3efd2f4          DCB      211,239,210,244,202,182,177,240,0
00004c  cab6b1f0
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
                  |L4.84|
000054  bfaacabc          DCB      191,170,202,188,0
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L4.92|
                          DCD      Label+0x144
                  |L4.96|
000060  b7b5bbd8          DCB      183,181,187,216,0
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;363    
;;;364    int main(void)
000000  f7fffffe          BL       BSP_Init
;;;365    {
;;;366    	BSP_Init();
;;;367    	DBPLN("SYS Init OK!");
000004  a011              ADR      r0,|L5.76|
000006  f7fffffe          BL       USART1_printf_line
;;;368    	DBPLN("CPU Speed:%ld MHz", BSP_CPU_ClkFreq() / 1000000L);
00000a  f7fffffe          BL       BSP_CPU_ClkFreq
00000e  4913              LDR      r1,|L5.92|
000010  fbb0f4f1          UDIV     r4,r0,r1
000014  4621              MOV      r1,r4
000016  a012              ADR      r0,|L5.96|
000018  f7fffffe          BL       USART1_printf_line
;;;369    	
;;;370    	disp_home();
00001c  f7fffffe          BL       disp_home
;;;371    	
;;;372    	DBPLN("disp_home");
000020  a014              ADR      r0,|L5.116|
000022  f7fffffe          BL       USART1_printf_line
;;;373    	while(1)
000026  e00f              B        |L5.72|
                  |L5.40|
;;;374    	{
;;;375    		wait_touch();
000028  f7fffffe          BL       wait_touch
;;;376    		if(touch_area(&(Label[G_prc])))
00002c  4814              LDR      r0,|L5.128|
00002e  f7fffffe          BL       touch_area
000032  b110              CBZ      r0,|L5.58|
;;;377    		{
;;;378    			prc();
000034  f7fffffe          BL       prc
000038  e006              B        |L5.72|
                  |L5.58|
;;;379    		}
;;;380    		else if(touch_area(&(Label[G_recg])))
00003a  4811              LDR      r0,|L5.128|
00003c  300c              ADDS     r0,r0,#0xc
00003e  f7fffffe          BL       touch_area
000042  b108              CBZ      r0,|L5.72|
;;;381    		{
;;;382    			recg();
000044  f7fffffe          BL       recg
                  |L5.72|
000048  e7ee              B        |L5.40|
;;;383    		}
;;;384    	}
;;;385    }
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
00004c  53595320          DCB      "SYS Init OK!",0
000050  496e6974
000054  204f4b21
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L5.92|
                          DCD      0x000f4240
                  |L5.96|
000060  43505520          DCB      "CPU Speed:%ld MHz",0
000064  53706565
000068  643a256c
00006c  64204d48
000070  7a00    
000072  00                DCB      0
000073  00                DCB      0
                  |L5.116|
000074  64697370          DCB      "disp_home",0
000078  5f686f6d
00007c  6500    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L5.128|
                          DCD      Label+0x18

                          AREA ||i.prc||, CODE, READONLY, ALIGN=2

                  prc PROC
;;;139    
;;;140    void prc(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;141    {
;;;142    	u32 i;
;;;143    	u8	prc_start=0;
000004  2600              MOVS     r6,#0
;;;144    	u8	comm=G_comm_fst;
000006  2705              MOVS     r7,#5
;;;145    	u8 	prc_count=0;
000008  2400              MOVS     r4,#0
;;;146    	u32 addr;
;;;147    	//v_ftr_tag *sav_ftr;
;;;148    	
;;;149    	disp_mdl_prc();
00000a  f7fffffe          BL       disp_mdl_prc
;;;150    	set_comm_backclor(comm,sel_clor);
00000e  f64f011f          MOV      r1,#0xf81f
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       set_comm_backclor
;;;151    	
;;;152    	while(1)
000018  e0c2              B        |L6.416|
                  |L6.26|
;;;153    	{
;;;154    		wait_touch();
00001a  f7fffffe          BL       wait_touch
;;;155    		if(touch_area(&(Label[G_return])))
00001e  4861              LDR      r0,|L6.420|
000020  f7fffffe          BL       touch_area
000024  b178              CBZ      r0,|L6.70|
;;;156    		{
;;;157    			Label[G_cap].BackColor=GREEN;
000026  f44f61fc          MOV      r1,#0x7e0
00002a  485f              LDR      r0,|L6.424|
00002c  8701              STRH     r1,[r0,#0x38]
;;;158    			Label[comm].BackColor=dis_sel_clor;
00002e  f64f70e0          MOV      r0,#0xffe0
000032  eb070147          ADD      r1,r7,r7,LSL #1
000036  4a5c              LDR      r2,|L6.424|
000038  eb020181          ADD      r1,r2,r1,LSL #2
00003c  8108              STRH     r0,[r1,#8]
;;;159    			disp_home();
00003e  f7fffffe          BL       disp_home
;;;160    			return;
;;;161    		}
;;;162    		else if(touch_area(&(Label[G_cap])))
;;;163    		{
;;;164    			delay_ms(150);
;;;165    			if(prc_start==0)
;;;166    			{
;;;167    				GUI_ClrArea(&(Label[G_cap]));
;;;168    				GUI_DispStr(&(Label[G_cap]),"停止训练");
;;;169    				prc_start=1;
;;;170    				GUI_ClrArea(&(Label[G_ctrl]));
;;;171    				GUI_DispStr(&(Label[G_ctrl]),"开始");
;;;172    				GUI_ClrArea(&(Label[G_spk]));
;;;173    				
;;;174    				GUI_ClrArea(&(Label[G_count]));
;;;175    				GUI_DispStr(&(Label[G_count]),"已训练0次");
;;;176    			}
;;;177    			else
;;;178    			{
;;;179    				GUI_ClrArea(&(Label[G_cap]));
;;;180    				GUI_DispStr(&(Label[G_cap]),"开始训练");
;;;181    				prc_start=0;
;;;182    				prc_count=0;
;;;183    				
;;;184    				GUI_HideArea(&(Label[G_ctrl]));
;;;185    				GUI_HideArea(&(Label[G_spk]));
;;;186    				GUI_HideArea(&(Label[G_stus]));
;;;187    				GUI_HideArea(&(Label[G_count]));
;;;188    				
;;;189    			}
;;;190    		}
;;;191    		else if((touch_area(&(Label[G_ctrl])))&&(prc_start==1))
;;;192    		{
;;;193    			record();
;;;194    			
;;;195    			GUI_ClrArea(&(Label[G_ctrl]));
;;;196    			GUI_DispStr(&(Label[G_ctrl]),"提取中");
;;;197    			
;;;198    			addr=ftr_start_addr+(comm-G_comm_fst)*size_per_comm+prc_count*size_per_ftr;
;;;199    			if(save_mdl(VcBuf, addr)==save_ok)
;;;200    			{
;;;201    				prc_count++;
;;;202    				GUI_ClrArea(&(Label[G_count]));
;;;203    				GUI_printf(&(Label[G_count]),"已训练%d次",prc_count);
;;;204    				if(prc_count==ftr_per_comm)
;;;205    				{
;;;206    					prc_count=0;
;;;207    				}
;;;208    				GUI_ClrArea(&(Label[G_stus]));
;;;209    				GUI_DispStr(&(Label[G_stus]),"语音有效");
;;;210    				/*
;;;211    				sav_ftr=(v_ftr_tag *)addr;
;;;212    				USART1_printf("mask=%d ",sav_ftr->save_sign);
;;;213    				USART1_printf("frm_num=%d",sav_ftr->frm_num);
;;;214    				for(i=0;i<((sav_ftr->frm_num)*mfcc_num);i++)
;;;215    				{
;;;216    					USART1_printf("%d,",sav_ftr->mfcc_dat[i]);
;;;217    				}
;;;218    				*/
;;;219    			}
;;;220    			else
;;;221    			{
;;;222    				GUI_ClrArea(&(Label[G_stus]));
;;;223    				GUI_DispStr(&(Label[G_stus]),"语音无效");
;;;224    			}
;;;225    
;;;226    			GUI_ClrArea(&(Label[G_ctrl]));
;;;227    			GUI_DispStr(&(Label[G_ctrl]),"开始");
;;;228    		}
;;;229    		else if(prc_start==0)
;;;230    		{
;;;231    			for(i=G_comm_fst;i<=G_comm_lst;i++)
;;;232    			{
;;;233    				if(touch_area(&(Label[i])))
;;;234    				{
;;;235    					set_comm_backclor(comm,dis_sel_clor);
;;;236    					comm=i;
;;;237    					set_comm_backclor(comm,sel_clor);
;;;238    					break;
;;;239    				}
;;;240    			}
;;;241    		}
;;;242    		
;;;243    	}
;;;244    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L6.70|
000046  4858              LDR      r0,|L6.424|
000048  3030              ADDS     r0,r0,#0x30           ;162
00004a  f7fffffe          BL       touch_area
00004e  b3f0              CBZ      r0,|L6.206|
000050  2096              MOVS     r0,#0x96              ;164
000052  f7fffffe          BL       delay_ms
000056  bb06              CBNZ     r6,|L6.154|
000058  4853              LDR      r0,|L6.424|
00005a  3030              ADDS     r0,r0,#0x30           ;167
00005c  f7fffffe          BL       GUI_ClrArea
000060  a152              ADR      r1,|L6.428|
000062  4851              LDR      r0,|L6.424|
000064  3030              ADDS     r0,r0,#0x30           ;168
000066  f7fffffe          BL       GUI_DispStr
00006a  2601              MOVS     r6,#1                 ;169
00006c  484d              LDR      r0,|L6.420|
00006e  3830              SUBS     r0,r0,#0x30           ;170
000070  f7fffffe          BL       GUI_ClrArea
000074  a150              ADR      r1,|L6.440|
000076  484b              LDR      r0,|L6.420|
000078  3830              SUBS     r0,r0,#0x30           ;171
00007a  f7fffffe          BL       GUI_DispStr
00007e  4849              LDR      r0,|L6.420|
000080  3824              SUBS     r0,r0,#0x24           ;172
000082  f7fffffe          BL       GUI_ClrArea
000086  4847              LDR      r0,|L6.420|
000088  380c              SUBS     r0,r0,#0xc            ;174
00008a  f7fffffe          BL       GUI_ClrArea
00008e  a14c              ADR      r1,|L6.448|
000090  4844              LDR      r0,|L6.420|
000092  380c              SUBS     r0,r0,#0xc            ;175
000094  f7fffffe          BL       GUI_DispStr
000098  e082              B        |L6.416|
                  |L6.154|
00009a  4843              LDR      r0,|L6.424|
00009c  3030              ADDS     r0,r0,#0x30           ;179
00009e  f7fffffe          BL       GUI_ClrArea
0000a2  a14a              ADR      r1,|L6.460|
0000a4  4840              LDR      r0,|L6.424|
0000a6  3030              ADDS     r0,r0,#0x30           ;180
0000a8  f7fffffe          BL       GUI_DispStr
0000ac  2600              MOVS     r6,#0                 ;181
0000ae  2400              MOVS     r4,#0                 ;182
0000b0  483c              LDR      r0,|L6.420|
0000b2  3830              SUBS     r0,r0,#0x30           ;184
0000b4  f7fffffe          BL       GUI_HideArea
0000b8  483a              LDR      r0,|L6.420|
0000ba  3824              SUBS     r0,r0,#0x24           ;185
0000bc  f7fffffe          BL       GUI_HideArea
0000c0  4838              LDR      r0,|L6.420|
0000c2  3818              SUBS     r0,r0,#0x18           ;186
0000c4  f7fffffe          BL       GUI_HideArea
0000c8  4836              LDR      r0,|L6.420|
0000ca  380c              SUBS     r0,r0,#0xc            ;187
0000cc  e000              B        |L6.208|
                  |L6.206|
0000ce  e002              B        |L6.214|
                  |L6.208|
0000d0  f7fffffe          BL       GUI_HideArea
0000d4  e064              B        |L6.416|
                  |L6.214|
0000d6  4833              LDR      r0,|L6.420|
0000d8  3830              SUBS     r0,r0,#0x30           ;191
0000da  f7fffffe          BL       touch_area
0000de  b380              CBZ      r0,|L6.322|
0000e0  2e01              CMP      r6,#1                 ;191
0000e2  d142              BNE      |L6.362|
0000e4  f7fffffe          BL       record
0000e8  482e              LDR      r0,|L6.420|
0000ea  3830              SUBS     r0,r0,#0x30           ;195
0000ec  f7fffffe          BL       GUI_ClrArea
0000f0  a139              ADR      r1,|L6.472|
0000f2  482c              LDR      r0,|L6.420|
0000f4  3830              SUBS     r0,r0,#0x30           ;196
0000f6  f7fffffe          BL       GUI_DispStr
0000fa  1f78              SUBS     r0,r7,#5              ;198
0000fc  4938              LDR      r1,|L6.480|
0000fe  eb013080          ADD      r0,r1,r0,LSL #14      ;198
000102  eb003804          ADD      r8,r0,r4,LSL #12      ;198
000106  4641              MOV      r1,r8                 ;199
000108  4836              LDR      r0,|L6.484|
00010a  f7fffffe          BL       save_mdl
00010e  b9c8              CBNZ     r0,|L6.324|
000110  1c60              ADDS     r0,r4,#1              ;201
000112  b2c4              UXTB     r4,r0                 ;201
000114  4823              LDR      r0,|L6.420|
000116  380c              SUBS     r0,r0,#0xc            ;202
000118  f7fffffe          BL       GUI_ClrArea
00011c  4622              MOV      r2,r4                 ;203
00011e  a132              ADR      r1,|L6.488|
000120  4820              LDR      r0,|L6.420|
000122  380c              SUBS     r0,r0,#0xc            ;203
000124  f7fffffe          BL       GUI_printf
000128  2c04              CMP      r4,#4                 ;204
00012a  d100              BNE      |L6.302|
00012c  2400              MOVS     r4,#0                 ;206
                  |L6.302|
00012e  481d              LDR      r0,|L6.420|
000130  3818              SUBS     r0,r0,#0x18           ;208
000132  f7fffffe          BL       GUI_ClrArea
000136  a12f              ADR      r1,|L6.500|
000138  481a              LDR      r0,|L6.420|
00013a  3818              SUBS     r0,r0,#0x18           ;209
00013c  f7fffffe          BL       GUI_DispStr
000140  e009              B        |L6.342|
                  |L6.322|
000142  e012              B        |L6.362|
                  |L6.324|
000144  4817              LDR      r0,|L6.420|
000146  3818              SUBS     r0,r0,#0x18           ;222
000148  f7fffffe          BL       GUI_ClrArea
00014c  a12c              ADR      r1,|L6.512|
00014e  4815              LDR      r0,|L6.420|
000150  3818              SUBS     r0,r0,#0x18           ;223
000152  f7fffffe          BL       GUI_DispStr
                  |L6.342|
000156  4813              LDR      r0,|L6.420|
000158  3830              SUBS     r0,r0,#0x30           ;226
00015a  f7fffffe          BL       GUI_ClrArea
00015e  a116              ADR      r1,|L6.440|
000160  4810              LDR      r0,|L6.420|
000162  3830              SUBS     r0,r0,#0x30           ;227
000164  f7fffffe          BL       GUI_DispStr
000168  e01a              B        |L6.416|
                  |L6.362|
00016a  b9ce              CBNZ     r6,|L6.416|
00016c  2505              MOVS     r5,#5                 ;231
00016e  e014              B        |L6.410|
                  |L6.368|
000170  eb050145          ADD      r1,r5,r5,LSL #1       ;233
000174  4a0c              LDR      r2,|L6.424|
000176  eb020081          ADD      r0,r2,r1,LSL #2       ;233
00017a  f7fffffe          BL       touch_area
00017e  b158              CBZ      r0,|L6.408|
000180  f64f71e0          MOV      r1,#0xffe0            ;235
000184  4638              MOV      r0,r7                 ;235
000186  f7fffffe          BL       set_comm_backclor
00018a  b2ef              UXTB     r7,r5                 ;236
00018c  f64f011f          MOV      r1,#0xf81f            ;237
000190  4638              MOV      r0,r7                 ;237
000192  f7fffffe          BL       set_comm_backclor
000196  e002              B        |L6.414|
                  |L6.408|
000198  1c6d              ADDS     r5,r5,#1              ;231
                  |L6.410|
00019a  2d16              CMP      r5,#0x16              ;231
00019c  d9e8              BLS      |L6.368|
                  |L6.414|
00019e  bf00              NOP                            ;238
                  |L6.416|
0001a0  e73b              B        |L6.26|
;;;245    
                          ENDP

0001a2  0000              DCW      0x0000
                  |L6.420|
                          DCD      Label+0x144
                  |L6.424|
                          DCD      Label
                  |L6.428|
0001ac  cda3d6b9          DCB      205,163,214,185,209,181,193,183,0
0001b0  d1b5c1b7
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L6.440|
0001b8  bfaacabc          DCB      191,170,202,188,0
0001bc  00      
0001bd  00                DCB      0
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L6.448|
0001c0  d2d1d1b5          DCB      210,209,209,181,193,183,"0",180,206,0
0001c4  c1b730b4
0001c8  ce00    
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L6.460|
0001cc  bfaacabc          DCB      191,170,202,188,209,181,193,183,0
0001d0  d1b5c1b7
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L6.472|
0001d8  cce1c8a1          DCB      204,225,200,161,214,208,0
0001dc  d6d000  
0001df  00                DCB      0
                  |L6.480|
                          DCD      0x08030000
                  |L6.484|
                          DCD      VcBuf
                  |L6.488|
0001e8  d2d1d1b5          DCB      210,209,209,181,193,183,"%d",180,206,0
0001ec  c1b72564
0001f0  b4ce00  
0001f3  00                DCB      0
                  |L6.500|
0001f4  d3efd2f4          DCB      211,239,210,244,211,208,208,167,0
0001f8  d3d0d0a7
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L6.512|
000200  d3efd2f4          DCB      211,239,210,244,206,222,208,167,0
000204  ceded0a7
000208  00      
000209  00                DCB      0
00020a  00                DCB      0
00020b  00                DCB      0

                          AREA ||i.recg||, CODE, READONLY, ALIGN=2

                  recg PROC
;;;312    
;;;313    void recg(void)
000000  b538              PUSH     {r3-r5,lr}
;;;314    {
;;;315    	u8 *res;
;;;316    	u32 dis;
;;;317    	u32 recg_count=0;
000002  2400              MOVS     r4,#0
;;;318    	
;;;319    	disp_recg();
000004  f7fffffe          BL       disp_recg
;;;320    	
;;;321    	while(1)
000008  e064              B        |L7.212|
                  |L7.10|
;;;322    	{
;;;323    		wait_touch();
00000a  f7fffffe          BL       wait_touch
;;;324    		if(touch_area(&(Label[G_return])))
00000e  4832              LDR      r0,|L7.216|
000010  f7fffffe          BL       touch_area
000014  b110              CBZ      r0,|L7.28|
;;;325    		{
;;;326    			disp_home();
000016  f7fffffe          BL       disp_home
;;;327    			return;
;;;328    		}
;;;329    		else if(touch_area(&(Label[G_ctrl])))
;;;330    		{
;;;331    			record();
;;;332    			
;;;333    			GUI_ClrArea(&(Label[G_ctrl]));
;;;334    			GUI_DispStr(&(Label[G_ctrl]),"识别中");
;;;335    			
;;;336    			res=spch_recg(VcBuf, &dis);
;;;337    			if(dis!=dis_err)
;;;338    			{
;;;339    				recg_count++;
;;;340    				GUI_ClrArea(&(Label[G_recg_res]));
;;;341    				GUI_printf(&(Label[G_recg_res]),"识别结果:%s",(s8 *)res);
;;;342    				GUI_ClrArea(&(Label[G_mtch_dis]));
;;;343    				GUI_printf(&(Label[G_mtch_dis]),"匹配距离:%d",dis);
;;;344    				GUI_ClrArea(&(Label[G_stus]));
;;;345    				GUI_DispStr(&(Label[G_stus]),"语音有效");
;;;346    				GUI_ClrArea(&(Label[G_count]));
;;;347    				GUI_printf(&(Label[G_count]),"已识别%d次",recg_count);
;;;348    			}
;;;349    			else
;;;350    			{
;;;351    				GUI_HideArea(&(Label[G_recg_res]));
;;;352    				GUI_HideArea(&(Label[G_mtch_dis]));
;;;353    				
;;;354    				GUI_ClrArea(&(Label[G_stus]));
;;;355    				GUI_DispStr(&(Label[G_stus]),"语音无效");
;;;356    			}
;;;357    			GUI_ClrArea(&(Label[G_ctrl]));
;;;358    			GUI_DispStr(&(Label[G_ctrl]),"开始");
;;;359    		}
;;;360    		
;;;361    	}
;;;362    }
00001a  bd38              POP      {r3-r5,pc}
                  |L7.28|
00001c  482e              LDR      r0,|L7.216|
00001e  3830              SUBS     r0,r0,#0x30           ;329
000020  f7fffffe          BL       touch_area
000024  b3d8              CBZ      r0,|L7.158|
000026  f7fffffe          BL       record
00002a  482b              LDR      r0,|L7.216|
00002c  3830              SUBS     r0,r0,#0x30           ;333
00002e  f7fffffe          BL       GUI_ClrArea
000032  a12a              ADR      r1,|L7.220|
000034  4828              LDR      r0,|L7.216|
000036  3830              SUBS     r0,r0,#0x30           ;334
000038  f7fffffe          BL       GUI_DispStr
00003c  4669              MOV      r1,sp                 ;336
00003e  4829              LDR      r0,|L7.228|
000040  f7fffffe          BL       spch_recg
000044  4605              MOV      r5,r0                 ;336
000046  9800              LDR      r0,[sp,#0]            ;337
000048  1c40              ADDS     r0,r0,#1              ;337
00004a  d029              BEQ      |L7.160|
00004c  1c64              ADDS     r4,r4,#1              ;339
00004e  4822              LDR      r0,|L7.216|
000050  3018              ADDS     r0,r0,#0x18           ;340
000052  f7fffffe          BL       GUI_ClrArea
000056  462a              MOV      r2,r5                 ;341
000058  a123              ADR      r1,|L7.232|
00005a  481f              LDR      r0,|L7.216|
00005c  3018              ADDS     r0,r0,#0x18           ;341
00005e  f7fffffe          BL       GUI_printf
000062  481d              LDR      r0,|L7.216|
000064  3024              ADDS     r0,r0,#0x24           ;342
000066  f7fffffe          BL       GUI_ClrArea
00006a  a122              ADR      r1,|L7.244|
00006c  481a              LDR      r0,|L7.216|
00006e  3024              ADDS     r0,r0,#0x24           ;343
000070  9a00              LDR      r2,[sp,#0]            ;343
000072  f7fffffe          BL       GUI_printf
000076  4818              LDR      r0,|L7.216|
000078  3818              SUBS     r0,r0,#0x18           ;344
00007a  f7fffffe          BL       GUI_ClrArea
00007e  a120              ADR      r1,|L7.256|
000080  4815              LDR      r0,|L7.216|
000082  3818              SUBS     r0,r0,#0x18           ;345
000084  f7fffffe          BL       GUI_DispStr
000088  4813              LDR      r0,|L7.216|
00008a  380c              SUBS     r0,r0,#0xc            ;346
00008c  f7fffffe          BL       GUI_ClrArea
000090  4622              MOV      r2,r4                 ;347
000092  a11e              ADR      r1,|L7.268|
000094  4810              LDR      r0,|L7.216|
000096  380c              SUBS     r0,r0,#0xc            ;347
000098  f7fffffe          BL       GUI_printf
00009c  e011              B        |L7.194|
                  |L7.158|
00009e  e019              B        |L7.212|
                  |L7.160|
0000a0  480d              LDR      r0,|L7.216|
0000a2  3018              ADDS     r0,r0,#0x18           ;351
0000a4  f7fffffe          BL       GUI_HideArea
0000a8  480b              LDR      r0,|L7.216|
0000aa  3024              ADDS     r0,r0,#0x24           ;352
0000ac  f7fffffe          BL       GUI_HideArea
0000b0  4809              LDR      r0,|L7.216|
0000b2  3818              SUBS     r0,r0,#0x18           ;354
0000b4  f7fffffe          BL       GUI_ClrArea
0000b8  a117              ADR      r1,|L7.280|
0000ba  4807              LDR      r0,|L7.216|
0000bc  3818              SUBS     r0,r0,#0x18           ;355
0000be  f7fffffe          BL       GUI_DispStr
                  |L7.194|
0000c2  4805              LDR      r0,|L7.216|
0000c4  3830              SUBS     r0,r0,#0x30           ;357
0000c6  f7fffffe          BL       GUI_ClrArea
0000ca  a116              ADR      r1,|L7.292|
0000cc  4802              LDR      r0,|L7.216|
0000ce  3830              SUBS     r0,r0,#0x30           ;358
0000d0  f7fffffe          BL       GUI_DispStr
                  |L7.212|
0000d4  e799              B        |L7.10|
;;;363    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L7.216|
                          DCD      Label+0x144
                  |L7.220|
0000dc  cab6b1f0          DCB      202,182,177,240,214,208,0
0000e0  d6d000  
0000e3  00                DCB      0
                  |L7.228|
                          DCD      VcBuf
                  |L7.232|
0000e8  cab6b1f0          DCB      202,182,177,240,189,225,185,251,":%s",0
0000ec  bde1b9fb
0000f0  3a257300
                  |L7.244|
0000f4  c6a5c5e4          DCB      198,165,197,228,190,224,192,235,":%d",0
0000f8  bee0c0eb
0000fc  3a256400
                  |L7.256|
000100  d3efd2f4          DCB      211,239,210,244,211,208,208,167,0
000104  d3d0d0a7
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L7.268|
00010c  d2d1cab6          DCB      210,209,202,182,177,240,"%d",180,206,0
000110  b1f02564
000114  b4ce00  
000117  00                DCB      0
                  |L7.280|
000118  d3efd2f4          DCB      211,239,210,244,206,222,208,167,0
00011c  ceded0a7
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
                  |L7.292|
000124  bfaacabc          DCB      191,170,202,188,0
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0

                          AREA ||i.record||, CODE, READONLY, ALIGN=2

                  record PROC
;;;76     
;;;77     void record(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79     	delay_ms(atap_len_t);	//延时，避免点击屏幕发出的噪声
000002  f44f7096          MOV      r0,#0x12c
000006  f7fffffe          BL       delay_ms
;;;80     	
;;;81     	TIM_Cmd(TIM1, ENABLE); 	//开启定时器，开始信号采集
00000a  2101              MOVS     r1,#1
00000c  4813              LDR      r0,|L8.92|
00000e  f7fffffe          BL       TIM_Cmd
;;;82     	
;;;83     	GUI_ClrArea(&(Label[G_ctrl]));					//显示操作提示
000012  4813              LDR      r0,|L8.96|
000014  f7fffffe          BL       GUI_ClrArea
;;;84     	GUI_DispStr(&(Label[G_ctrl]),"录音中");		
000018  a112              ADR      r1,|L8.100|
00001a  4811              LDR      r0,|L8.96|
00001c  f7fffffe          BL       GUI_DispStr
;;;85     	
;;;86     	//开始说话之前，录制一小段背景声音，用以实现背景噪声自适应
;;;87     	delay_ms(atap_len_t);		
000020  f44f7096          MOV      r0,#0x12c
000024  f7fffffe          BL       delay_ms
;;;88     	//提示开始说话
;;;89     	set_label_backclor(&(Label[G_spk]), spk_clor);
000028  f64f011f          MOV      r1,#0xf81f
00002c  480c              LDR      r0,|L8.96|
00002e  300c              ADDS     r0,r0,#0xc
000030  f7fffffe          BL       set_label_backclor
;;;90     	
;;;91     	//等待缓冲区数据更新完毕
;;;92     	while(DMA_GetFlagStatus(DMA1_FLAG_TC1)==RESET);
000034  bf00              NOP      
                  |L8.54|
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       DMA_GetFlagStatus
00003c  2800              CMP      r0,#0
00003e  d0fa              BEQ      |L8.54|
;;;93     	
;;;94     	
;;;95     	//数据采集结束，关闭定时器
;;;96     	TIM_Cmd(TIM1, DISABLE); 
000040  2100              MOVS     r1,#0
000042  4806              LDR      r0,|L8.92|
000044  f7fffffe          BL       TIM_Cmd
;;;97     	//清数据传输完成标志，以备下次使用
;;;98     	DMA_ClearFlag(DMA1_FLAG_TC1);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       DMA_ClearFlag
;;;99     	
;;;100    	//提示开始处理采集到的数据
;;;101    	set_label_backclor(&(Label[G_spk]), prc_clor);
00004e  f64f71e0          MOV      r1,#0xffe0
000052  4803              LDR      r0,|L8.96|
000054  300c              ADDS     r0,r0,#0xc
000056  f7fffffe          BL       set_label_backclor
;;;102    }
00005a  bd10              POP      {r4,pc}
;;;103    
                          ENDP

                  |L8.92|
                          DCD      0x40012c00
                  |L8.96|
                          DCD      Label+0x114
                  |L8.100|
000064  c2bcd2f4          DCB      194,188,210,244,214,208,0
000068  d6d000  
00006b  00                DCB      0

                          AREA ||i.save_mdl||, CODE, READONLY, ALIGN=2

                  save_mdl PROC
;;;120    
;;;121    u8 save_mdl(u16 *v_dat, u32 addr)
000000  b570              PUSH     {r4-r6,lr}
;;;122    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;123    	noise_atap(v_dat,atap_len,&atap_arg);
000006  4a10              LDR      r2,|L9.72|
000008  f44f6116          MOV      r1,#0x960
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       noise_atap
;;;124    	
;;;125    	VAD(v_dat, VcBuf_Len, valid_voice, &atap_arg);
000012  4b0d              LDR      r3,|L9.72|
000014  4a0d              LDR      r2,|L9.76|
000016  f44f517a          MOV      r1,#0x3e80
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       VAD
;;;126    	if(valid_voice[0].end==((void *)0))
000020  480a              LDR      r0,|L9.76|
000022  6840              LDR      r0,[r0,#4]  ; valid_voice
000024  b908              CBNZ     r0,|L9.42|
;;;127    	{
;;;128    		return VAD_fail;
000026  2001              MOVS     r0,#1
                  |L9.40|
;;;129    	}
;;;130    	
;;;131    	get_mfcc(&(valid_voice[0]),&ftr,&atap_arg);
;;;132    	if(ftr.frm_num==0)
;;;133    	{
;;;134    		return MFCC_fail;
;;;135    	}
;;;136    	
;;;137    	return save_ftr_mdl(&ftr, addr);
;;;138    }
000028  bd70              POP      {r4-r6,pc}
                  |L9.42|
00002a  4a07              LDR      r2,|L9.72|
00002c  4908              LDR      r1,|L9.80|
00002e  4807              LDR      r0,|L9.76|
000030  f7fffffe          BL       get_mfcc
000034  4806              LDR      r0,|L9.80|
000036  8840              LDRH     r0,[r0,#2]            ;132  ; ftr
000038  b908              CBNZ     r0,|L9.62|
00003a  2002              MOVS     r0,#2                 ;134
00003c  e7f4              B        |L9.40|
                  |L9.62|
00003e  4629              MOV      r1,r5                 ;137
000040  4803              LDR      r0,|L9.80|
000042  f7fffffe          BL       save_ftr_mdl
000046  e7ef              B        |L9.40|
;;;139    
                          ENDP

                  |L9.72|
                          DCD      atap_arg
                  |L9.76|
                          DCD      valid_voice
                  |L9.80|
                          DCD      ||ftr||

                          AREA ||i.set_comm_backclor||, CODE, READONLY, ALIGN=2

                  set_comm_backclor PROC
;;;48     
;;;49     void set_comm_backclor(u8 comm, u16 backclor)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;51     	Label[comm].BackColor=backclor;
000006  eb040044          ADD      r0,r4,r4,LSL #1
00000a  4904              LDR      r1,|L10.28|
00000c  eb010080          ADD      r0,r1,r0,LSL #2
000010  8105              STRH     r5,[r0,#8]
;;;52     	disp_comm(comm);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       disp_comm
;;;53     }
000018  bd70              POP      {r4-r6,pc}
;;;54     
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      Label

                          AREA ||i.set_label_backclor||, CODE, READONLY, ALIGN=1

                  set_label_backclor PROC
;;;54     
;;;55     void set_label_backclor(GUI_Area *Label, u16 backclor)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;57     	Label->BackColor=backclor;
000006  8125              STRH     r5,[r4,#8]
;;;58     	GUI_ClrArea(Label);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GUI_ClrArea
;;;59     }
00000e  bd70              POP      {r4-r6,pc}
;;;60     
                          ENDP


                          AREA ||i.spch_recg||, CODE, READONLY, ALIGN=2

                  spch_recg PROC
;;;248    
;;;249    u8* spch_recg(u16 *v_dat, u32 *mtch_dis)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;250    {
000004  4683              MOV      r11,r0
000006  460e              MOV      r6,r1
;;;251    	u16 i;
;;;252    	u32 ftr_addr;
;;;253    	u32 min_dis;
;;;254    	u16 min_comm;
;;;255    	u32 cur_dis;
;;;256    	v_ftr_tag *ftr_mdl;
;;;257    	
;;;258    	noise_atap(v_dat, atap_len, &atap_arg);
000008  4a2a              LDR      r2,|L12.180|
00000a  f44f6116          MOV      r1,#0x960
00000e  4658              MOV      r0,r11
000010  f7fffffe          BL       noise_atap
;;;259    	
;;;260    	VAD(v_dat, VcBuf_Len, valid_voice, &atap_arg);
000014  4b27              LDR      r3,|L12.180|
000016  4a28              LDR      r2,|L12.184|
000018  f44f517a          MOV      r1,#0x3e80
00001c  4658              MOV      r0,r11
00001e  f7fffffe          BL       VAD
;;;261    	if(valid_voice[0].end==((void *)0))
000022  4825              LDR      r0,|L12.184|
000024  6840              LDR      r0,[r0,#4]  ; valid_voice
000026  b940              CBNZ     r0,|L12.58|
;;;262    	{
;;;263    		*mtch_dis=dis_err;
000028  f04f30ff          MOV      r0,#0xffffffff
00002c  6030              STR      r0,[r6,#0]
;;;264    		USART1_printf("VAD fail ");
00002e  a023              ADR      r0,|L12.188|
000030  f7fffffe          BL       USART1_printf
;;;265    		return (void *)0;
000034  2000              MOVS     r0,#0
                  |L12.54|
;;;266    	}
;;;267    	
;;;268    	get_mfcc(&(valid_voice[0]),&ftr,&atap_arg);
;;;269    	if(ftr.frm_num==0)
;;;270    	{
;;;271    		*mtch_dis=dis_err;
;;;272    		USART1_printf("MFCC fail ");
;;;273    		return (void *)0;
;;;274    	}
;;;275    	
;;;276    	i=0;
;;;277    	min_comm=0;
;;;278    	min_dis=dis_max;
;;;279    	for(ftr_addr=ftr_start_addr; ftr_addr<ftr_end_addr; ftr_addr+=size_per_ftr)
;;;280    	{
;;;281    		ftr_mdl=(v_ftr_tag*)ftr_addr;
;;;282    		//USART1_printf("save_mask=%d ",ftr_mdl->save_sign);
;;;283    		cur_dis=((ftr_mdl->save_sign)==save_mask)?dtw(&ftr,ftr_mdl):dis_err;
;;;284    		//USART1_printf("cur_dis=%d ",cur_dis);
;;;285    		if(cur_dis<min_dis)
;;;286    		{
;;;287    			min_dis=cur_dis;
;;;288    			min_comm=i;
;;;289    		}
;;;290    		i++;
;;;291    	}
;;;292    	min_comm/=ftr_per_comm;
;;;293    	//USART1_printf("recg end ");
;;;294    	*mtch_dis=min_dis;
;;;295    	return (commstr[min_comm].str);
;;;296    }
000036  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.58|
00003a  4a1e              LDR      r2,|L12.180|
00003c  4922              LDR      r1,|L12.200|
00003e  481e              LDR      r0,|L12.184|
000040  f7fffffe          BL       get_mfcc
000044  4820              LDR      r0,|L12.200|
000046  8840              LDRH     r0,[r0,#2]            ;269  ; ftr
000048  b938              CBNZ     r0,|L12.90|
00004a  f04f30ff          MOV      r0,#0xffffffff        ;271
00004e  6030              STR      r0,[r6,#0]            ;271
000050  a01e              ADR      r0,|L12.204|
000052  f7fffffe          BL       USART1_printf
000056  2000              MOVS     r0,#0                 ;273
000058  e7ed              B        |L12.54|
                  |L12.90|
00005a  2700              MOVS     r7,#0                 ;276
00005c  2500              MOVS     r5,#0                 ;277
00005e  f04f38ff          MOV      r8,#0xffffffff        ;278
000062  4c1d              LDR      r4,|L12.216|
000064  e017              B        |L12.150|
                  |L12.102|
000066  46a1              MOV      r9,r4                 ;281
000068  464c              MOV      r4,r9                 ;283
00006a  f8b90000          LDRH     r0,[r9,#0]            ;283
00006e  f5a05140          SUB      r1,r0,#0x3000         ;283
000072  3939              SUBS     r1,r1,#0x39           ;283
000074  d104              BNE      |L12.128|
000076  4649              MOV      r1,r9                 ;283
000078  4813              LDR      r0,|L12.200|
00007a  f7fffffe          BL       ||dtw||
00007e  e001              B        |L12.132|
                  |L12.128|
000080  f04f30ff          MOV      r0,#0xffffffff        ;283
                  |L12.132|
000084  4682              MOV      r10,r0                ;283
000086  45c2              CMP      r10,r8                ;285
000088  d201              BCS      |L12.142|
00008a  46d0              MOV      r8,r10                ;287
00008c  463d              MOV      r5,r7                 ;288
                  |L12.142|
00008e  1c78              ADDS     r0,r7,#1              ;290
000090  b287              UXTH     r7,r0                 ;290
000092  f5045480          ADD      r4,r4,#0x1000         ;279
                  |L12.150|
000096  4811              LDR      r0,|L12.220|
000098  4284              CMP      r4,r0                 ;279
00009a  d3e4              BCC      |L12.102|
00009c  4628              MOV      r0,r5                 ;292
00009e  17e9              ASRS     r1,r5,#31             ;292
0000a0  eb057191          ADD      r1,r5,r1,LSR #30      ;292
0000a4  108d              ASRS     r5,r1,#2              ;292
0000a6  f8c68000          STR      r8,[r6,#0]            ;294
0000aa  eb050045          ADD      r0,r5,r5,LSL #1       ;295
0000ae  490c              LDR      r1,|L12.224|
0000b0  4408              ADD      r0,r0,r1              ;295
0000b2  e7c0              B        |L12.54|
;;;297    
                          ENDP

                  |L12.180|
                          DCD      atap_arg
                  |L12.184|
                          DCD      valid_voice
                  |L12.188|
0000bc  56414420          DCB      "VAD fail ",0
0000c0  6661696c
0000c4  2000    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L12.200|
                          DCD      ||ftr||
                  |L12.204|
0000cc  4d464343          DCB      "MFCC fail ",0
0000d0  20666169
0000d4  6c2000  
0000d7  00                DCB      0
                  |L12.216|
                          DCD      0x08030000
                  |L12.220|
                          DCD      0x08080000
                  |L12.224|
                          DCD      commstr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  VcBuf
                          %        32000
                  atap_arg
                          %        12
                  valid_voice
                          %        24
                  ||ftr||
                          %        2860

                          AREA ||.data||, DATA, ALIGN=0

                  commstr
000000  30200031          DCB      0x30,0x20,0x00,0x31
000004  20003220          DCB      0x20,0x00,0x32,0x20
000008  00332000          DCB      0x00,0x33,0x20,0x00
00000c  34200035          DCB      0x34,0x20,0x00,0x35
000010  20003620          DCB      0x20,0x00,0x36,0x20
000014  00372000          DCB      0x00,0x37,0x20,0x00
000018  38200039          DCB      0x38,0x20,0x00,0x39
00001c  2000c9cf          DCB      0x20,0x00,0xc9,0xcf
000020  00cfc200          DCB      0x00,0xcf,0xc2,0x00
000024  c7b000ba          DCB      0xc7,0xb0,0x00,0xba
000028  f300d7f3          DCB      0xf3,0x00,0xd7,0xf3
00002c  00d3d200          DCB      0x00,0xd3,0xd2,0x00
000030  b4f300d0          DCB      0xb4,0xf3,0x00,0xd0
000034  a100              DCB      0xa1,0x00

                  __ARM_use_no_argv EQU 0
