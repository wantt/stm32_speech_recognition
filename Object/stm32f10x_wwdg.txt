; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\stm32f10x_wwdg.o --depend=.\Object\stm32f10x_wwdg.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\stm32f10x_wwdg.crf Src\StdPeriph_Driver\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;205      */
;;;206    void WWDG_ClearFlag(void)
000000  2000              MOVS     r0,#0
;;;207    {
;;;208      WWDG->SR = (uint32_t)RESET;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]
;;;209    }
000006  4770              BX       lr
;;;210    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;100      */
;;;101    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;102    {
;;;103      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105    }
000014  bd10              POP      {r4,pc}
;;;106    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;183      */
;;;184    void WWDG_Enable(uint8_t Counter)
000000  f0400180          ORR      r1,r0,#0x80
;;;185    {
;;;186      /* Check the parameters */
;;;187      assert_param(IS_WWDG_COUNTER(Counter));
;;;188      WWDG->CR = CR_WDGA_Set | Counter;
000004  4a01              LDR      r2,|L3.12|
000006  6011              STR      r1,[r2,#0]
;;;189    }
000008  4770              BX       lr
;;;190    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;157      */
;;;158    void WWDG_EnableIT(void)
000000  2001              MOVS     r0,#1
;;;159    {
;;;160      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L4.8|
000004  6008              STR      r0,[r1,#0]
;;;161    }
000006  4770              BX       lr
;;;162    
                          ENDP

                  |L4.8|
                          DCD      0x420580a4

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;195      */
;;;196    FlagStatus WWDG_GetFlagStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;197    {
;;;198      return (FlagStatus)(WWDG->SR);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;199    }
000006  4770              BX       lr
;;;200    
                          ENDP

                  |L5.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;168      */
;;;169    void WWDG_SetCounter(uint8_t Counter)
000000  f000017f          AND      r1,r0,#0x7f
;;;170    {
;;;171      /* Check the parameters */
;;;172      assert_param(IS_WWDG_COUNTER(Counter));
;;;173      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;174         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;175      WWDG->CR = Counter & BIT_Mask;
000004  4a01              LDR      r2,|L6.12|
000006  6011              STR      r1,[r2,#0]
;;;176    }
000008  4770              BX       lr
;;;177    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;116      */
;;;117    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  2100              MOVS     r1,#0
;;;118    {
;;;119      uint32_t tmpreg = 0;
;;;120      /* Check the parameters */
;;;121      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;122      /* Clear WDGTB[1:0] bits */
;;;123      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000002  4a05              LDR      r2,|L7.24|
000004  6812              LDR      r2,[r2,#0]
000006  f42271c0          BIC      r1,r2,#0x180
;;;124      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;125      tmpreg |= WWDG_Prescaler;
00000a  ea410100          ORR      r1,r1,r0
;;;126      /* Store the new value */
;;;127      WWDG->CFR = tmpreg;
00000e  4a03              LDR      r2,|L7.28|
000010  f8c21c04          STR      r1,[r2,#0xc04]
;;;128    }
000014  4770              BX       lr
;;;129    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x40002c04
                  |L7.28|
                          DCD      0x40002000

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;135      */
;;;136    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  2100              MOVS     r1,#0
;;;137    {
;;;138      __IO uint32_t tmpreg = 0;
;;;139    
;;;140      /* Check the parameters */
;;;141      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;142      /* Clear W[6:0] bits */
;;;143    
;;;144      tmpreg = WWDG->CFR & CFR_W_Mask;
000002  4a06              LDR      r2,|L8.28|
000004  6812              LDR      r2,[r2,#0]
000006  f022017f          BIC      r1,r2,#0x7f
;;;145    
;;;146      /* Set W[6:0] bits according to WindowValue value */
;;;147      tmpreg |= WindowValue & (uint32_t) BIT_Mask;
00000a  f000027f          AND      r2,r0,#0x7f
00000e  ea420101          ORR      r1,r2,r1
;;;148    
;;;149      /* Store the new value */
;;;150      WWDG->CFR = tmpreg;
000012  4a03              LDR      r2,|L8.32|
000014  f8c21c04          STR      r1,[r2,#0xc04]
;;;151    }
000018  4770              BX       lr
;;;152    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40002c04
                  |L8.32|
                          DCD      0x40002000
