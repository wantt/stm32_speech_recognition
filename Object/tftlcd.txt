; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\tftlcd.o --depend=.\Object\tftlcd.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\tftlcd.crf Src\BSP\TFTLCD.c]
                          THUMB

                          AREA ||i.Abs_Value||, CODE, READONLY, ALIGN=1

                  Abs_Value PROC
;;;265    
;;;266    u16 Abs_Value(u16 num1, u16 num2) {
000000  4602              MOV      r2,r0
;;;267        if(num1 > num2) {
000002  428a              CMP      r2,r1
000004  dd02              BLE      |L1.12|
;;;268            return (num1 - num2);
000006  1a50              SUBS     r0,r2,r1
000008  b280              UXTH     r0,r0
                  |L1.10|
;;;269        } else {
;;;270            return (num2 - num1);
;;;271        }
;;;272    }
00000a  4770              BX       lr
                  |L1.12|
00000c  1a88              SUBS     r0,r1,r2              ;270
00000e  b280              UXTH     r0,r0                 ;270
000010  e7fb              B        |L1.10|
;;;273    
                          ENDP


                          AREA ||i.FSMC_LCD_Init||, CODE, READONLY, ALIGN=2

                  FSMC_LCD_Init PROC
;;;46     
;;;47     void FSMC_LCD_Init(void) {
000000  b500              PUSH     {lr}
000002  b097              SUB      sp,sp,#0x5c
;;;48         GPIO_InitTypeDef GPIO_InitStructure;
;;;49         FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;50         FSMC_NORSRAMTimingInitTypeDef  FSMC_NORSRAMTimingInitStructure;
;;;51     
;;;52         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;                //PB0 推挽输出 背光
000004  2001              MOVS     r0,#1
000006  f8ad0058          STRH     r0,[sp,#0x58]
;;;53         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;         //推挽输出
00000a  2010              MOVS     r0,#0x10
00000c  f88d005b          STRB     r0,[sp,#0x5b]
;;;54         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d005a          STRB     r0,[sp,#0x5a]
;;;55         GPIO_Init(GPIOB, &GPIO_InitStructure);
000016  a916              ADD      r1,sp,#0x58
000018  4827              LDR      r0,|L2.184|
00001a  f7fffffe          BL       GPIO_Init
;;;56         GPIO_ResetBits(GPIOB, GPIO_Pin_0);
00001e  2101              MOVS     r1,#1
000020  4825              LDR      r0,|L2.184|
000022  f7fffffe          BL       GPIO_ResetBits
;;;57         
;;;58         //PORTD复用推挽输出
;;;59         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15; // //PORTD复用推挽输出
000026  f24c7033          MOV      r0,#0xc733
00002a  f8ad0058          STRH     r0,[sp,#0x58]
;;;60         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;          //复用推挽输出
00002e  2018              MOVS     r0,#0x18
000030  f88d005b          STRB     r0,[sp,#0x5b]
;;;61         GPIO_Init(GPIOD, &GPIO_InitStructure);
000034  a916              ADD      r1,sp,#0x58
000036  4821              LDR      r0,|L2.188|
000038  f7fffffe          BL       GPIO_Init
;;;62     
;;;63         //PORTE复用推挽输出
;;;64         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15; // //PORTD复用推挽输出
00003c  f64f7080          MOV      r0,#0xff80
000040  f8ad0058          STRH     r0,[sp,#0x58]
;;;65         GPIO_Init(GPIOE, &GPIO_InitStructure);
000044  a916              ADD      r1,sp,#0x58
000046  481e              LDR      r0,|L2.192|
000048  f7fffffe          BL       GPIO_Init
;;;66     
;;;67         //  //PORTG12复用推挽输出 A0
;;;68         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_12;  // //PORTD复用推挽输出
00004c  f2410001          MOV      r0,#0x1001
000050  f8ad0058          STRH     r0,[sp,#0x58]
;;;69         GPIO_Init(GPIOG, &GPIO_InitStructure);
000054  a916              ADD      r1,sp,#0x58
000056  481b              LDR      r0,|L2.196|
000058  f7fffffe          BL       GPIO_Init
;;;70     
;;;71     
;;;72         /*-- FSMC Configuration ------------------------------------------------------*/
;;;73         FSMC_NORSRAMTimingInitStructure.FSMC_AddressSetupTime = 0x00;
00005c  2000              MOVS     r0,#0
00005e  9001              STR      r0,[sp,#4]
;;;74         FSMC_NORSRAMTimingInitStructure.FSMC_AddressHoldTime = 0x00;
000060  9002              STR      r0,[sp,#8]
;;;75         FSMC_NORSRAMTimingInitStructure.FSMC_DataSetupTime = 0x02;
000062  2002              MOVS     r0,#2
000064  9003              STR      r0,[sp,#0xc]
;;;76         FSMC_NORSRAMTimingInitStructure.FSMC_BusTurnAroundDuration = 0x00;
000066  2000              MOVS     r0,#0
000068  9004              STR      r0,[sp,#0x10]
;;;77         FSMC_NORSRAMTimingInitStructure.FSMC_CLKDivision = 0x00;
00006a  9005              STR      r0,[sp,#0x14]
;;;78         FSMC_NORSRAMTimingInitStructure.FSMC_DataLatency = 0x00;
00006c  9006              STR      r0,[sp,#0x18]
;;;79         FSMC_NORSRAMTimingInitStructure.FSMC_AccessMode = FSMC_AccessMode_A;
00006e  9007              STR      r0,[sp,#0x1c]
;;;80     
;;;81         FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM4;
000070  2006              MOVS     r0,#6
000072  9008              STR      r0,[sp,#0x20]
;;;82         FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
000074  2000              MOVS     r0,#0
000076  9009              STR      r0,[sp,#0x24]
;;;83         FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
000078  900a              STR      r0,[sp,#0x28]
;;;84         FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
00007a  2010              MOVS     r0,#0x10
00007c  900b              STR      r0,[sp,#0x2c]
;;;85         FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00007e  2000              MOVS     r0,#0
000080  900c              STR      r0,[sp,#0x30]
;;;86         FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000082  900d              STR      r0,[sp,#0x34]
;;;87         FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
000084  900e              STR      r0,[sp,#0x38]
;;;88         FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000086  900f              STR      r0,[sp,#0x3c]
;;;89         FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000088  f44f5080          MOV      r0,#0x1000
00008c  9010              STR      r0,[sp,#0x40]
;;;90         FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
00008e  2000              MOVS     r0,#0
000090  9011              STR      r0,[sp,#0x44]
;;;91         FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000092  9012              STR      r0,[sp,#0x48]
;;;92         FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000094  9013              STR      r0,[sp,#0x4c]
;;;93         FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &FSMC_NORSRAMTimingInitStructure;
000096  a801              ADD      r0,sp,#4
000098  9014              STR      r0,[sp,#0x50]
;;;94         FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &FSMC_NORSRAMTimingInitStructure;
00009a  9015              STR      r0,[sp,#0x54]
;;;95     
;;;96         RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
00009c  2101              MOVS     r1,#1
00009e  0208              LSLS     r0,r1,#8
0000a0  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;97     
;;;98         FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
0000a4  a808              ADD      r0,sp,#0x20
0000a6  f7fffffe          BL       FSMC_NORSRAMInit
;;;99     
;;;100        /* Enable FSMC Bank1_SRAM Bank */
;;;101        FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  2006              MOVS     r0,#6
0000ae  f7fffffe          BL       FSMC_NORSRAMCmd
;;;102    }
0000b2  b017              ADD      sp,sp,#0x5c
0000b4  bd00              POP      {pc}
;;;103    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L2.184|
                          DCD      0x40010c00
                  |L2.188|
                          DCD      0x40011400
                  |L2.192|
                          DCD      0x40011800
                  |L2.196|
                          DCD      0x40012000

                          AREA ||i.LCD_DrawLine||, CODE, READONLY, ALIGN=1

                  LCD_DrawLine PROC
;;;273    
;;;274    void LCD_DrawLine(u16 left1, u16 top1, u16 left2, u16 top2, u16 color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb024          LDR      r11,[sp,#0x24]
;;;275        s32 left, top;
;;;276        u16 t;
;;;277    
;;;278        if((left1 == left2) && (top1 == top2)) {
000010  42b4              CMP      r4,r6
000012  d107              BNE      |L3.36|
000014  42bd              CMP      r5,r7
000016  d105              BNE      |L3.36|
;;;279            LCD_DrawPoint(left1, top1, color);
000018  465a              MOV      r2,r11
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       LCD_DrawPoint
000022  e047              B        |L3.180|
                  |L3.36|
;;;280        }
;;;281    
;;;282        else if(Abs_Value(top2, top1) > Abs_Value(left2, left1)) {
000024  4629              MOV      r1,r5
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       Abs_Value
00002c  4603              MOV      r3,r0
00002e  4621              MOV      r1,r4
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       Abs_Value
000036  4283              CMP      r3,r0
000038  dd1e              BLE      |L3.120|
;;;283            if(top1 > top2) {
00003a  42bd              CMP      r5,r7
00003c  dd05              BLE      |L3.74|
;;;284                t = left1;
00003e  46a2              MOV      r10,r4
;;;285                left1 = left2;
000040  4634              MOV      r4,r6
;;;286                left2 = t;
000042  4656              MOV      r6,r10
;;;287                t = top1;
000044  46aa              MOV      r10,r5
;;;288                top1 = top2;
000046  463d              MOV      r5,r7
;;;289                top2 = t;
000048  4657              MOV      r7,r10
                  |L3.74|
;;;290            }
;;;291    
;;;292            for(top = top1; top <= top2; top++) {
00004a  46a9              MOV      r9,r5
00004c  e011              B        |L3.114|
                  |L3.78|
;;;293                left = (s32)left1 - ((s32)top1 - top) * ((s32)left1 - (s32)left2) / ((s32)top1 - (s32)top2);
00004e  eba50009          SUB      r0,r5,r9
000052  1ba1              SUBS     r1,r4,r6
000054  4348              MULS     r0,r1,r0
000056  1be9              SUBS     r1,r5,r7
000058  fb90f0f1          SDIV     r0,r0,r1
00005c  eba40800          SUB      r8,r4,r0
;;;294                LCD_DrawPoint(left, top, color);
000060  465a              MOV      r2,r11
000062  fa1ff189          UXTH     r1,r9
000066  fa1ff088          UXTH     r0,r8
00006a  f7fffffe          BL       LCD_DrawPoint
00006e  f1090901          ADD      r9,r9,#1              ;292
                  |L3.114|
000072  45b9              CMP      r9,r7                 ;292
000074  ddeb              BLE      |L3.78|
000076  e01d              B        |L3.180|
                  |L3.120|
;;;295            }
;;;296        }
;;;297    
;;;298        else {
;;;299            if(left1 > left2) {
000078  42b4              CMP      r4,r6
00007a  dd05              BLE      |L3.136|
;;;300                t = left1;
00007c  46a2              MOV      r10,r4
;;;301                left1 = left2;
00007e  4634              MOV      r4,r6
;;;302                left2 = t;
000080  4656              MOV      r6,r10
;;;303                t = top1;
000082  46aa              MOV      r10,r5
;;;304                top1 = top2;
000084  463d              MOV      r5,r7
;;;305                top2 = t;
000086  4657              MOV      r7,r10
                  |L3.136|
;;;306            }
;;;307    
;;;308            for(left = left1; left <= left2; left++) {
000088  46a0              MOV      r8,r4
00008a  e011              B        |L3.176|
                  |L3.140|
;;;309                top = (s32)top1 - ((s32)left1 - left) * ((s32)top1 - (s32)top2) / ((s32)left1 - (s32)left2);
00008c  eba40008          SUB      r0,r4,r8
000090  1be9              SUBS     r1,r5,r7
000092  4348              MULS     r0,r1,r0
000094  1ba1              SUBS     r1,r4,r6
000096  fb90f0f1          SDIV     r0,r0,r1
00009a  eba50900          SUB      r9,r5,r0
;;;310                LCD_DrawPoint(left, top, color);
00009e  465a              MOV      r2,r11
0000a0  fa1ff189          UXTH     r1,r9
0000a4  fa1ff088          UXTH     r0,r8
0000a8  f7fffffe          BL       LCD_DrawPoint
0000ac  f1080801          ADD      r8,r8,#1              ;308
                  |L3.176|
0000b0  45b0              CMP      r8,r6                 ;308
0000b2  ddeb              BLE      |L3.140|
                  |L3.180|
;;;311            }
;;;312        }
;;;313    }
0000b4  e8bd8ff0          POP      {r4-r11,pc}
;;;314    
                          ENDP


                          AREA ||i.LCD_DrawPoint||, CODE, READONLY, ALIGN=2

                  LCD_DrawPoint PROC
;;;248    
;;;249    void LCD_DrawPoint(u16 left, u16 top, u16 color) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;250        u16 temp;
;;;251    
;;;252        if((left >= Screen.Width) || (top >= Screen.Height)) {
000008  480c              LDR      r0,|L4.60|
00000a  8880              LDRH     r0,[r0,#4]  ; Screen
00000c  42a0              CMP      r0,r4
00000e  dd03              BLE      |L4.24|
000010  480a              LDR      r0,|L4.60|
000012  88c0              LDRH     r0,[r0,#6]  ; Screen
000014  42a8              CMP      r0,r5
000016  dc00              BGT      |L4.26|
                  |L4.24|
;;;253            return;
;;;254        }
;;;255    
;;;256        if(LCD_COORD == COORD_320_240) {
;;;257            temp = top;
;;;258            top = left;
;;;259            left = 240 - temp;
;;;260        }
;;;261    
;;;262        LCD_Set_Address(left, top);
;;;263        LCD_WR_Data(color);
;;;264    }
000018  bdf0              POP      {r4-r7,pc}
                  |L4.26|
00001a  4809              LDR      r0,|L4.64|
00001c  7800              LDRB     r0,[r0,#0]            ;256  ; LCD_COORD
00001e  2801              CMP      r0,#1                 ;256
000020  d104              BNE      |L4.44|
000022  462f              MOV      r7,r5                 ;257
000024  4625              MOV      r5,r4                 ;258
000026  f1c700f0          RSB      r0,r7,#0xf0           ;259
00002a  b284              UXTH     r4,r0                 ;259
                  |L4.44|
00002c  4629              MOV      r1,r5                 ;262
00002e  4620              MOV      r0,r4                 ;262
000030  f7fffffe          BL       LCD_Set_Address
000034  4803              LDR      r0,|L4.68|
000036  8006              STRH     r6,[r0,#0]            ;263
000038  bf00              NOP      
00003a  e7ed              B        |L4.24|
;;;265    
                          ENDP

                  |L4.60|
                          DCD      Screen
                  |L4.64|
                          DCD      LCD_COORD
                  |L4.68|
                          DCD      0x6c000800

                          AREA ||i.LCD_Fill||, CODE, READONLY, ALIGN=2

                  LCD_Fill PROC
;;;214    
;;;215    void LCD_Fill(u16 left, u16 top, u16 width, u16 height, u16 color) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;216        u32 temp, n;
;;;217    
;;;218        if((left + width) > Screen.Width) {
000010  1928              ADDS     r0,r5,r4
000012  491f              LDR      r1,|L5.144|
000014  8889              LDRH     r1,[r1,#4]  ; Screen
000016  4288              CMP      r0,r1
000018  dd03              BLE      |L5.34|
;;;219            width = Screen.Width - left;
00001a  481d              LDR      r0,|L5.144|
00001c  8880              LDRH     r0,[r0,#4]  ; Screen
00001e  1b40              SUBS     r0,r0,r5
000020  b284              UXTH     r4,r0
                  |L5.34|
;;;220        }
;;;221    
;;;222        if((top + height) > Screen.Height) {
000022  19f0              ADDS     r0,r6,r7
000024  491a              LDR      r1,|L5.144|
000026  88c9              LDRH     r1,[r1,#6]  ; Screen
000028  4288              CMP      r0,r1
00002a  dd03              BLE      |L5.52|
;;;223            height = Screen.Height - top;
00002c  4818              LDR      r0,|L5.144|
00002e  88c0              LDRH     r0,[r0,#6]  ; Screen
000030  1b80              SUBS     r0,r0,r6
000032  b287              UXTH     r7,r0
                  |L5.52|
;;;224        }
;;;225    
;;;226        if(LCD_COORD == COORD_320_240) {
000034  4817              LDR      r0,|L5.148|
000036  7800              LDRB     r0,[r0,#0]  ; LCD_COORD
000038  2801              CMP      r0,#1
00003a  d108              BNE      |L5.78|
;;;227            temp = width;
00003c  46a0              MOV      r8,r4
;;;228            width = height;
00003e  463c              MOV      r4,r7
;;;229            height = temp;
000040  4647              MOV      r7,r8
;;;230    
;;;231            temp = top;
000042  46b0              MOV      r8,r6
;;;232            top = left;
000044  462e              MOV      r6,r5
;;;233            left = 240 - temp - width;
000046  f1c800f0          RSB      r0,r8,#0xf0
00004a  1b00              SUBS     r0,r0,r4
00004c  b285              UXTH     r5,r0
                  |L5.78|
;;;234        }
;;;235    
;;;236        LCD_Set_Disp_Window(left, top, width, height);
00004e  463b              MOV      r3,r7
000050  4622              MOV      r2,r4
000052  4631              MOV      r1,r6
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       LCD_Set_Disp_Window
;;;237    
;;;238        LCD_Set_Address(left, top);
00005a  4631              MOV      r1,r6
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       LCD_Set_Address
;;;239    
;;;240        temp = (u32)width * height;
000062  fb04f807          MUL      r8,r4,r7
;;;241    
;;;242        for(n = 0; n < temp; n++) {
000066  f04f0900          MOV      r9,#0
00006a  e005              B        |L5.120|
                  |L5.108|
;;;243            LCD_WR_Data(color);
00006c  f04f40d8          MOV      r0,#0x6c000000
000070  f8a0a800          STRH     r10,[r0,#0x800]
000074  f1090901          ADD      r9,r9,#1              ;242
                  |L5.120|
000078  45c1              CMP      r9,r8                 ;242
00007a  d3f7              BCC      |L5.108|
;;;244        }
;;;245    
;;;246        LCD_Set_Disp_Window(0, 0, 240, 320);
00007c  f44f73a0          MOV      r3,#0x140
000080  22f0              MOVS     r2,#0xf0
000082  2100              MOVS     r1,#0
000084  4608              MOV      r0,r1
000086  f7fffffe          BL       LCD_Set_Disp_Window
;;;247    }
00008a  e8bd87f0          POP      {r4-r10,pc}
;;;248    
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      Screen
                  |L5.148|
                          DCD      LCD_COORD

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=2

                  LCD_Init PROC
;;;103    
;;;104    void LCD_Init(void) {
000000  b508              PUSH     {r3,lr}
;;;105        FSMC_LCD_Init();
000002  f7fffffe          BL       FSMC_LCD_Init
;;;106        
;;;107        
;;;108        LCD_WR_CMD(0x00E3, 0x3008); // Set internal timing
000006  20e3              MOVS     r0,#0xe3
000008  49ff              LDR      r1,|L6.1032|
00000a  8008              STRH     r0,[r1,#0]
00000c  f2430008          MOV      r0,#0x3008
000010  f04f41d8          MOV      r1,#0x6c000000
000014  f8a10800          STRH     r0,[r1,#0x800]
;;;109        LCD_WR_CMD(0x00E7, 0x0012); // Set internal timing
000018  f04f00e7          MOV      r0,#0xe7
00001c  49fa              LDR      r1,|L6.1032|
00001e  8008              STRH     r0,[r1,#0]
000020  f04f0012          MOV      r0,#0x12
000024  f1010102          ADD      r1,r1,#2
000028  8008              STRH     r0,[r1,#0]
;;;110        LCD_WR_CMD(0x00EF, 0x1231); // Set internal timing
00002a  f04f00ef          MOV      r0,#0xef
00002e  49f6              LDR      r1,|L6.1032|
000030  8008              STRH     r0,[r1,#0]
000032  f2412031          MOV      r0,#0x1231
000036  f1010102          ADD      r1,r1,#2
00003a  8008              STRH     r0,[r1,#0]
;;;111        LCD_WR_CMD(0x0000, 0x0001); // Start Oscillation
00003c  f04f0000          MOV      r0,#0
000040  49f1              LDR      r1,|L6.1032|
000042  8008              STRH     r0,[r1,#0]
000044  f04f0001          MOV      r0,#1
000048  f1010102          ADD      r1,r1,#2
00004c  8008              STRH     r0,[r1,#0]
;;;112        LCD_WR_CMD(0x0001, 0x0100); // set SS and SM bit
00004e  49ee              LDR      r1,|L6.1032|
000050  8008              STRH     r0,[r1,#0]
000052  f44f7080          MOV      r0,#0x100
000056  f1010102          ADD      r1,r1,#2
00005a  8008              STRH     r0,[r1,#0]
;;;113        LCD_WR_CMD(0x0002, 0x0700); // set 1 line inversion
00005c  f04f0002          MOV      r0,#2
000060  49e9              LDR      r1,|L6.1032|
000062  8008              STRH     r0,[r1,#0]
000064  f44f60e0          MOV      r0,#0x700
000068  f1010102          ADD      r1,r1,#2
00006c  8008              STRH     r0,[r1,#0]
;;;114    
;;;115        LCD_WR_CMD(0x0003, 0x1030); //1010 set GRAM write direction and BGR=0,262K colors,1 transfers/pixel.
00006e  f04f0003          MOV      r0,#3
000072  49e5              LDR      r1,|L6.1032|
000074  8008              STRH     r0,[r1,#0]
000076  f2410030          MOV      r0,#0x1030
00007a  f1010102          ADD      r1,r1,#2
00007e  8008              STRH     r0,[r1,#0]
;;;116        LCD_WR_CMD(0x0004, 0x0000); // Resize register
000080  f04f0004          MOV      r0,#4
000084  49e0              LDR      r1,|L6.1032|
000086  8008              STRH     r0,[r1,#0]
000088  f04f0000          MOV      r0,#0
00008c  f1010102          ADD      r1,r1,#2
000090  8008              STRH     r0,[r1,#0]
;;;117        LCD_WR_CMD(0x0008, 0x0202); // set the back porch and front porch
000092  f04f0008          MOV      r0,#8
000096  49dc              LDR      r1,|L6.1032|
000098  8008              STRH     r0,[r1,#0]
00009a  f2402002          MOV      r0,#0x202
00009e  f1010102          ADD      r1,r1,#2
0000a2  8008              STRH     r0,[r1,#0]
;;;118        LCD_WR_CMD(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
0000a4  f04f0009          MOV      r0,#9
0000a8  49d7              LDR      r1,|L6.1032|
0000aa  8008              STRH     r0,[r1,#0]
0000ac  f04f0000          MOV      r0,#0
0000b0  f1010102          ADD      r1,r1,#2
0000b4  8008              STRH     r0,[r1,#0]
;;;119        LCD_WR_CMD(0x000A, 0x0000); // FMARK function
0000b6  f04f000a          MOV      r0,#0xa
0000ba  49d3              LDR      r1,|L6.1032|
0000bc  8008              STRH     r0,[r1,#0]
0000be  f04f0000          MOV      r0,#0
0000c2  f1010102          ADD      r1,r1,#2
0000c6  8008              STRH     r0,[r1,#0]
;;;120        LCD_WR_CMD(0x000C, 0x0000); // RGB interface setting
0000c8  f04f000c          MOV      r0,#0xc
0000cc  49ce              LDR      r1,|L6.1032|
0000ce  8008              STRH     r0,[r1,#0]
0000d0  f04f0000          MOV      r0,#0
0000d4  f1010102          ADD      r1,r1,#2
0000d8  8008              STRH     r0,[r1,#0]
;;;121        LCD_WR_CMD(0x000D, 0x0000); // Frame marker Position
0000da  f04f000d          MOV      r0,#0xd
0000de  49ca              LDR      r1,|L6.1032|
0000e0  8008              STRH     r0,[r1,#0]
0000e2  f04f0000          MOV      r0,#0
0000e6  f1010102          ADD      r1,r1,#2
0000ea  8008              STRH     r0,[r1,#0]
;;;122        LCD_WR_CMD(0x000F, 0x0000); // RGB interface polarity
0000ec  f04f000f          MOV      r0,#0xf
0000f0  49c5              LDR      r1,|L6.1032|
0000f2  8008              STRH     r0,[r1,#0]
0000f4  f04f0000          MOV      r0,#0
0000f8  f1010102          ADD      r1,r1,#2
0000fc  8008              STRH     r0,[r1,#0]
;;;123        //Power On sequence
;;;124        LCD_WR_CMD(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
0000fe  f04f0010          MOV      r0,#0x10
000102  49c1              LDR      r1,|L6.1032|
000104  8008              STRH     r0,[r1,#0]
000106  f04f0000          MOV      r0,#0
00010a  f1010102          ADD      r1,r1,#2
00010e  8008              STRH     r0,[r1,#0]
;;;125        LCD_WR_CMD(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
000110  f04f0011          MOV      r0,#0x11
000114  49bc              LDR      r1,|L6.1032|
000116  8008              STRH     r0,[r1,#0]
000118  f04f0007          MOV      r0,#7
00011c  f1010102          ADD      r1,r1,#2
000120  8008              STRH     r0,[r1,#0]
;;;126        LCD_WR_CMD(0x0012, 0x0000); // VREG1OUT voltage
000122  f04f0012          MOV      r0,#0x12
000126  49b8              LDR      r1,|L6.1032|
000128  8008              STRH     r0,[r1,#0]
00012a  f04f0000          MOV      r0,#0
00012e  f1010102          ADD      r1,r1,#2
000132  8008              STRH     r0,[r1,#0]
;;;127        LCD_WR_CMD(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
000134  f04f0013          MOV      r0,#0x13
000138  49b3              LDR      r1,|L6.1032|
00013a  8008              STRH     r0,[r1,#0]
00013c  f04f0000          MOV      r0,#0
000140  f04f41d8          MOV      r1,#0x6c000000
000144  f8a10800          STRH     r0,[r1,#0x800]
;;;128        delay_ms(20); // Dis-charge capacitor power voltage
000148  f04f0014          MOV      r0,#0x14
00014c  f7fffffe          BL       delay_ms
;;;129        LCD_WR_CMD(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
000150  2010              MOVS     r0,#0x10
000152  49ad              LDR      r1,|L6.1032|
000154  8008              STRH     r0,[r1,#0]
000156  f2416090          MOV      r0,#0x1690
00015a  f1010102          ADD      r1,r1,#2
00015e  8008              STRH     r0,[r1,#0]
;;;130        LCD_WR_CMD(0x0011, 0x0227); // R11h=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]
000160  f04f0011          MOV      r0,#0x11
000164  49a8              LDR      r1,|L6.1032|
000166  8008              STRH     r0,[r1,#0]
000168  f2402027          MOV      r0,#0x227
00016c  f04f41d8          MOV      r1,#0x6c000000
000170  f8a10800          STRH     r0,[r1,#0x800]
;;;131        delay_us(50); // delay_us 50ms
000174  f04f0032          MOV      r0,#0x32
000178  f7fffffe          BL       delay_us
;;;132        LCD_WR_CMD(0x0012, 0x001C); // External reference voltage= Vci;
00017c  2012              MOVS     r0,#0x12
00017e  49a2              LDR      r1,|L6.1032|
000180  8008              STRH     r0,[r1,#0]
000182  f04f001c          MOV      r0,#0x1c
000186  f04f41d8          MOV      r1,#0x6c000000
00018a  f8a10800          STRH     r0,[r1,#0x800]
;;;133        delay_us(50); // delay_us 50ms
00018e  f04f0032          MOV      r0,#0x32
000192  f7fffffe          BL       delay_us
;;;134        LCD_WR_CMD(0x0013, 0x1800); // R13=1200 when R12=009D;VDV[4:0] for VCOM amplitude
000196  2013              MOVS     r0,#0x13
000198  499b              LDR      r1,|L6.1032|
00019a  8008              STRH     r0,[r1,#0]
00019c  f44f50c0          MOV      r0,#0x1800
0001a0  f1010102          ADD      r1,r1,#2
0001a4  8008              STRH     r0,[r1,#0]
;;;135        LCD_WR_CMD(0x0029, 0x0014); // R29=000C when R12=009D;VCM[5:0] for VCOMH
0001a6  f04f0029          MOV      r0,#0x29
0001aa  4997              LDR      r1,|L6.1032|
0001ac  8008              STRH     r0,[r1,#0]
0001ae  f04f0014          MOV      r0,#0x14
0001b2  f1010102          ADD      r1,r1,#2
0001b6  8008              STRH     r0,[r1,#0]
;;;136        LCD_WR_CMD(0x002B, 0x000D); // Frame Rate = 91Hz
0001b8  f04f002b          MOV      r0,#0x2b
0001bc  4992              LDR      r1,|L6.1032|
0001be  8008              STRH     r0,[r1,#0]
0001c0  f04f000d          MOV      r0,#0xd
0001c4  f04f41d8          MOV      r1,#0x6c000000
0001c8  f8a10800          STRH     r0,[r1,#0x800]
;;;137        delay_us(50); // delay_us 50ms
0001cc  f04f0032          MOV      r0,#0x32
0001d0  f7fffffe          BL       delay_us
;;;138        LCD_WR_CMD(0x0020, 0x0000); // GRAM horizontal Address
0001d4  2020              MOVS     r0,#0x20
0001d6  498c              LDR      r1,|L6.1032|
0001d8  8008              STRH     r0,[r1,#0]
0001da  f04f0000          MOV      r0,#0
0001de  f1010102          ADD      r1,r1,#2
0001e2  8008              STRH     r0,[r1,#0]
;;;139        LCD_WR_CMD(0x0021, 0x0000); // GRAM Vertical Address
0001e4  f04f0021          MOV      r0,#0x21
0001e8  4987              LDR      r1,|L6.1032|
0001ea  8008              STRH     r0,[r1,#0]
0001ec  f04f0000          MOV      r0,#0
0001f0  f1010102          ADD      r1,r1,#2
0001f4  8008              STRH     r0,[r1,#0]
;;;140        // ----------- Adjust the Gamma Curve ----------//
;;;141        LCD_WR_CMD(0x0030, 0x0007);
0001f6  f04f0030          MOV      r0,#0x30
0001fa  4983              LDR      r1,|L6.1032|
0001fc  8008              STRH     r0,[r1,#0]
0001fe  f04f0007          MOV      r0,#7
000202  f1010102          ADD      r1,r1,#2
000206  8008              STRH     r0,[r1,#0]
;;;142        LCD_WR_CMD(0x0031, 0x0302);
000208  f04f0031          MOV      r0,#0x31
00020c  497e              LDR      r1,|L6.1032|
00020e  8008              STRH     r0,[r1,#0]
000210  f2403002          MOV      r0,#0x302
000214  f1010102          ADD      r1,r1,#2
000218  8008              STRH     r0,[r1,#0]
;;;143        LCD_WR_CMD(0x0032, 0x0105);
00021a  f04f0032          MOV      r0,#0x32
00021e  497a              LDR      r1,|L6.1032|
000220  8008              STRH     r0,[r1,#0]
000222  f2401005          MOV      r0,#0x105
000226  f1010102          ADD      r1,r1,#2
00022a  8008              STRH     r0,[r1,#0]
;;;144        LCD_WR_CMD(0x0035, 0x0206);
00022c  f04f0035          MOV      r0,#0x35
000230  4975              LDR      r1,|L6.1032|
000232  8008              STRH     r0,[r1,#0]
000234  f2402006          MOV      r0,#0x206
000238  f1010102          ADD      r1,r1,#2
00023c  8008              STRH     r0,[r1,#0]
;;;145        LCD_WR_CMD(0x0036, 0x0808);
00023e  f04f0036          MOV      r0,#0x36
000242  4971              LDR      r1,|L6.1032|
000244  8008              STRH     r0,[r1,#0]
000246  f6400008          MOV      r0,#0x808
00024a  f1010102          ADD      r1,r1,#2
00024e  8008              STRH     r0,[r1,#0]
;;;146        LCD_WR_CMD(0x0037, 0x0206);
000250  f04f0037          MOV      r0,#0x37
000254  496c              LDR      r1,|L6.1032|
000256  8008              STRH     r0,[r1,#0]
000258  f2402006          MOV      r0,#0x206
00025c  f1010102          ADD      r1,r1,#2
000260  8008              STRH     r0,[r1,#0]
;;;147        LCD_WR_CMD(0x0038, 0x0504);
000262  f04f0038          MOV      r0,#0x38
000266  4968              LDR      r1,|L6.1032|
000268  8008              STRH     r0,[r1,#0]
00026a  f2405004          MOV      r0,#0x504
00026e  f1010102          ADD      r1,r1,#2
000272  8008              STRH     r0,[r1,#0]
;;;148        LCD_WR_CMD(0x0039, 0x0007);
000274  f04f0039          MOV      r0,#0x39
000278  4963              LDR      r1,|L6.1032|
00027a  8008              STRH     r0,[r1,#0]
00027c  f04f0007          MOV      r0,#7
000280  f1010102          ADD      r1,r1,#2
000284  8008              STRH     r0,[r1,#0]
;;;149        LCD_WR_CMD(0x003C, 0x0105);
000286  f04f003c          MOV      r0,#0x3c
00028a  495f              LDR      r1,|L6.1032|
00028c  8008              STRH     r0,[r1,#0]
00028e  f2401005          MOV      r0,#0x105
000292  f1010102          ADD      r1,r1,#2
000296  8008              STRH     r0,[r1,#0]
;;;150        LCD_WR_CMD(0x003D, 0x0808);
000298  f04f003d          MOV      r0,#0x3d
00029c  495a              LDR      r1,|L6.1032|
00029e  8008              STRH     r0,[r1,#0]
0002a0  f6400008          MOV      r0,#0x808
0002a4  f1010102          ADD      r1,r1,#2
0002a8  8008              STRH     r0,[r1,#0]
;;;151        //------------------ Set GRAM area ---------------//
;;;152        LCD_WR_CMD(0x0050, 0x0000); // Horizontal GRAM Start Address
0002aa  f04f0050          MOV      r0,#0x50
0002ae  4956              LDR      r1,|L6.1032|
0002b0  8008              STRH     r0,[r1,#0]
0002b2  f04f0000          MOV      r0,#0
0002b6  f1010102          ADD      r1,r1,#2
0002ba  8008              STRH     r0,[r1,#0]
;;;153        LCD_WR_CMD(0x0051, 0x00EF); // Horizontal GRAM End Address
0002bc  f04f0051          MOV      r0,#0x51
0002c0  4951              LDR      r1,|L6.1032|
0002c2  8008              STRH     r0,[r1,#0]
0002c4  f04f00ef          MOV      r0,#0xef
0002c8  f1010102          ADD      r1,r1,#2
0002cc  8008              STRH     r0,[r1,#0]
;;;154        LCD_WR_CMD(0x0052, 0x0000); // Vertical GRAM Start Address
0002ce  f04f0052          MOV      r0,#0x52
0002d2  494d              LDR      r1,|L6.1032|
0002d4  8008              STRH     r0,[r1,#0]
0002d6  f04f0000          MOV      r0,#0
0002da  f1010102          ADD      r1,r1,#2
0002de  8008              STRH     r0,[r1,#0]
;;;155        LCD_WR_CMD(0x0053, 0x013F); // Vertical GRAM Start Address
0002e0  f04f0053          MOV      r0,#0x53
0002e4  4948              LDR      r1,|L6.1032|
0002e6  8008              STRH     r0,[r1,#0]
0002e8  f240103f          MOV      r0,#0x13f
0002ec  f1010102          ADD      r1,r1,#2
0002f0  8008              STRH     r0,[r1,#0]
;;;156        LCD_WR_CMD(0x0060, 0xA700); // Gate Scan Line
0002f2  f04f0060          MOV      r0,#0x60
0002f6  4944              LDR      r1,|L6.1032|
0002f8  8008              STRH     r0,[r1,#0]
0002fa  f44f4027          MOV      r0,#0xa700
0002fe  f1010102          ADD      r1,r1,#2
000302  8008              STRH     r0,[r1,#0]
;;;157        LCD_WR_CMD(0x0061, 0x0001); // NDL,VLE, REV
000304  f04f0061          MOV      r0,#0x61
000308  493f              LDR      r1,|L6.1032|
00030a  8008              STRH     r0,[r1,#0]
00030c  f04f0001          MOV      r0,#1
000310  f1010102          ADD      r1,r1,#2
000314  8008              STRH     r0,[r1,#0]
;;;158        LCD_WR_CMD(0x006A, 0x0000); // set scrolling line
000316  f04f006a          MOV      r0,#0x6a
00031a  493b              LDR      r1,|L6.1032|
00031c  8008              STRH     r0,[r1,#0]
00031e  f04f0000          MOV      r0,#0
000322  f1010102          ADD      r1,r1,#2
000326  8008              STRH     r0,[r1,#0]
;;;159        //-------------- Partial Display Control ---------//
;;;160        LCD_WR_CMD(0x0080, 0x0000);
000328  f04f0080          MOV      r0,#0x80
00032c  4936              LDR      r1,|L6.1032|
00032e  8008              STRH     r0,[r1,#0]
000330  f04f0000          MOV      r0,#0
000334  f1010102          ADD      r1,r1,#2
000338  8008              STRH     r0,[r1,#0]
;;;161        LCD_WR_CMD(0x0081, 0x0000);
00033a  f04f0081          MOV      r0,#0x81
00033e  4932              LDR      r1,|L6.1032|
000340  8008              STRH     r0,[r1,#0]
000342  f04f0000          MOV      r0,#0
000346  f1010102          ADD      r1,r1,#2
00034a  8008              STRH     r0,[r1,#0]
;;;162        LCD_WR_CMD(0x0082, 0x0000);
00034c  f04f0082          MOV      r0,#0x82
000350  492d              LDR      r1,|L6.1032|
000352  8008              STRH     r0,[r1,#0]
000354  f04f0000          MOV      r0,#0
000358  f1010102          ADD      r1,r1,#2
00035c  8008              STRH     r0,[r1,#0]
;;;163        LCD_WR_CMD(0x0083, 0x0000);
00035e  f04f0083          MOV      r0,#0x83
000362  4929              LDR      r1,|L6.1032|
000364  8008              STRH     r0,[r1,#0]
000366  f04f0000          MOV      r0,#0
00036a  f1010102          ADD      r1,r1,#2
00036e  8008              STRH     r0,[r1,#0]
;;;164        LCD_WR_CMD(0x0084, 0x0000);
000370  f04f0084          MOV      r0,#0x84
000374  4924              LDR      r1,|L6.1032|
000376  8008              STRH     r0,[r1,#0]
000378  f04f0000          MOV      r0,#0
00037c  f1010102          ADD      r1,r1,#2
000380  8008              STRH     r0,[r1,#0]
;;;165        LCD_WR_CMD(0x0085, 0x0000);
000382  f04f0085          MOV      r0,#0x85
000386  4920              LDR      r1,|L6.1032|
000388  8008              STRH     r0,[r1,#0]
00038a  f04f0000          MOV      r0,#0
00038e  f1010102          ADD      r1,r1,#2
000392  8008              STRH     r0,[r1,#0]
;;;166        //-------------- Panel Control -------------------//
;;;167        LCD_WR_CMD(0x0090, 0x0010);
000394  f04f0090          MOV      r0,#0x90
000398  491b              LDR      r1,|L6.1032|
00039a  8008              STRH     r0,[r1,#0]
00039c  f04f0010          MOV      r0,#0x10
0003a0  f1010102          ADD      r1,r1,#2
0003a4  8008              STRH     r0,[r1,#0]
;;;168        LCD_WR_CMD(0x0092, 0x0000);
0003a6  f04f0092          MOV      r0,#0x92
0003aa  4917              LDR      r1,|L6.1032|
0003ac  8008              STRH     r0,[r1,#0]
0003ae  f04f0000          MOV      r0,#0
0003b2  f1010102          ADD      r1,r1,#2
0003b6  8008              STRH     r0,[r1,#0]
;;;169        LCD_WR_CMD(0x0093, 0x0003);
0003b8  f04f0093          MOV      r0,#0x93
0003bc  4912              LDR      r1,|L6.1032|
0003be  8008              STRH     r0,[r1,#0]
0003c0  f04f0003          MOV      r0,#3
0003c4  f1010102          ADD      r1,r1,#2
0003c8  8008              STRH     r0,[r1,#0]
;;;170        LCD_WR_CMD(0x0095, 0x0110);
0003ca  f04f0095          MOV      r0,#0x95
0003ce  490e              LDR      r1,|L6.1032|
0003d0  8008              STRH     r0,[r1,#0]
0003d2  f44f7088          MOV      r0,#0x110
0003d6  f1010102          ADD      r1,r1,#2
0003da  8008              STRH     r0,[r1,#0]
;;;171        LCD_WR_CMD(0x0097, 0x0000);
0003dc  f04f0097          MOV      r0,#0x97
0003e0  4909              LDR      r1,|L6.1032|
0003e2  8008              STRH     r0,[r1,#0]
0003e4  f04f0000          MOV      r0,#0
0003e8  f1010102          ADD      r1,r1,#2
0003ec  8008              STRH     r0,[r1,#0]
;;;172        LCD_WR_CMD(0x0098, 0x0000);
0003ee  f04f0098          MOV      r0,#0x98
0003f2  4905              LDR      r1,|L6.1032|
0003f4  8008              STRH     r0,[r1,#0]
0003f6  f04f0000          MOV      r0,#0
0003fa  f1010102          ADD      r1,r1,#2
0003fe  8008              STRH     r0,[r1,#0]
;;;173        LCD_WR_CMD(0x0007, 0x0133); // 262K color and display ON
000400  f04f0007          MOV      r0,#7
000404  4900              LDR      r1,|L6.1032|
000406  e001              B        |L6.1036|
                  |L6.1032|
                          DCD      0x6c0007fe
                  |L6.1036|
00040c  8008              STRH     r0,[r1,#0]
00040e  f2401033          MOV      r0,#0x133
000412  f04f41d8          MOV      r1,#0x6c000000
000416  f8a10800          STRH     r0,[r1,#0x800]
;;;174        
;;;175        
;;;176        LCD_Set_Coord(COORD_320_240);
00041a  f04f0001          MOV      r0,#1
00041e  f7fffffe          BL       LCD_Set_Coord
;;;177        LCD_Fill(0, 0, 320, 240, GREEN);
000422  f44f63fc          MOV      r3,#0x7e0
000426  9300              STR      r3,[sp,#0]
000428  23f0              MOVS     r3,#0xf0
00042a  f44f72a0          MOV      r2,#0x140
00042e  2100              MOVS     r1,#0
000430  4608              MOV      r0,r1
000432  f7fffffe          BL       LCD_Fill
;;;178    }
000436  bd08              POP      {r3,pc}
;;;179    
                          ENDP


                          AREA ||i.LCD_RD_CDM||, CODE, READONLY, ALIGN=2

                  LCD_RD_CDM PROC
;;;39     
;;;40     u16 LCD_RD_CDM(u16 index) {
000000  4601              MOV      r1,r0
;;;41         LCD_WR_REG(index);
000002  4803              LDR      r0,|L7.16|
000004  8001              STRH     r1,[r0,#0]
;;;42         return(*(__IO uint16_t *)(Bank1_LCD_D));
000006  f04f40d8          MOV      r0,#0x6c000000
00000a  f8b00800          LDRH     r0,[r0,#0x800]
;;;43     }
00000e  4770              BX       lr
;;;44     
                          ENDP

                  |L7.16|
                          DCD      0x6c0007fe

                          AREA ||i.LCD_Set_Address||, CODE, READONLY, ALIGN=2

                  LCD_Set_Address PROC
;;;196    
;;;197    void LCD_Set_Address(u16 left, u16 top) {
000000  2220              MOVS     r2,#0x20
;;;198        LCD_WR_CMD(0x0020, left); // Horizontal GRAM Start Address
000002  4b09              LDR      r3,|L8.40|
000004  801a              STRH     r2,[r3,#0]
000006  f04f42d8          MOV      r2,#0x6c000000
00000a  f8a20800          STRH     r0,[r2,#0x800]
;;;199        LCD_WR_CMD(0x0021, top); // Vertical GRAM Start Address
00000e  f04f0221          MOV      r2,#0x21
000012  f04f43d8          MOV      r3,#0x6c000000
000016  f8a327fe          STRH     r2,[r3,#0x7fe]
00001a  4a04              LDR      r2,|L8.44|
00001c  8011              STRH     r1,[r2,#0]
;;;200        LCD_WR_REG(0x0022);
00001e  f04f0222          MOV      r2,#0x22
000022  4b01              LDR      r3,|L8.40|
000024  801a              STRH     r2,[r3,#0]
;;;201    }
000026  4770              BX       lr
;;;202    
                          ENDP

                  |L8.40|
                          DCD      0x6c0007fe
                  |L8.44|
                          DCD      0x6c000800

                          AREA ||i.LCD_Set_Coord||, CODE, READONLY, ALIGN=2

                  LCD_Set_Coord PROC
;;;202    
;;;203    void LCD_Set_Coord(u8 coord) {
000000  4909              LDR      r1,|L9.40|
;;;204        LCD_COORD = coord;
000002  7008              STRB     r0,[r1,#0]
;;;205    
;;;206        if(LCD_COORD == COORD_320_240) {
000004  7809              LDRB     r1,[r1,#0]  ; LCD_COORD
000006  2901              CMP      r1,#1
000008  d106              BNE      |L9.24|
;;;207            Screen.Width = 320;
00000a  f44f71a0          MOV      r1,#0x140
00000e  4a07              LDR      r2,|L9.44|
000010  8091              STRH     r1,[r2,#4]
;;;208            Screen.Height = 240;
000012  21f0              MOVS     r1,#0xf0
000014  80d1              STRH     r1,[r2,#6]
000016  e005              B        |L9.36|
                  |L9.24|
;;;209        } else {
;;;210            Screen.Width = 240;
000018  21f0              MOVS     r1,#0xf0
00001a  4a04              LDR      r2,|L9.44|
00001c  8091              STRH     r1,[r2,#4]
;;;211            Screen.Height = 320;
00001e  f44f71a0          MOV      r1,#0x140
000022  80d1              STRH     r1,[r2,#6]
                  |L9.36|
;;;212        }
;;;213    }
000024  4770              BX       lr
;;;214    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      LCD_COORD
                  |L9.44|
                          DCD      Screen

                          AREA ||i.LCD_Set_Disp_Window||, CODE, READONLY, ALIGN=2

                  LCD_Set_Disp_Window PROC
;;;189    
;;;190    void LCD_Set_Disp_Window(u16 left, u16 top, u16 width, u16 height) {
000000  b530              PUSH     {r4,r5,lr}
;;;191        LCD_WR_CMD(0x0050, left); // Horizontal GRAM Start Address
000002  2450              MOVS     r4,#0x50
000004  4d12              LDR      r5,|L10.80|
000006  802c              STRH     r4,[r5,#0]
000008  f04f44d8          MOV      r4,#0x6c000000
00000c  f8a40800          STRH     r0,[r4,#0x800]
;;;192        LCD_WR_CMD(0x0051, left + width - 1); // Horizontal GRAM End Address
000010  f04f0451          MOV      r4,#0x51
000014  802c              STRH     r4,[r5,#0]
000016  eb000402          ADD      r4,r0,r2
00001a  f1a40401          SUB      r4,r4,#1
00001e  f1050502          ADD      r5,r5,#2
000022  802c              STRH     r4,[r5,#0]
;;;193        LCD_WR_CMD(0x0052, top); // Vertical GRAM Start Address
000024  f04f0452          MOV      r4,#0x52
000028  f04f45d8          MOV      r5,#0x6c000000
00002c  f8a547fe          STRH     r4,[r5,#0x7fe]
000030  4c08              LDR      r4,|L10.84|
000032  8021              STRH     r1,[r4,#0]
;;;194        LCD_WR_CMD(0x0053, top + height - 1); // Vertical GRAM Start Address
000034  f04f0453          MOV      r4,#0x53
000038  4d05              LDR      r5,|L10.80|
00003a  802c              STRH     r4,[r5,#0]
00003c  eb010403          ADD      r4,r1,r3
000040  f1a40401          SUB      r4,r4,#1
000044  f04f45d8          MOV      r5,#0x6c000000
000048  f8a54800          STRH     r4,[r5,#0x800]
;;;195    }
00004c  bd30              POP      {r4,r5,pc}
;;;196    
                          ENDP

00004e  0000              DCW      0x0000
                  |L10.80|
                          DCD      0x6c0007fe
                  |L10.84|
                          DCD      0x6c000800

                          AREA ||i.LCD_ShowCN||, CODE, READONLY, ALIGN=1

                  LCD_ShowCN PROC
;;;333    
;;;334    void LCD_ShowCN(u16 left, u16 top, u8 *cn, u16 color) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;335        u32 Addr;
;;;336        u8 row, rank, bit;
;;;337        u8 *fontDot=getGB2312Font24Dot(cn);
00000c  4648              MOV      r0,r9
00000e  f7fffffe          BL       getGB2312Font24Dot
000012  4683              MOV      r11,r0
;;;338        //DBPLN("LCD_ShowCN %02X %02X", cn[0], cn[1]);
;;;339        
;;;340        for(row = 0; row < 24; row++) {
000014  2500              MOVS     r5,#0
000016  e021              B        |L11.92|
                  |L11.24|
;;;341            for(rank = 0; rank < 3; rank++) {
000018  2400              MOVS     r4,#0
00001a  e01b              B        |L11.84|
                  |L11.28|
;;;342                for(bit = 0; bit < 8; bit++) {
00001c  2600              MOVS     r6,#0
00001e  e015              B        |L11.76|
                  |L11.32|
;;;343                    if((*(fontDot + row * 3 + rank) & (1 << (7 - bit))) != 0) {
000020  eb050045          ADD      r0,r5,r5,LSL #1
000024  4458              ADD      r0,r0,r11
000026  5d00              LDRB     r0,[r0,r4]
000028  f1c60207          RSB      r2,r6,#7
00002c  2101              MOVS     r1,#1
00002e  4091              LSLS     r1,r1,r2
000030  4208              TST      r0,r1
000032  d009              BEQ      |L11.72|
;;;344                        LCD_DrawPoint(left + rank * 8 + bit, top + row, color);
000034  eb080205          ADD      r2,r8,r5
000038  b291              UXTH     r1,r2
00003a  eb0702c4          ADD      r2,r7,r4,LSL #3
00003e  4432              ADD      r2,r2,r6
000040  b290              UXTH     r0,r2
000042  4652              MOV      r2,r10
000044  f7fffffe          BL       LCD_DrawPoint
                  |L11.72|
000048  1c70              ADDS     r0,r6,#1              ;342
00004a  b2c6              UXTB     r6,r0                 ;342
                  |L11.76|
00004c  2e08              CMP      r6,#8                 ;342
00004e  dbe7              BLT      |L11.32|
000050  1c60              ADDS     r0,r4,#1              ;341
000052  b2c4              UXTB     r4,r0                 ;341
                  |L11.84|
000054  2c03              CMP      r4,#3                 ;341
000056  dbe1              BLT      |L11.28|
000058  1c68              ADDS     r0,r5,#1              ;340
00005a  b2c5              UXTB     r5,r0                 ;340
                  |L11.92|
00005c  2d18              CMP      r5,#0x18              ;340
00005e  dbdb              BLT      |L11.24|
;;;345                    }
;;;346                }
;;;347            }
;;;348        }
;;;349    }
000060  e8bd9ff0          POP      {r4-r12,pc}
;;;350    
                          ENDP


                          AREA ||i.LCD_ShowChar||, CODE, READONLY, ALIGN=1

                  LCD_ShowChar PROC
;;;314    
;;;315    void LCD_ShowChar(u16 left, u16 top, u8 char_data, u16 color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;316        u32 Addr;
;;;317        u8 row, rank, bit;
;;;318        u8 Font_Tab[36];
;;;319    
;;;320        Addr = 36 * (char_data - ' ') + 589824;
00000e  f1a90020          SUB      r0,r9,#0x20
000012  eb0000c0          ADD      r0,r0,r0,LSL #3
000016  0080              LSLS     r0,r0,#2
000018  f5002b10          ADD      r11,r0,#0x90000
;;;321        spiFlashRead(Addr, Font_Tab, 36);
00001c  2224              MOVS     r2,#0x24
00001e  4669              MOV      r1,sp
000020  4658              MOV      r0,r11
000022  f7fffffe          BL       spiFlashRead
;;;322    
;;;323        for(rank = 0; rank < 12; rank++) {
000026  2500              MOVS     r5,#0
000028  e021              B        |L12.110|
                  |L12.42|
;;;324            for(row = 0; row < 3; row++) {
00002a  2400              MOVS     r4,#0
00002c  e01b              B        |L12.102|
                  |L12.46|
;;;325                for(bit = 0; bit < 8; bit++) {
00002e  2600              MOVS     r6,#0
000030  e015              B        |L12.94|
                  |L12.50|
;;;326                    if((*(Font_Tab + row + rank * 3) & (1 << (7 - bit))) != 0) {
000032  eb0d0004          ADD      r0,sp,r4
000036  eb050145          ADD      r1,r5,r5,LSL #1
00003a  5c40              LDRB     r0,[r0,r1]
00003c  f1c60207          RSB      r2,r6,#7
000040  2101              MOVS     r1,#1
000042  4091              LSLS     r1,r1,r2
000044  4208              TST      r0,r1
000046  d008              BEQ      |L12.90|
;;;327                        LCD_DrawPoint(left + rank, top + row * 8 + bit, color);
000048  eb0802c4          ADD      r2,r8,r4,LSL #3
00004c  4432              ADD      r2,r2,r6
00004e  b291              UXTH     r1,r2
000050  197a              ADDS     r2,r7,r5
000052  b290              UXTH     r0,r2
000054  4652              MOV      r2,r10
000056  f7fffffe          BL       LCD_DrawPoint
                  |L12.90|
00005a  1c70              ADDS     r0,r6,#1              ;325
00005c  b2c6              UXTB     r6,r0                 ;325
                  |L12.94|
00005e  2e08              CMP      r6,#8                 ;325
000060  dbe7              BLT      |L12.50|
000062  1c60              ADDS     r0,r4,#1              ;324
000064  b2c4              UXTB     r4,r0                 ;324
                  |L12.102|
000066  2c03              CMP      r4,#3                 ;324
000068  dbe1              BLT      |L12.46|
00006a  1c68              ADDS     r0,r5,#1              ;323
00006c  b2c5              UXTB     r5,r0                 ;323
                  |L12.110|
00006e  2d0c              CMP      r5,#0xc               ;323
000070  dbdb              BLT      |L12.42|
;;;328                    }
;;;329                }
;;;330            }
;;;331        }
;;;332    }
000072  b009              ADD      sp,sp,#0x24
000074  e8bd8ff0          POP      {r4-r11,pc}
;;;333    
                          ENDP


                          AREA ||i.RGB||, CODE, READONLY, ALIGN=1

                  ||RGB|| PROC
;;;179    
;;;180    u16 RGB(u8 red, u8 green, u8 blue) {
000000  b510              PUSH     {r4,lr}
000002  4603              MOV      r3,r0
;;;181        u16 rgb565 = 0;
000004  2000              MOVS     r0,#0
;;;182    
;;;183        rgb565 = (red >> 3) << 11;
000006  10dc              ASRS     r4,r3,#3
000008  02e0              LSLS     r0,r4,#11
;;;184        rgb565 += (green >> 2) << 5;
00000a  108c              ASRS     r4,r1,#2
00000c  eb001444          ADD      r4,r0,r4,LSL #5
000010  b2a0              UXTH     r0,r4
;;;185        rgb565 += blue >> 3;
000012  eb0004e2          ADD      r4,r0,r2,ASR #3
000016  b2a0              UXTH     r0,r4
;;;186    
;;;187        return rgb565;
;;;188    }
000018  bd10              POP      {r4,pc}
;;;189    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  LCD_COORD
000000  00                DCB      0x00
