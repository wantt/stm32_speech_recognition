; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\stm32f10x_pwr.o --depend=.\Object\stm32f10x_pwr.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\stm32f10x_pwr.crf Src\StdPeriph_Driver\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;132      */
;;;133    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;134    {
;;;135      /* Check the parameters */
;;;136      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;137      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;138    }
000004  4770              BX       lr
;;;139    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;295      */
;;;296    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4903              LDR      r1,|L2.16|
;;;297    {
;;;298      /* Check the parameters */
;;;299      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;300             
;;;301      PWR->CR |=  PWR_FLAG << 2;
000002  6809              LDR      r1,[r1,#0]
000004  ea410180          ORR      r1,r1,r0,LSL #2
000008  4a01              LDR      r2,|L2.16|
00000a  6011              STR      r1,[r2,#0]
;;;302    }
00000c  4770              BX       lr
;;;303    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;120      */
;;;121    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;122    {
;;;123      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;124      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;125    }
000014  bd10              POP      {r4,pc}
;;;126    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;244      */
;;;245    void PWR_EnterSTANDBYMode(void)
000000  480b              LDR      r0,|L4.48|
;;;246    {
;;;247      /* Clear Wake-up flag */
;;;248      PWR->CR |= CR_CWUF_Set;
000002  6800              LDR      r0,[r0,#0]
000004  f0400004          ORR      r0,r0,#4
000008  4909              LDR      r1,|L4.48|
00000a  6008              STR      r0,[r1,#0]
;;;249      /* Select STANDBY mode */
;;;250      PWR->CR |= CR_PDDS_Set;
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f0400002          ORR      r0,r0,#2
000014  6008              STR      r0,[r1,#0]
;;;251      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;252      *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
000016  4807              LDR      r0,|L4.52|
000018  6800              LDR      r0,[r0,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  f04f21e0          MOV      r1,#0xe000e000
000022  f8c10d10          STR      r0,[r1,#0xd10]
;;;253    /* This option is used to ensure that store operations are completed */
;;;254    #if defined ( __CC_ARM   )
;;;255      __force_stores();
000026  bf00              NOP      
000028  bf00              NOP      
;;;256    #endif
;;;257      /* Request Wait For Interrupt */
;;;258      __WFI();
00002a  bf30              WFI      
;;;259    }
00002c  4770              BX       lr
;;;260    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x40007000
                  |L4.52|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;205      */
;;;206    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;207    {
000002  4602              MOV      r2,r0
;;;208      uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;209      /* Check the parameters */
;;;210      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;211      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;212      
;;;213      /* Select the regulator state in STOP mode ---------------------------------*/
;;;214      tmpreg = PWR->CR;
000006  4b0e              LDR      r3,|L5.64|
000008  6818              LDR      r0,[r3,#0]
;;;215      /* Clear PDDS and LPDS bits */
;;;216      tmpreg &= CR_DS_Mask;
00000a  f0200003          BIC      r0,r0,#3
;;;217      /* Set LPDS bit according to PWR_Regulator value */
;;;218      tmpreg |= PWR_Regulator;
00000e  4310              ORRS     r0,r0,r2
;;;219      /* Store the new value */
;;;220      PWR->CR = tmpreg;
000010  6018              STR      r0,[r3,#0]
;;;221      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;222      *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
000012  4b0c              LDR      r3,|L5.68|
000014  681b              LDR      r3,[r3,#0]
000016  f0430304          ORR      r3,r3,#4
00001a  f04f24e0          MOV      r4,#0xe000e000
00001e  f8c43d10          STR      r3,[r4,#0xd10]
;;;223      
;;;224      /* Select STOP mode entry --------------------------------------------------*/
;;;225      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000022  2901              CMP      r1,#1
000024  d101              BNE      |L5.42|
;;;226      {   
;;;227        /* Request Wait For Interrupt */
;;;228        __WFI();
000026  bf30              WFI      
000028  e000              B        |L5.44|
                  |L5.42|
;;;229      }
;;;230      else
;;;231      {
;;;232        /* Request Wait For Event */
;;;233        __WFE();
00002a  bf20              WFE      
                  |L5.44|
;;;234      }
;;;235      
;;;236      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;237      *(__IO uint32_t *) SCB_SysCtrl &= SysCtrl_SLEEPDEEP_Reset;  
00002c  4b05              LDR      r3,|L5.68|
00002e  681b              LDR      r3,[r3,#0]
000030  f0230304          BIC      r3,r3,#4
000034  f04f24e0          MOV      r4,#0xe000e000
000038  f8c43d10          STR      r3,[r4,#0xd10]
;;;238    }
00003c  bd10              POP      {r4,pc}
;;;239    
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0x40007000
                  |L5.68|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;269      */
;;;270    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4601              MOV      r1,r0
;;;271    {
;;;272      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;273      /* Check the parameters */
;;;274      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;275      
;;;276      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L6.20|
000006  6852              LDR      r2,[r2,#4]
000008  420a              TST      r2,r1
00000a  d001              BEQ      |L6.16|
;;;277      {
;;;278        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L6.18|
                  |L6.16|
;;;279      }
;;;280      else
;;;281      {
;;;282        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;283      }
;;;284      /* Return the flag status */
;;;285      return bitstatus;
;;;286    }
000012  4770              BX       lr
;;;287    
                          ENDP

                  |L6.20|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;145      */
;;;146    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;147    {
;;;148      /* Check the parameters */
;;;149      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;150      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;151    }
000004  4770              BX       lr
;;;152    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;166      */
;;;167    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4601              MOV      r1,r0
;;;168    {
;;;169      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;170      /* Check the parameters */
;;;171      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;172      tmpreg = PWR->CR;
000004  4a03              LDR      r2,|L8.20|
000006  6810              LDR      r0,[r2,#0]
;;;173      /* Clear PLS[7:5] bits */
;;;174      tmpreg &= CR_PLS_Mask;
000008  f02000e0          BIC      r0,r0,#0xe0
;;;175      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;176      tmpreg |= PWR_PVDLevel;
00000c  4308              ORRS     r0,r0,r1
;;;177      /* Store the new value */
;;;178      PWR->CR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;179    }
000010  4770              BX       lr
;;;180    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;186      */
;;;187    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L9.8|
;;;188    {
;;;189      /* Check the parameters */
;;;190      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;191      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;192    }
000004  4770              BX       lr
;;;193    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x420e00a0
