; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\stm32f10x_rtc.o --depend=.\Object\stm32f10x_rtc.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\stm32f10x_rtc.crf Src\StdPeriph_Driver\src\stm32f10x_rtc.c]
                          THUMB

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;274      */
;;;275    void RTC_ClearFlag(uint16_t RTC_FLAG)
000000  4905              LDR      r1,|L1.24|
;;;276    {
;;;277      /* Check the parameters */
;;;278      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;279        
;;;280      /* Clear the coressponding RTC flag */
;;;281      RTC->CRL &= (uint16_t)~RTC_FLAG;
000002  8809              LDRH     r1,[r1,#0]
000004  ea6f0200          MVN      r2,r0
000008  b292              UXTH     r2,r2
00000a  ea010102          AND      r1,r1,r2
00000e  4a03              LDR      r2,|L1.28|
000010  f8a21804          STRH     r1,[r2,#0x804]
;;;282    }
000014  4770              BX       lr
;;;283    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40002804
                  |L1.28|
                          DCD      0x40002000

                          AREA ||i.RTC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RTC_ClearITPendingBit PROC
;;;319      */
;;;320    void RTC_ClearITPendingBit(uint16_t RTC_IT)
000000  4905              LDR      r1,|L2.24|
;;;321    {
;;;322      /* Check the parameters */
;;;323      assert_param(IS_RTC_IT(RTC_IT));  
;;;324      
;;;325      /* Clear the coressponding RTC pending bit */
;;;326      RTC->CRL &= (uint16_t)~RTC_IT;
000002  8809              LDRH     r1,[r1,#0]
000004  ea6f0200          MVN      r2,r0
000008  b292              UXTH     r2,r2
00000a  ea010102          AND      r1,r1,r2
00000e  4a03              LDR      r2,|L2.28|
000010  f8a21804          STRH     r1,[r2,#0x804]
;;;327    }
000014  4770              BX       lr
;;;328    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40002804
                  |L2.28|
                          DCD      0x40002000

                          AREA ||i.RTC_EnterConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterConfigMode PROC
;;;112      */
;;;113    void RTC_EnterConfigMode(void)
000000  4803              LDR      r0,|L3.16|
;;;114    {
;;;115      /* Set the CNF flag to enter in the Configuration Mode */
;;;116      RTC->CRL |= CRL_CNF_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4902              LDR      r1,|L3.20|
00000a  f8a10804          STRH     r0,[r1,#0x804]
;;;117    }
00000e  4770              BX       lr
;;;118    
                          ENDP

                  |L3.16|
                          DCD      0x40002804
                  |L3.20|
                          DCD      0x40002000

                          AREA ||i.RTC_ExitConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_ExitConfigMode PROC
;;;123      */
;;;124    void RTC_ExitConfigMode(void)
000000  4804              LDR      r0,|L4.20|
;;;125    {
;;;126      /* Reset the CNF flag to exit from the Configuration Mode */
;;;127      RTC->CRL &= CRL_CNF_Reset;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71ef          MOV      r1,#0xffef
000008  ea000001          AND      r0,r0,r1
00000c  4902              LDR      r1,|L4.24|
00000e  f8a10804          STRH     r0,[r1,#0x804]
;;;128    }
000012  4770              BX       lr
;;;129    
                          ENDP

                  |L4.20|
                          DCD      0x40002804
                  |L4.24|
                          DCD      0x40002000

                          AREA ||i.RTC_GetCounter||, CODE, READONLY, ALIGN=2

                  RTC_GetCounter PROC
;;;134      */
;;;135    uint32_t RTC_GetCounter(void)
000000  2100              MOVS     r1,#0
;;;136    {
;;;137      uint16_t tmp = 0;
;;;138      tmp = RTC->CNTL;
000002  4804              LDR      r0,|L5.20|
000004  8801              LDRH     r1,[r0,#0]
;;;139      return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
000006  4804              LDR      r0,|L5.24|
000008  f8b00818          LDRH     r0,[r0,#0x818]
00000c  ea414000          ORR      r0,r1,r0,LSL #16
;;;140    }
000010  4770              BX       lr
;;;141    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x4000281c
                  |L5.24|
                          DCD      0x40002000

                          AREA ||i.RTC_GetDivider||, CODE, READONLY, ALIGN=2

                  RTC_GetDivider PROC
;;;194      */
;;;195    uint32_t RTC_GetDivider(void)
000000  2000              MOVS     r0,#0
;;;196    {
;;;197      uint32_t tmp = 0x00;
;;;198      tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
000002  4906              LDR      r1,|L6.28|
000004  8809              LDRH     r1,[r1,#0]
000006  ea4f7101          LSL      r1,r1,#28
00000a  ea4f3011          LSR      r0,r1,#12
;;;199      tmp |= RTC->DIVL;
00000e  4904              LDR      r1,|L6.32|
000010  f8b11814          LDRH     r1,[r1,#0x814]
000014  ea410000          ORR      r0,r1,r0
;;;200      return tmp;
;;;201    }
000018  4770              BX       lr
;;;202    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40002810
                  |L6.32|
                          DCD      0x40002000

                          AREA ||i.RTC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetFlagStatus PROC
;;;245      */
;;;246    FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
000000  4601              MOV      r1,r0
;;;247    {
;;;248      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;249      
;;;250      /* Check the parameters */
;;;251      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;252      
;;;253      if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
000004  4a03              LDR      r2,|L7.20|
000006  8812              LDRH     r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d001              BEQ      |L7.16|
;;;254      {
;;;255        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L7.18|
                  |L7.16|
;;;256      }
;;;257      else
;;;258      {
;;;259        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L7.18|
;;;260      }
;;;261      return bitstatus;
;;;262    }
000012  4770              BX       lr
;;;263    
                          ENDP

                  |L7.20|
                          DCD      0x40002804

                          AREA ||i.RTC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetITStatus PROC
;;;292      */
;;;293    ITStatus RTC_GetITStatus(uint16_t RTC_IT)
000000  4601              MOV      r1,r0
;;;294    {
;;;295      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;296      /* Check the parameters */
;;;297      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;298      
;;;299      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
000004  4a07              LDR      r2,|L8.36|
000006  8812              LDRH     r2,[r2,#0]
000008  ea020201          AND      r2,r2,r1
00000c  b2d0              UXTB     r0,r2
;;;300      if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
00000e  4a06              LDR      r2,|L8.40|
000010  f8b22800          LDRH     r2,[r2,#0x800]
000014  420a              TST      r2,r1
000016  d002              BEQ      |L8.30|
000018  b108              CBZ      r0,|L8.30|
;;;301      {
;;;302        bitstatus = SET;
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L8.32|
                  |L8.30|
;;;303      }
;;;304      else
;;;305      {
;;;306        bitstatus = RESET;
00001e  2000              MOVS     r0,#0
                  |L8.32|
;;;307      }
;;;308      return bitstatus;
;;;309    }
000020  4770              BX       lr
;;;310    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0x40002804
                  |L8.40|
                          DCD      0x40002000

                          AREA ||i.RTC_ITConfig||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;91       */
;;;92     void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
000000  b139              CBZ      r1,|L9.18|
;;;93     {
;;;94       /* Check the parameters */
;;;95       assert_param(IS_RTC_IT(RTC_IT));  
;;;96       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;97       
;;;98       if (NewState != DISABLE)
;;;99       {
;;;100        RTC->CRH |= RTC_IT;
000002  4a09              LDR      r2,|L9.40|
000004  8812              LDRH     r2,[r2,#0]
000006  ea420200          ORR      r2,r2,r0
00000a  4b08              LDR      r3,|L9.44|
00000c  f8a32800          STRH     r2,[r3,#0x800]
000010  e009              B        |L9.38|
                  |L9.18|
;;;101      }
;;;102      else
;;;103      {
;;;104        RTC->CRH &= (uint16_t)~RTC_IT;
000012  4a05              LDR      r2,|L9.40|
000014  8812              LDRH     r2,[r2,#0]
000016  ea6f0300          MVN      r3,r0
00001a  b29b              UXTH     r3,r3
00001c  ea020203          AND      r2,r2,r3
000020  4b02              LDR      r3,|L9.44|
000022  f8a32800          STRH     r2,[r3,#0x800]
                  |L9.38|
;;;105      }
;;;106    }
000026  4770              BX       lr
;;;107    
                          ENDP

                  |L9.40|
                          DCD      0x40002800
                  |L9.44|
                          DCD      0x40002000

                          AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarm PROC
;;;179      */
;;;180    void RTC_SetAlarm(uint32_t AlarmValue)
000000  b500              PUSH     {lr}
;;;181    {  
000002  4602              MOV      r2,r0
;;;182      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;183      /* Set the ALARM MSB word */
;;;184      RTC->ALRH = AlarmValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4904              LDR      r1,|L10.28|
00000c  8008              STRH     r0,[r1,#0]
;;;185      /* Set the ALARM LSB word */
;;;186      RTC->ALRL = (AlarmValue & RTC_LSB_Mask);
00000e  4904              LDR      r1,|L10.32|
000010  f8a12824          STRH     r2,[r1,#0x824]
;;;187      RTC_ExitConfigMode();
000014  f7fffffe          BL       RTC_ExitConfigMode
;;;188    }
000018  bd00              POP      {pc}
;;;189    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40002820
                  |L10.32|
                          DCD      0x40002000

                          AREA ||i.RTC_SetCounter||, CODE, READONLY, ALIGN=2

                  RTC_SetCounter PROC
;;;146      */
;;;147    void RTC_SetCounter(uint32_t CounterValue)
000000  b500              PUSH     {lr}
;;;148    { 
000002  4602              MOV      r2,r0
;;;149      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;150      /* Set RTC COUNTER MSB word */
;;;151      RTC->CNTH = CounterValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4904              LDR      r1,|L11.28|
00000c  8008              STRH     r0,[r1,#0]
;;;152      /* Set RTC COUNTER LSB word */
;;;153      RTC->CNTL = (CounterValue & RTC_LSB_Mask);
00000e  4904              LDR      r1,|L11.32|
000010  f8a1281c          STRH     r2,[r1,#0x81c]
;;;154      RTC_ExitConfigMode();
000014  f7fffffe          BL       RTC_ExitConfigMode
;;;155    }
000018  bd00              POP      {pc}
;;;156    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40002818
                  |L11.32|
                          DCD      0x40002000

                          AREA ||i.RTC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  RTC_SetPrescaler PROC
;;;161      */
;;;162    void RTC_SetPrescaler(uint32_t PrescalerValue)
000000  b500              PUSH     {lr}
;;;163    {
000002  4602              MOV      r2,r0
;;;164      /* Check the parameters */
;;;165      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;166      
;;;167      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;168      /* Set RTC PRESCALER MSB word */
;;;169      RTC->PRLH = (PrescalerValue & PRLH_MSB_Mask) >> 16;
000008  f3c24003          UBFX     r0,r2,#16,#4
00000c  4903              LDR      r1,|L12.28|
00000e  8008              STRH     r0,[r1,#0]
;;;170      /* Set RTC PRESCALER LSB word */
;;;171      RTC->PRLL = (PrescalerValue & RTC_LSB_Mask);
000010  4903              LDR      r1,|L12.32|
000012  f8a1280c          STRH     r2,[r1,#0x80c]
;;;172      RTC_ExitConfigMode();
000016  f7fffffe          BL       RTC_ExitConfigMode
;;;173    }
00001a  bd00              POP      {pc}
;;;174    
                          ENDP

                  |L12.28|
                          DCD      0x40002808
                  |L12.32|
                          DCD      0x40002000

                          AREA ||i.RTC_WaitForLastTask||, CODE, READONLY, ALIGN=2

                  RTC_WaitForLastTask PROC
;;;208      */
;;;209    void RTC_WaitForLastTask(void)
000000  bf00              NOP      
                  |L13.2|
;;;210    {
;;;211      /* Loop until RTOFF flag is set */
;;;212      while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
000002  4803              LDR      r0,|L13.16|
000004  8800              LDRH     r0,[r0,#0]
000006  f0100f20          TST      r0,#0x20
00000a  d0fa              BEQ      |L13.2|
;;;213      {
;;;214      }
;;;215    }
00000c  4770              BX       lr
;;;216    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40002804

                          AREA ||i.RTC_WaitForSynchro||, CODE, READONLY, ALIGN=2

                  RTC_WaitForSynchro PROC
;;;224      */
;;;225    void RTC_WaitForSynchro(void)
000000  4807              LDR      r0,|L14.32|
;;;226    {
;;;227      /* Clear RSF flag */
;;;228      RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71f7          MOV      r1,#0xfff7
000008  ea000001          AND      r0,r0,r1
00000c  4905              LDR      r1,|L14.36|
00000e  f8a10804          STRH     r0,[r1,#0x804]
;;;229      /* Loop until RSF flag is set */
;;;230      while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
000012  bf00              NOP      
                  |L14.20|
000014  4802              LDR      r0,|L14.32|
000016  8800              LDRH     r0,[r0,#0]
000018  f0100f08          TST      r0,#8
00001c  d0fa              BEQ      |L14.20|
;;;231      {
;;;232      }
;;;233    }
00001e  4770              BX       lr
;;;234    
                          ENDP

                  |L14.32|
                          DCD      0x40002804
                  |L14.36|
                          DCD      0x40002000
