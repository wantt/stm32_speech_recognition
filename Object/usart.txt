; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Object\usart.o --depend=.\Object\usart.d --feedback=.\Object\stm32-speech-recognition.fed --cpu=Cortex-M3 --apcs=interwork -O0 -Otime -I.\Src\APP -I.\Src\BSP -I.\Src\GUI -I.\Src\CM3_SYS -I.\Src\FATFS -I.\Src\StdPeriph_Driver -I.\Src\StdPeriph_Driver\inc -I.\Src\Speech_Recog -IE:\SoftWare\KEIL\Keil4\path\ARM\INC -IE:\SoftWare\KEIL\Keil4\path\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\Object\usart.crf Src\BSP\USART.C]
                          THUMB

                          AREA ||i.UASRT_DMA_TXConfiguration||, CODE, READONLY, ALIGN=2

                  UASRT_DMA_TXConfiguration PROC
;;;68     
;;;69     void UASRT_DMA_TXConfiguration(USART_TypeDef *USARTx, u8 *BufferSRC, u32 BufferSize) {
000000  b570              PUSH     {r4-r6,lr}
000002  b08c              SUB      sp,sp,#0x30
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;70         DMA_InitTypeDef DMA_InitStructure;
;;;71     
;;;72         DMA_ClearFlag(DMA1_FLAG_TC4 | DMA1_FLAG_TE4 | DMA1_FLAG_HT4 | DMA1_FLAG_GL4);
00000a  f44f4070          MOV      r0,#0xf000
00000e  f7fffffe          BL       DMA_ClearFlag
;;;73     
;;;74         /* DMA1 Channel4 disable */
;;;75         DMA_Cmd(DMA1_Channel4, DISABLE);
000012  2100              MOVS     r1,#0
000014  480f              LDR      r0,|L1.84|
000016  f7fffffe          BL       DMA_Cmd
;;;76     
;;;77         /* DMA1 Channel4 Config */
;;;78         DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)(&(USARTx->DR));
00001a  1d30              ADDS     r0,r6,#4
00001c  9001              STR      r0,[sp,#4]
;;;79         DMA_InitStructure.DMA_MemoryBaseAddr = (u32)BufferSRC;
00001e  9402              STR      r4,[sp,#8]
;;;80         DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
000020  2010              MOVS     r0,#0x10
000022  9003              STR      r0,[sp,#0xc]
;;;81         DMA_InitStructure.DMA_BufferSize = BufferSize;
000024  9504              STR      r5,[sp,#0x10]
;;;82         DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000026  2000              MOVS     r0,#0
000028  9005              STR      r0,[sp,#0x14]
;;;83         DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
00002a  2080              MOVS     r0,#0x80
00002c  9006              STR      r0,[sp,#0x18]
;;;84         DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00002e  2000              MOVS     r0,#0
000030  9007              STR      r0,[sp,#0x1c]
;;;85         DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000032  9008              STR      r0,[sp,#0x20]
;;;86         DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000034  9009              STR      r0,[sp,#0x24]
;;;87         DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000036  f44f5000          MOV      r0,#0x2000
00003a  900a              STR      r0,[sp,#0x28]
;;;88         DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
00003c  2000              MOVS     r0,#0
00003e  900b              STR      r0,[sp,#0x2c]
;;;89         DMA_Init(DMA1_Channel4, &DMA_InitStructure);
000040  a901              ADD      r1,sp,#4
000042  4804              LDR      r0,|L1.84|
000044  f7fffffe          BL       DMA_Init
;;;90     
;;;91         /* DMA1 Channel4 enable */
;;;92         DMA_Cmd(DMA1_Channel4, ENABLE);
000048  2101              MOVS     r1,#1
00004a  4802              LDR      r0,|L1.84|
00004c  f7fffffe          BL       DMA_Cmd
;;;93     }
000050  b00c              ADD      sp,sp,#0x30
000052  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

                  |L1.84|
                          DCD      0x40020044

                          AREA ||i.USART1_configuration||, CODE, READONLY, ALIGN=2

                  USART1_configuration PROC
;;;9      
;;;10     void USART1_configuration(void) {
000000  b500              PUSH     {lr}
000002  b085              SUB      sp,sp,#0x14
;;;11         GPIO_InitTypeDef GPIO_InitStructure;
;;;12         USART_InitTypeDef USART_InitStructure;
;;;13     
;;;14         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;            //USART1 TX
000004  f44f7000          MOV      r0,#0x200
000008  f8ad0010          STRH     r0,[sp,#0x10]
;;;15         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;    //复用推挽输出
00000c  2018              MOVS     r0,#0x18
00000e  f88d0013          STRB     r0,[sp,#0x13]
;;;16         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0012          STRB     r0,[sp,#0x12]
;;;17         GPIO_Init(GPIOA, &GPIO_InitStructure);          //A端口
000018  a904              ADD      r1,sp,#0x10
00001a  4819              LDR      r0,|L2.128|
00001c  f7fffffe          BL       GPIO_Init
;;;18     
;;;19         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;           //USART1 RX
000020  f44f6080          MOV      r0,#0x400
000024  f8ad0010          STRH     r0,[sp,#0x10]
;;;20         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;   //复用开漏输入
000028  2004              MOVS     r0,#4
00002a  f88d0013          STRB     r0,[sp,#0x13]
;;;21         GPIO_Init(GPIOA, &GPIO_InitStructure);
00002e  a904              ADD      r1,sp,#0x10
000030  4813              LDR      r0,|L2.128|
000032  f7fffffe          BL       GPIO_Init
;;;22     
;;;23     
;;;24         /* USART1 configuration ------------------------------------------------------*/
;;;25         /* USART and USART2 configured as follow:
;;;26             - BaudRate = 115200 baud
;;;27             - Word Length = 8 Bits
;;;28             - One Stop Bit
;;;29             - No parity
;;;30             - Hardware flow control disabled (RTS and CTS signals)
;;;31             - Receive and transmit enabled
;;;32         */
;;;33         USART_InitStructure.USART_BaudRate = 115200;
000036  f44f30e1          MOV      r0,#0x1c200
00003a  9000              STR      r0,[sp,#0]
;;;34         USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00003c  2000              MOVS     r0,#0
00003e  f8ad0004          STRH     r0,[sp,#4]
;;;35         USART_InitStructure.USART_StopBits = USART_StopBits_1;
000042  f8ad0006          STRH     r0,[sp,#6]
;;;36         USART_InitStructure.USART_Parity = USART_Parity_No;
000046  f8ad0008          STRH     r0,[sp,#8]
;;;37         USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00004a  f8ad000c          STRH     r0,[sp,#0xc]
;;;38         USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00004e  200c              MOVS     r0,#0xc
000050  f8ad000a          STRH     r0,[sp,#0xa]
;;;39     
;;;40         /* Configure USART1 */
;;;41         USART_Init(USART1, &USART_InitStructure);
000054  4669              MOV      r1,sp
000056  480b              LDR      r0,|L2.132|
000058  f7fffffe          BL       USART_Init
;;;42     
;;;43     
;;;44         /* Enable USART1 Receive interrupts */
;;;45         USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00005c  2201              MOVS     r2,#1
00005e  f2405125          MOV      r1,#0x525
000062  4808              LDR      r0,|L2.132|
000064  f7fffffe          BL       USART_ITConfig
;;;46     
;;;47         USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
000068  2201              MOVS     r2,#1
00006a  2180              MOVS     r1,#0x80
00006c  4805              LDR      r0,|L2.132|
00006e  f7fffffe          BL       USART_DMACmd
;;;48     
;;;49         /* Enable the USART1 */
;;;50         USART_Cmd(USART1, ENABLE);
000072  2101              MOVS     r1,#1
000074  4803              LDR      r0,|L2.132|
000076  f7fffffe          BL       USART_Cmd
;;;51     }
00007a  b005              ADD      sp,sp,#0x14
00007c  bd00              POP      {pc}
;;;52     
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      0x40010800
                  |L2.132|
                          DCD      0x40013800

                          AREA ||i.USART1_print_hex||, CODE, READONLY, ALIGN=2

                  USART1_print_hex PROC
;;;113    
;;;114    void USART1_print_hex(void *data, u32 size){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;115        u8 *buf=(u8*)data;
000008  462f              MOV      r7,r5
;;;116        
;;;117        u32 i;
;;;118        for(i=0; i<size; i++){
00000a  2400              MOVS     r4,#0
00000c  e014              B        |L3.56|
                  |L3.14|
;;;119            USART1_printf("%02X ", buf[i]);
00000e  5d39              LDRB     r1,[r7,r4]
000010  a00d              ADR      r0,|L3.72|
000012  f7fffffe          BL       USART1_printf
;;;120            
;;;121            if(i%8==7){
000016  f0040007          AND      r0,r4,#7
00001a  2807              CMP      r0,#7
00001c  d103              BNE      |L3.38|
;;;122                USART_SendStr(USART1, " ");
00001e  a10b              ADR      r1,|L3.76|
000020  480b              LDR      r0,|L3.80|
000022  f7fffffe          BL       USART_SendStr
                  |L3.38|
;;;123            }
;;;124            
;;;125            if(i%16==15){
000026  f004000f          AND      r0,r4,#0xf
00002a  280f              CMP      r0,#0xf
00002c  d103              BNE      |L3.54|
;;;126                USART_SendStr(USART1, "\r\n");
00002e  a109              ADR      r1,|L3.84|
000030  4807              LDR      r0,|L3.80|
000032  f7fffffe          BL       USART_SendStr
                  |L3.54|
000036  1c64              ADDS     r4,r4,#1              ;118
                  |L3.56|
000038  42b4              CMP      r4,r6                 ;118
00003a  d3e8              BCC      |L3.14|
;;;127            }
;;;128        }
;;;129        
;;;130        USART_SendStr(USART1, "\r\n");
00003c  a105              ADR      r1,|L3.84|
00003e  4804              LDR      r0,|L3.80|
000040  f7fffffe          BL       USART_SendStr
;;;131    }
000044  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L3.72|
000048  25303258          DCB      "%02X"
                  |L3.76|
00004c  2000              DCB      " ",0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L3.80|
                          DCD      0x40013800
                  |L3.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0

                          AREA ||i.USART1_printf||, CODE, READONLY, ALIGN=2

                  USART1_printf PROC
;;;95     char printfBuf[256];
;;;96     void USART1_printf(char *fmt, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;97         va_list arg_ptr;
;;;98         va_start(arg_ptr, fmt);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;99         vsnprintf(printfBuf, sizeof(printfBuf), fmt, arg_ptr);
000008  f44f7180          MOV      r1,#0x100
00000c  4805              LDR      r0,|L4.36|
00000e  9b00              LDR      r3,[sp,#0]
000010  9a02              LDR      r2,[sp,#8]
000012  f7fffffe          BL       __c89vsnprintf
;;;100        USART_SendStr(USART1, (u8 *)printfBuf);
000016  4903              LDR      r1,|L4.36|
000018  4803              LDR      r0,|L4.40|
00001a  f7fffffe          BL       USART_SendStr
;;;101        va_end(arg_ptr);
;;;102    }
00001e  b001              ADD      sp,sp,#4
000020  f85dfb14          LDR      pc,[sp],#0x14
;;;103    
                          ENDP

                  |L4.36|
                          DCD      printfBuf
                  |L4.40|
                          DCD      0x40013800

                          AREA ||i.USART1_printf_line||, CODE, READONLY, ALIGN=2

                  USART1_printf_line PROC
;;;103    
;;;104    void USART1_printf_line(char *fmt, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;105        va_list arg_ptr;
;;;106        va_start(arg_ptr, fmt);
000004  a803              ADD      r0,sp,#0xc
000006  9000              STR      r0,[sp,#0]
;;;107        vsnprintf(printfBuf, sizeof(printfBuf), fmt, arg_ptr);
000008  f44f7180          MOV      r1,#0x100
00000c  4807              LDR      r0,|L5.44|
00000e  9b00              LDR      r3,[sp,#0]
000010  9a02              LDR      r2,[sp,#8]
000012  f7fffffe          BL       __c89vsnprintf
;;;108        va_end(arg_ptr);
;;;109        
;;;110        USART_SendStr(USART1, (u8 *)printfBuf);
000016  4905              LDR      r1,|L5.44|
000018  4805              LDR      r0,|L5.48|
00001a  f7fffffe          BL       USART_SendStr
;;;111        USART_SendStr(USART1, "\r\n");
00001e  a105              ADR      r1,|L5.52|
000020  4803              LDR      r0,|L5.48|
000022  f7fffffe          BL       USART_SendStr
;;;112    }
000026  b001              ADD      sp,sp,#4
000028  f85dfb14          LDR      pc,[sp],#0x14
;;;113    
                          ENDP

                  |L5.44|
                          DCD      printfBuf
                  |L5.48|
                          DCD      0x40013800
                  |L5.52|
000034  0d0a00            DCB      "\r\n",0
000037  00                DCB      0

                          AREA ||i.USART_SendArray||, CODE, READONLY, ALIGN=2

                  USART_SendArray PROC
;;;60     
;;;61     void USART_SendArray(USART_TypeDef *USARTx, uint8_t *Data , u16 len) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;62         u16 i;
;;;63     
;;;64         for(i = 0; i < len; i++) {
00000a  2400              MOVS     r4,#0
00000c  e005              B        |L6.26|
                  |L6.14|
;;;65             USART1_printf("%x ", *(Data + i));
00000e  5d29              LDRB     r1,[r5,r4]
000010  a004              ADR      r0,|L6.36|
000012  f7fffffe          BL       USART1_printf
000016  1c60              ADDS     r0,r4,#1              ;64
000018  b284              UXTH     r4,r0                 ;64
                  |L6.26|
00001a  42b4              CMP      r4,r6                 ;64
00001c  dbf7              BLT      |L6.14|
;;;66         }
;;;67     }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;68     
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
000024  25782000          DCB      "%x ",0

                          AREA ||i.USART_SendStr||, CODE, READONLY, ALIGN=1

                  USART_SendStr PROC
;;;52     
;;;53     void USART_SendStr(USART_TypeDef *USARTx, uint8_t *Data) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;54         u16 i;
;;;55     
;;;56         for(i = 0; * (Data + i) != '\0'; i++) {
000006  2500              MOVS     r5,#0
000008  e005              B        |L7.22|
                  |L7.10|
;;;57             USART_SendData(USARTx, *(Data + i));
00000a  5d61              LDRB     r1,[r4,r5]
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       USART_SendData
000012  1c68              ADDS     r0,r5,#1              ;56
000014  b285              UXTH     r5,r0                 ;56
                  |L7.22|
000016  5d60              LDRB     r0,[r4,r5]            ;56
000018  2800              CMP      r0,#0                 ;56
00001a  d1f6              BNE      |L7.10|
;;;58         }
;;;59     }
00001c  bd70              POP      {r4-r6,pc}
;;;60     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  printfBuf
                          %        256
